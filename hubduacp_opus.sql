-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Oct 27, 2019 at 05:20 AM
-- Server version: 10.0.38-MariaDB
-- PHP Version: 7.2.7

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `hubduacp_opus`
--

-- --------------------------------------------------------

--
-- Table structure for table `activities`
--

CREATE TABLE `activities` (
  `id` int(10) UNSIGNED NOT NULL,
  `subject_id` int(10) UNSIGNED NOT NULL,
  `subject_type` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `team_id` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `activities`
--

INSERT INTO `activities` (`id`, `subject_id`, `subject_type`, `name`, `user_id`, `team_id`, `created_at`, `updated_at`) VALUES
(1, 7, 'App\\Models\\Space', 'created_space', 3, 2, '2019-08-28 12:45:35', '2019-08-28 12:45:35'),
(2, 2, 'App\\Models\\Wiki', 'created_wiki', 3, 2, '2019-08-28 12:46:37', '2019-08-28 12:46:37'),
(3, 3, 'App\\Models\\Wiki', 'created_wiki', 3, 2, '2019-08-28 12:47:00', '2019-08-28 12:47:00'),
(4, 8, 'App\\Models\\Space', 'created_space', 4, 3, '2019-08-31 10:16:27', '2019-08-31 10:16:27'),
(5, 4, 'App\\Models\\Wiki', 'created_wiki', 4, 3, '2019-08-31 10:17:24', '2019-08-31 10:17:24'),
(6, 9, 'App\\Models\\Space', 'created_space', 29, 24, '2019-10-13 22:22:24', '2019-10-13 22:22:24'),
(7, 5, 'App\\Models\\Wiki', 'created_wiki', 29, 24, '2019-10-13 22:23:39', '2019-10-13 22:23:39'),
(8, 10, 'App\\Models\\Space', 'created_space', 30, 25, '2019-10-13 23:23:24', '2019-10-13 23:23:24'),
(9, 11, 'App\\Models\\Space', 'created_space', 30, 25, '2019-10-13 23:28:34', '2019-10-13 23:28:34'),
(10, 12, 'App\\Models\\Space', 'created_space', 30, 25, '2019-10-13 23:30:27', '2019-10-13 23:30:27'),
(11, 13, 'App\\Models\\Space', 'created_space', 59, 47, '2019-10-22 17:47:37', '2019-10-22 17:47:37'),
(12, 14, 'App\\Models\\Space', 'created_space', 54, 44, '2019-10-22 18:27:23', '2019-10-22 18:27:23'),
(13, 15, 'App\\Models\\Space', 'created_space', 61, 48, '2019-10-22 23:39:46', '2019-10-22 23:39:46'),
(14, 6, 'App\\Models\\Wiki', 'created_wiki', 61, 48, '2019-10-22 23:44:12', '2019-10-22 23:44:12'),
(15, 7, 'App\\Models\\Wiki', 'created_wiki', 61, 48, '2019-10-23 00:06:51', '2019-10-23 00:06:51'),
(16, 23, 'App\\Models\\Page', 'created_page', 61, 48, '2019-10-23 00:10:01', '2019-10-23 00:10:01');

-- --------------------------------------------------------

--
-- Table structure for table `comments`
--

CREATE TABLE `comments` (
  `id` int(10) UNSIGNED NOT NULL,
  `content` longtext COLLATE utf8_unicode_ci NOT NULL,
  `subject_type` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `subject_id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `integration`
--

CREATE TABLE `integration` (
  `id` int(10) UNSIGNED NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `url` longtext COLLATE utf8_unicode_ci NOT NULL,
  `team_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `integration_actions`
--

CREATE TABLE `integration_actions` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `integration_actions`
--

INSERT INTO `integration_actions` (`id`, `name`, `created_at`, `updated_at`) VALUES
(1, 'wiki_created', '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(2, 'wiki_updated', '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(3, 'wiki_deleted', '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(4, 'page_created', '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(5, 'page_updated', '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(6, 'page_deleted', '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(7, 'comment_created', '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(8, 'comment_updated', '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(9, 'comment_deleted', '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(10, 'join_team', '2019-08-28 12:43:01', '2019-08-28 12:43:01');

-- --------------------------------------------------------

--
-- Table structure for table `invites`
--

CREATE TABLE `invites` (
  `id` int(10) UNSIGNED NOT NULL,
  `code` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `team_id` int(11) NOT NULL,
  `role_id` int(11) NOT NULL,
  `claimed_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `invites`
--

INSERT INTO `invites` (`id`, `code`, `email`, `team_id`, `role_id`, `claimed_at`, `created_at`, `updated_at`) VALUES
(1, 'qTWvqUylrUWjoTI2rJ5NqUchqaxhpTW6', 'kecyrila@gmail.com', 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(2, 'qTWvqUylM2udLzg2MzkgDTkhqJWvYaOvrt==', 'tuwoxisyz@yahoo.com', 1, 1, NULL, '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(3, 'qTWvqUylMTkxqxO0rz52rF5jLab=', 'qyqi@gmail.com', 1, 1, NULL, '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(4, 'qTWvqUylrzkupaAfpUMkLxOfoaIvLv5jLab=', 'mynefycido@yahoo.com', 1, 1, NULL, '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(5, 'qTWvqUylMT5zpzSlnaW1DUIvM3chqaxhpTW6', 'qaseneweh@hotmail.com', 1, 1, NULL, '2019-08-28 12:42:59', '2019-08-28 12:42:59');

-- --------------------------------------------------------

--
-- Table structure for table `likes`
--

CREATE TABLE `likes` (
  `id` int(10) UNSIGNED NOT NULL,
  `subject_type` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `subject_id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `likes`
--

INSERT INTO `likes` (`id`, `subject_type`, `subject_id`, `user_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'App\\Models\\Wiki', 3, 3, NULL, '2019-08-31 06:47:58', '2019-08-31 06:47:58');

-- --------------------------------------------------------

--
-- Table structure for table `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(1, '2014_02_10_145728_notification_categories', 1),
(2, '2014_08_01_210813_create_notification_groups_table', 1),
(3, '2014_08_01_211045_create_notification_category_notification_group_table', 1),
(4, '2015_05_05_212549_create_notifications_table', 1),
(5, '2015_06_06_211555_add_expire_time_column_to_notification_table', 1),
(6, '2015_06_06_211555_change_type_to_extra_in_notifications_table', 1),
(7, '2015_06_07_211555_alter_category_name_to_unique', 1),
(8, '2016_04_19_200827_make_notification_url_nullable', 1),
(9, '2016_05_19_144531_add_stack_id_to_notifications', 1),
(10, '2016_07_01_153156_update_version4_notifications_table', 1),
(11, '2016_10_01_105859_create_users_table', 1),
(12, '2016_10_01_110001_create_teams_table', 1),
(13, '2016_10_01_110021_create_user_teams_table', 1),
(14, '2016_10_01_110041_create_wiki_table', 1),
(15, '2016_10_01_110058_create_page_table', 1),
(16, '2016_11_02_193415_drop_version4_unused_tables', 1),
(17, '2017_01_01_074214_create_space_table', 1),
(18, '2017_02_01_160356_create_activities_table', 1),
(19, '2017_02_23_123807_create_comments_table', 1),
(20, '2017_02_23_135458_create_likes_table', 1),
(21, '2017_03_04_050409_create_roles_table', 1),
(22, '2017_03_04_050434_create_user_roles_table', 1),
(23, '2017_03_05_105704_create_permissions_table', 1),
(24, '2017_03_05_105750_create_role_permissions_table', 1),
(25, '2017_03_09_080733_create_integration_table', 1),
(26, '2017_03_09_080752_create_integration_actions_table', 1),
(27, '2017_03_09_080809_create_team_integration_actions_table', 1),
(28, '2017_03_15_073933_create_invites_table', 1),
(29, '2017_03_19_040603_create_tags_table', 1),
(30, '2017_03_19_040811_create_page_tags_table', 1),
(31, '2017_03_23_140239_create_watch_wiki_table', 1),
(32, '2017_03_24_142917_create_read_list_table', 1),
(33, '2017_04_11_022238_create_password_resets_table', 1);

-- --------------------------------------------------------

--
-- Table structure for table `notifications`
--

CREATE TABLE `notifications` (
  `id` int(10) UNSIGNED NOT NULL,
  `from_id` bigint(20) UNSIGNED DEFAULT NULL,
  `from_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `to_id` bigint(20) UNSIGNED NOT NULL,
  `to_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `category_id` int(10) UNSIGNED NOT NULL,
  `url` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `extra` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `read` tinyint(4) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `expires_at` datetime DEFAULT NULL,
  `stack_id` int(10) UNSIGNED DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `notification_categories`
--

CREATE TABLE `notification_categories` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `text` varchar(255) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `notification_categories`
--

INSERT INTO `notification_categories` (`id`, `name`, `text`) VALUES
(1, 'wiki.updated', '{extra.username} updated wiki {extra.wiki_name}.'),
(2, 'wiki.deleted', '{extra.username} deleted wiki {extra.wiki_name}.'),
(3, 'page.created', '{extra.username} created page {extra.page_name} at wiki {extra.wiki_name}.'),
(4, 'page.updated', '{extra.username} updated page {extra.page_name} at wiki {extra.wiki_name}.'),
(5, 'page.deleted', '{extra.username} deleted page {extra.page_name} at wiki {extra.wiki_name}.'),
(6, 'wiki.user.mentioned', '{extra.username} mentioned you in a comment at wiki {extra.wiki_name}.'),
(7, 'page.user.mentioned', '{extra.username} mentioned you in a comment in page {extra.page_name} at wiki {extra.wiki_name}.');

-- --------------------------------------------------------

--
-- Table structure for table `page`
--

CREATE TABLE `page` (
  `id` int(10) UNSIGNED NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `position` int(11) DEFAULT NULL,
  `lft` int(11) DEFAULT NULL,
  `rgt` int(11) DEFAULT NULL,
  `depth` int(11) DEFAULT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `outline` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` longtext COLLATE utf8_unicode_ci,
  `user_id` int(10) UNSIGNED NOT NULL,
  `wiki_id` int(10) UNSIGNED NOT NULL,
  `team_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `page`
--

INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 2, 0, 2, 3, 1, 'Installation', 'installation', 'Non eaque magna reprehenderit quis nesciunt sit ', '<h2>Installation</h2>\r\n\r\n<hr />\r\n<p>Are you a visual learner? Laracasts provides a <a href=\"https://laracasts.com/series/laravel-from-scratch-2017\">free, thorough introduction to Laravel</a> for newcomers to the framework. It&#39;s a great place to start your journey.</p>\r\n\r\n<h3>Server Requirements</h3>\r\n\r\n<hr />\r\n<p>The Laravel framework has a few system requirements. Of course, all of these requirements are satisfied by the <a href=\"/docs/{{version}}/homestead\">Laravel Homestead</a> virtual machine, so it&#39;s highly recommended that you use Homestead as your local Laravel development environment. However, if you are not using Homestead, you will need to make sure your server meets the following requirements:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">PHP &gt;= 5.6.4\r\nOpenSSL PHP Extension\r\nPDO PHP Extension\r\nMbstring PHP Extension\r\nTokenizer PHP Extension\r\nXML PHP Extension\r\n</code></pre>\r\n\r\n<h3>Installing Laravel</h3>\r\n\r\n<hr />\r\n<p>Laravel utilizes <a href=\"https://getcomposer.org\">Composer</a> to manage its dependencies. So, before using Laravel, make sure you have Composer installed on your machine.</p>\r\n\r\n<h4>Via Laravel Installer</h4>\r\n\r\n<hr />\r\n<p>First, download the Laravel installer using Composer:</p>\r\n\r\n<pre>\r\n<code>composer global require \"laravel/installer\"\r\n</code></pre>\r\n\r\n<p>Make sure to place the <code>$HOME/.composer/vendor/bin</code> directory (or the equivalent directory for your OS) in your $PATH so the <code>laravel</code> executable can be located by your system.</p>\r\n\r\n<p>Once installed, the <code>laravel new</code> command will create a fresh Laravel installation in the directory you specify. For instance, <code>laravel new blog</code> will create a directory named <code>blog</code> containing a fresh Laravel installation with all of Laravel&#39;s dependencies already installed:</p>\r\n\r\n<pre>\r\n<code>laravel new blog\r\n</code></pre>\r\n\r\n<h4>Via Composer Create-Project</h4>\r\n\r\n<hr />\r\n<p>Alternatively, you may also install Laravel by issuing the Composer <code>create-project</code> command in your terminal:</p>\r\n\r\n<pre>\r\n<code>composer create-project --prefer-dist laravel/laravel blog\r\n</code></pre>\r\n\r\n<h4>Local Development Server</h4>\r\n\r\n<hr />\r\n<p>If you have PHP installed locally and you would like to use PHP&#39;s built-in development server to serve your application, you may use the <code>serve</code> Artisan command. This command will start a development server at <code>http://localhost:8000</code>:</p>\r\n\r\n<pre>\r\n<code>php artisan serve\r\n</code></pre>\r\n\r\n<p>Of course, more robust local development options are available via <a href=\"/docs/{{version}}/homestead\">Homestead</a> and <a href=\"/docs/{{version}}/valet\">Valet</a>.</p>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(2, NULL, 0, 1, 6, 0, 'Setup', 'setup', 'Sed molestias quae nisi sint enim consequatur veritatis dolorem earum dolores voluptatibus sit sapiente vitae rerum', '<h2>Setup</h2>\r\n\r\n<ul>\r\n	<li><a href=\"http://opus.dev/teams/google/spaces/calista-yang/wikis/laravel/pages/installation\">Installation</a></li>\r\n	<li><a href=\"http://opus.dev/teams/google/spaces/calista-yang/wikis/laravel/pages/homestead\">Homestead</a></li>\r\n</ul>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(3, 2, 1, 4, 5, 1, 'Homestead', 'homestead', 'Sed explicabo Voluptate veniam commodo earum nisi aut quidem quasi a quis dolore consequatur veniam', '<h2>Introduction</h2>\r\n\r\n<hr />\r\n<p>Laravel strives to make the entire PHP development experience delightful, including your local development environment. <a href=\"http://vagrantup.com\">Vagrant</a> provides a simple, elegant way to manage and provision Virtual Machines.</p>\r\n\r\n<p>Laravel Homestead is an official, pre-packaged Vagrant &quot;box&quot; that provides you a wonderful development environment without requiring you to install PHP, HHVM, a web server, and any other server software on your local machine. No more worrying about messing up your operating system! Vagrant boxes are completely disposable. If something goes wrong, you can destroy and re-create the box in minutes!</p>\r\n\r\n<p>Homestead runs on any Windows, Mac, or Linux system, and includes the Nginx web server, PHP 5.6, MySQL, Postgres, Redis, Memcached, Node, and all of the other goodies you need to develop amazing Laravel applications.</p>\r\n\r\n<p><strong>Note:</strong> If you are using Windows, you may need to enable hardware virtualization (VT-x). It can usually be enabled via your BIOS.</p>\r\n\r\n<p>Homestead is currently built and tested using Vagrant 1.7.</p>\r\n\r\n<h3>Included Software</h3>\r\n\r\n<ul>\r\n	<li>Ubuntu 14.04</li>\r\n	<li>PHP 5.6</li>\r\n	<li>HHVM</li>\r\n	<li>Nginx</li>\r\n	<li>MySQL</li>\r\n	<li>Postgres</li>\r\n	<li>Node (With PM2, Bower, Grunt, and Gulp)</li>\r\n	<li>Redis</li>\r\n	<li>Memcached</li>\r\n	<li>Beanstalkd</li>\r\n	<li>Laravel Envoy</li>\r\n	<li>Blackfire Profiler</li>\r\n</ul>\r\n\r\n<h2>Installation &amp; Setup</h2>\r\n\r\n<hr />\r\n<h3>First Steps</h3>\r\n\r\n<p>Before launching your Homestead environment, you must install <a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a> or <a href=\"http://www.vmware.com\">VMWare</a> as well as <a href=\"http://www.vagrantup.com/downloads.html\">Vagrant</a>. All of these software packages provide easy-to-use visual installers for all popular operating systems.</p>\r\n\r\n<p>To use the VMware provider, you will need to purchase both VMware Fusion / Desktop and the <a href=\"http://www.vagrantup.com/vmware\">VMware Vagrant plug-in</a>. VMware provides much faster shared folder performance out of the box.</p>\r\n\r\n<h4>Installing The Homestead Vagrant Box</h4>\r\n\r\n<p>Once VirtualBox / VMware and Vagrant have been installed, you should add the <code class=\"language-php\">laravel/homestead</code> box to your Vagrant installation using the following command in your terminal. It will take a few minutes to download the box, depending on your Internet connection speed:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">vagrant box add laravel<span class=\"token operator\">/</span>homestead</code></pre>\r\n<p>If this command fails, you may have an old version of Vagrant that requires the full URL:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">vagrant box add laravel<span class=\"token operator\">/</span>homestead https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>atlas<span class=\"token punctuation\">.</span>hashicorp<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>laravel<span class=\"token operator\">/</span>boxes<span class=\"token operator\">/</span>homestead</code></pre>\r\n<h4>Cloning The Homestead Repository</h4>\r\n<p>You may install Homestead by simply cloning the repository. Consider cloning the repository into a <code class=\" language-php\">Homestead</code> folder within your \"home\" directory, as the Homestead box will serve as the host to all of your Laravel projects:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">git clone https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>laravel<span class=\"token operator\">/</span>homestead<span class=\"token punctuation\">.</span>git Homestead</code></pre>\r\n<p>Once you have cloned the Homestead repository, run the <code class=\" language-php\">bash init<span class=\"token punctuation\">.</span>sh</code> command from the Homestead directory to create the <code class=\" language-php\">Homestead<span class=\"token punctuation\">.</span>yaml</code> configuration file. The <code class=\" language-php\">Homestead<span class=\"token punctuation\">.</span>yaml</code> file will be placed in your <code class=\" language-php\"><span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>homestead</code> directory:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">bash init<span class=\"token punctuation\">.</span>sh</code></pre>', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(4, NULL, 2, 7, 14, 0, 'The Basics', 'the_basics', 'Aut aut dolore omnis vel vel veniam tempore autem omnis aliquam iusto debitis', '<h2>The Basics</h2>\r\n<ul>\r\n<li>Routing</li>\r\n<li>Middleware</li>\r\n<li>Controllers</li>\r\n<li>Requests</li>\r\n<li>Responses</li>\r\n<li>Views</li>\r\n<li>Blade Templates</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(5, 4, 0, 8, 9, 1, 'Routing', 'routing', 'Consequatur Ea quis voluptas minim illum voluptas aliqua', '<h2>Basic Routing</h2>\r\n\r\n<hr />\r\n<p>You will define most of the routes for your application in the <code class=\"language-php\">app/Http/routes.php</code> file, which is loaded by the <code class=\"language-php\">App\\Providers\\RouteServiceProvider</code> class. The most basic Laravel routes simply accept a URI and a <code class=\"language-php\">Closure</code>:</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::get(\'/\', function () {\r\n    return \'Hello World\';\r\n});\r\n\r\nRoute::post(\'foo/bar\', function () {\r\n    return \'Hello World\';\r\n});\r\n\r\nRoute::put(\'foo/bar\', function () {\r\n    //\r\n});\r\n\r\nRoute::delete(\'foo/bar\', function () {\r\n    //\r\n});</code></pre>\r\n\r\n<h4>Registering A Route For Multiple Verbs</h4>\r\n\r\n<p>Sometimes you may need to register a route that responds to multiple HTTP verbs. You may do so using the <code class=\"language-php\">match</code> method on the <code class=\"language-php\">Route</code> <a href=\"facades.html\">facade</a>:</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::match([\'get\', \'post\'], \'/\', function () {\r\n    return \'Hello World\';\r\n});</code></pre>\r\n\r\n<p>Or, you may even register a route that responds to all HTTP verbs using the <code class=\"language-php\">any</code> method:</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::any(\'foo\', function () {\r\n    return \'Hello World\';\r\n});</code></pre>\r\n\r\n<h4>Generating URLs To Routes</h4>\r\n\r\n<p>You may generate URLs to your application&#39;s routes using the <code class=\"language-php\">url</code> helper:</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$url = url(\'foo\');</code></pre>\r\n<h2>Route Parameters</h2>\r\n\r\n<hr />\r\n<h3>Required Parameters</h3>\r\n\r\n<p>Of course, sometimes you will need to capture segments of the URI within your route. For example, you may need to capture a user&#39;s ID from the URL. You may do so by defining route parameters:</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::get(\'user/{id}\', function ($id) {\r\n    return \'User \'.$id;\r\n});</code></pre>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(6, 4, 2, 10, 11, 1, 'Middleware', 'middleware', 'Ad libero architecto rerum ut eum deserunt reiciendis est nulla optio necessitatibus similique', '<h2>Introduction</h2>\r\n<hr/>\r\n<p>HTTP middleware provide a convenient mechanism for filtering HTTP requests entering your application. For example, Laravel includes a middleware that verifies the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to the login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application.</p>\r\n<p>Of course, additional middleware can be written to perform a variety of tasks besides authentication. A CORS middleware might be responsible for adding the proper headers to all responses leaving your application. A logging middleware might log all incoming requests to your application.</p>\r\n<p>There are several middleware included in the Laravel framework, including middleware for maintenance, authentication, CSRF protection, and more. All of these middleware are located in the <code class=\" language-php\">app<span class=\"token operator\">/</span>Http<span class=\"token operator\">/</span>Middleware</code> directory.</p>\r\n<p><a name=\"defining-middleware\"></a></p>\r\n<h2>Defining Middleware</h2>\r\n<hr/>\r\n<p>To create a new middleware, use the <code class=\" language-php\">make<span class=\"token punctuation\">:</span>middleware</code> Artisan command:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>middleware OldMiddleware</code></pre>\r\n<p>This command will place a new <code class=\" language-php\">OldMiddleware</code> class within your <code class=\" language-php\">app<span class=\"token operator\">/</span>Http<span class=\"token operator\">/</span>Middleware</code> directory. In this middleware, we will only allow access to the route if the supplied <code class=\" language-php\">age</code> is greater than 200. Otherwise, we will redirect the users back to the \"home\" URI.</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OldMiddleware</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Run the request filter.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Closure  $next\r\n     * @return mixed\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'age\'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token function\">redirect<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'home\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>As you can see, if the given <code class=\" language-php\">age</code> is less than <code class=\" language-php\"><span class=\"token number\">200</span></code>, the middleware will return an HTTP redirect to the client; otherwise, the request will be passed further into the application. To pass the request deeper into the application (allowing the middleware to \"pass\"), simply call the <code class=\" language-php\"><span class=\"token variable\">$next</span></code> callback with the <code class=\" language-php\"><span class=\"token variable\">$request</span></code>.</p>\r\n<p>It\'s best to envision middleware as a series of \"layers\" HTTP requests must pass through before they hit your application. Each layer can examine the request and even reject it entirely.</p>\r\n<h3><em>Before</em> / <em>After</em> Middleware</h3>\r\n<p>Whether a middleware runs before or after a request depends on the middleware itself. For example, the following middleware would perform some task <strong>before</strong> the request is handled by the application:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BeforeMiddleware</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n       <span class=\"token comment\" spellcheck=\"true\"> // Perform action\r\n</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(7, 4, 5, 12, 13, 1, 'Controllers', 'controllers', 'Ut do magnam iure duis sit aliquid quisquam nulla non error omnis assumenda tempora et ut voluptatum provident cumque velit', '<h2>Introduction</h2>\r\n<hr/>\r\n<p>Instead of defining all of your request handling logic in a single <code class=\" language-php\">routes<span class=\"token punctuation\">.</span>php</code> file, you may wish to organize this behavior using Controller classes. Controllers can group related HTTP request handling logic into a class. Controllers are typically stored in the <code class=\" language-php\">app<span class=\"token operator\">/</span>Http<span class=\"token operator\">/</span>Controllers</code> directory.</p>\r\n<p><a name=\"basic-controllers\"></a></p>\r\n<h2><a href=\"#basic-controllers\">Basic Controllers</a></h2>\r\n<hr/>\r\n<p>Here is an example of a basic controller class. All Laravel controllers should extend the base controller class included with the default Laravel installation:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Show the profile for the given user.\r\n     *\r\n     * @param  int  $id\r\n     * @return Response\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">showProfile<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'user.profile\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'user\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token scope\">User<span class=\"token punctuation\">::</span></span><span class=\"token function\">findOrFail<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>We can route to the controller action like so:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'user/{id}\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'UserController@showProfile\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Now, when a request matches the specified route URI, the <code class=\" language-php\">showProfile</code> method on the <code class=\" language-php\">UserController</code> class will be executed. Of course, the route parameters will also be passed to the method.</p>\r\n<h4>Controllers &amp; Namespaces</h4>\r\n<p>It is very important to note that we did not need to specify the full controller namespace when defining the controller route. We only defined the portion of the class name that comes after the <code class=\" language-php\">App\\<span class=\"token package\">Http<span class=\"token punctuation\">\\</span>Controllers</span></code> namespace \"root\". By default, the <code class=\" language-php\">RouteServiceProvider</code> will load the <code class=\" language-php\">routes<span class=\"token punctuation\">.</span>php</code> file within a route group containing the root controller namespace.</p>\r\n<p>If you choose to nest or organize your controllers using PHP namespaces deeper into the <code class=\" language-php\">App\\<span class=\"token package\">Http<span class=\"token punctuation\">\\</span>Controllers</span></code> directory, simply use the specific class name relative to the <code class=\" language-php\">App\\<span class=\"token package\">Http<span class=\"token punctuation\">\\</span>Controllers</span></code> root namespace. So, if your full controller class is <code class=\" language-php\">App\\<span class=\"token package\">Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Photos<span class=\"token punctuation\">\\</span>AdminController</span></code>, you would register a route like so:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'foo\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'Photos\\AdminController@method\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(8, NULL, 6, 15, 20, 0, 'Architecture Foundations', 'architecture_foundations', 'Sit saepe commodo sed atque consequatur aut cum anim', '<h2>Architecture Foundations</h2>\r\n<ul>\r\n<li>Request Lifecycle</li>\r\n<li>Application Structure</li>\r\n<li>Service Providers</li>\r\n<li>Service Container</li>\r\n<li>Contracts</li>\r\n<li>Facades</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(9, 8, 0, 16, 17, 1, 'Request Lifecycle', 'request_lifecycle', 'Sit sed molestiae sed dicta optio recusandae Assumenda error sit sunt eum', '<h2>Introduction</h2>\r\n\r\n<hr />\r\n<p>When using any tool in the &quot;real world&quot;, you feel more confident if you understand how that tool works. Application development is no different. When you understand how your development tools function, you feel more comfortable and confident using them.</p>\r\n\r\n<p>The goal of this document is to give you a good, high-level overview of how the Laravel framework &quot;works&quot;. By getting to know the overall framework better, everything feels less &quot;magical&quot; and you will be more confident building your applications.</p>\r\n\r\n<p>If you don&#39;t understand all of the terms right away, don&#39;t lose heart! Just try to get a basic grasp of what is going on, and your knowledge will grow as you explore other sections of the documentation.</p>\r\n\r\n<h2>Lifecycle Overview</h2>\r\n\r\n<hr />\r\n<h3>First Things</h3>\r\n\r\n<p>The entry point for all requests to a Laravel application is the <code class=\"language-php\">public/index.php</code> file. All requests are directed to this file by your web server (Apache / Nginx) configuration. The <code class=\"language-php\">index.php</code> file doesn&#39;t contain much code. Rather, it is simply a starting point for loading the rest of the framework.</p>\r\n\r\n<p>The <code class=\"language-php\">index.php</code> file loads the Composer generated autoloader definition, and then retrieves an instance of the Laravel application from <code class=\"language-php\">bootstrap/app.php</code> script. The first action taken by Laravel itself is to create an instance of the application / <a href=\"container.html\">service container</a>.</p>\r\n\r\n<h3>HTTP / Console Kernels</h3>\r\n\r\n<p>Next, the incoming request is sent to either the HTTP kernel or the console kernel, depending on the type of request that is entering the application. These two kernels serve as the central location that all requests flow through. For now, let&#39;s just focus on the HTTP kernel, which is located in <code class=\"language-php\">app/Http/Kernel.php</code>.</p>\r\n\r\n<p>The HTTP kernel extends the <code class=\"language-php\">Illuminate\\Foundation\\Http\\Kernel</code> class, which defines an array of <code class=\"language-php\">bootstrappers</code> that will be run before the request is executed. These bootstrappers configure error handling, configure logging, <a href=\"installation.html#environment-configuration\">detect the application environment</a>, and perform other tasks that need to be done before the request is actually handled.</p>\r\n\r\n<p>The HTTP kernel also defines a list of HTTP <a href=\"middleware.html\">middleware</a> that all requests must pass through before being handled by the application. These middleware handle reading and writing the <a href=\"session.html\">HTTP session</a>, determine if the application is in maintenance mode, <a href=\"routing.html#csrf-protection\">verifying the CSRF token</a>, and more.</p>\r\n\r\n<p>The method signature for the HTTP kernel&#39;s <code class=\"language-php\">handle</code> method is quite simple: receive a <code class=\"language-php\">Request</code> and return a <code class=\"language-php\">Response</code>. Think of the Kernel as being a big black box that represents your entire application. Feed it HTTP requests and it will return HTTP responses.</p>\r\n\r\n<h4>Service Providers</h4>\r\n\r\n<p>One of the most important Kernel bootstrapping actions is loading the <a href=\"providers.html\">service providers</a> for your application. All of the service providers for the application are configured in the <code class=\"language-php\">config/app.php</code> configuration file&#39;s <code class=\"language-php\">providers</code> array. First, the <code class=\"language-php\">register</code> method will be called on all providers, then, once all providers have been registered, the <code class=\"language-php\">boot</code> method will be called.</p>\r\n\r\n<p>Service providers are responsible for bootstrapping all of the framework&#39;s various components, such as the database, queue, validation, and routing components. Since they bootstrap and configure every feature offered by the framework, service providers are the most important aspect of the entire Laravel bootstrap process.</p>\r\n\r\n<h4>Dispatch Request</h4>\r\n\r\n<p>Once the application has been bootstrapped and all service providers have been registered, the <code class=\"language-php\">Request</code> will be handed off to the router for dispatching. The router will dispatch the request to a route or controller, as well as run any route specific middleware.</p>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(10, 8, 1, 18, 19, 1, 'Service Container', 'service_container', 'Ipsum suscipit sit quis dolore ut accusantium consectetur corporis doloremque nesciunt omnis eum molestiae cumque repellendus', '<h2>Introduction</h2>\r\n<hr/>\r\n<p>The Laravel service container is a powerful tool for managing class dependencies and performing dependency injection. Dependency injection is a fancy phrase that essentially means this: class dependencies are \"injected\" into the class via the constructor or, in some cases, \"setter\" methods.</p>\r\n<p>Let\'s look at a simple example:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Jobs</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Mail<span class=\"token punctuation\">\\</span>Mailer</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Bus<span class=\"token punctuation\">\\</span>SelfHandling</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PurchasePodcast</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SelfHandling</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * The mailer implementation.\r\n     */</span>\r\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$mailer</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Create a new instance.\r\n     *\r\n     * @param  Mailer  $mailer\r\n     * @return void\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct<span class=\"token punctuation\">(</span></span>Mailer <span class=\"token variable\">$mailer</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">mailer</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$mailer</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Purchase a podcast.\r\n     *\r\n     * @return void\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n       <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span>    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>In this example, the <code class=\" language-php\">PurchasePodcast</code> job needs to send e-mails when a podcast is purchased. So, we will <strong>inject</strong> a service that is able to send e-mails. Since the service is injected, we are able to easily swap it out with another implementation. We are also able to easily \"mock\", or create a dummy implementation of the mailer when testing our application.</p>\r\n<p>A deep understanding of the Laravel service container is essential to building a powerful, large application, as well as for contributing to the Laravel core itself.</p>\r\n<p><a name=\"binding\"></a></p>\r\n<h2>Binding</h2>\r\n<hr/>\r\n<p>Almost all of your service container bindings will be registered within <a href=\"providers.html\">service providers</a>, so all of these examples will demonstrate using the container in that context. However, there is no need to bind classes into the container if they do not depend on any interfaces. The container does not need to be instructed how to build these objects, since it can automatically resolve such \"concrete\" objects using PHP\'s reflection services.</p>\r\n<p>Within a service provider, you always have access to the container via the <code class=\" language-php\"><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span></code> instance variable. We can register a binding using the <code class=\" language-php\">bind</code> method, passing the class or interface name that we wish to register along with a <code class=\" language-php\">Closure</code> that returns an instance of the class:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">bind<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'HelpSpot\\API\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelpSpot<span class=\"token punctuation\">\\</span>API</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">[</span><span class=\"token string\">\'HttpClient\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(11, NULL, 7, 21, 26, 0, 'Services', 'services', 'Odit totam deserunt earum laborum consequatur Ipsum', '<h2>Services</h2>\r\n<ul>\r\n<li><a href=\"authentication.html\">Authentication</a></li>\r\n<li><a href=\"artisan.html\">Artisan Console</a></li>\r\n<li><a href=\"billing.html\">Billing</a></li>\r\n<li><a href=\"cache.html\">Cache</a></li>\r\n<li><a href=\"collections.html\">Collections</a></li>\r\n<li><a href=\"elixir.html\">Elixir</a></li>\r\n<li><a href=\"encryption.html\">Encryption</a></li>\r\n<li><a href=\"errors.html\">Errors &amp; Logging</a></li>\r\n<li><a href=\"events.html\">Events</a></li>\r\n<li><a href=\"filesystem.html\">Filesystem / Cloud Storage</a></li>\r\n<li><a href=\"hashing.html\">Hashing</a></li>\r\n<li><a href=\"helpers.html\">Helpers</a></li>\r\n<li><a href=\"localization.html\">Localization</a></li>\r\n<li><a href=\"mail.html\">Mail</a></li>\r\n<li><a href=\"packages.html\">Package Development</a></li>\r\n<li><a href=\"pagination.html\">Pagination</a></li>\r\n<li><a href=\"queues.html\">Queues</a></li>\r\n<li><a href=\"redis.html\">Redis</a></li>\r\n<li><a href=\"session.html\">Session</a></li>\r\n<li><a href=\"envoy.html\">SSH Tasks</a></li>\r\n<li><a href=\"scheduling.html\">Task Scheduling</a></li>\r\n<li><a href=\"testing.html\">Testing</a></li>\r\n<li><a href=\"validation.html\">Validation</a></li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(12, 11, 0, 22, 23, 1, 'Authentication', 'authentication', 'Velit unde placeat harum magnam distinctio Laudantium sunt non non', '<h2>Introduction</h2>\r\n<p>Laravel makes implementing authentication very simple. In fact, almost everything is configured for you out of the box. The authentication configuration file is located at <code class=\" language-php\">config<span class=\"token operator\">/</span>auth<span class=\"token punctuation\">.</span>php</code>, which contains several well documented options for tweaking the behavior of the authentication services.</p>\r\n<h3>Database Considerations</h3>\r\n<p>By default, Laravel includes an <code class=\" language-php\">App\\<span class=\"token package\">User</span></code> <a href=\"eloquent.html\">Eloquent model</a> in your <code class=\" language-php\">app</code> directory. This model may be used with the default Eloquent authentication driver. If your application is not using Eloquent, you may use the <code class=\" language-php\">database</code> authentication driver which uses the Laravel query builder.</p>\r\n<p>When building the database schema for the <code class=\" language-php\">App\\<span class=\"token package\">User</span></code> model, make sure the password column is at least 60 characters in length.</p>\r\n<p>Also, you should verify that your <code class=\" language-php\">users</code> (or equivalent) table contains a nullable, string <code class=\" language-php\">remember_token</code> column of 100 characters. This column will be used to store a token for \"remember me\" sessions being maintained by your application. This can be done by using <code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">rememberToken<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code> in a migration.</p>\r\n<p><a name=\"authentication-quickstart\"></a></p>\r\n<h2>Authentication Quickstart</h2>\r\n<hr/>\r\n<p>Laravel ships with two authentication controllers out of the box, which are located in the <code class=\" language-php\">App\\<span class=\"token package\">Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Auth</span></code> namespace. The <code class=\" language-php\">AuthController</code> handles new user registration and authentication, while the <code class=\" language-php\">PasswordController</code> contains the logic to help existing users reset their forgotten passwords. Each of these controllers uses a trait to include their necessary methods. For many applications, you will not need to modify these controllers at all.</p>\r\n<h3>Routing</h3>\r\n<p>By default, no <a href=\"routing.html\">routes</a> are included to point requests to the authentication controllers. You may manually add them to your <code class=\" language-php\">app<span class=\"token operator\">/</span>Http<span class=\"token operator\">/</span>routes<span class=\"token punctuation\">.</span>php</code> file:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">// Authentication routes...\r\n</span><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'auth/login\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'Auth\\AuthController@getLogin\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">post<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'auth/login\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'Auth\\AuthController@postLogin\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'auth/logout\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'Auth\\AuthController@getLogout\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\" spellcheck=\"true\">\r\n// Registration routes...\r\n</span><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'auth/register\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'Auth\\AuthController@getRegister\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">post<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'auth/register\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'Auth\\AuthController@postRegister\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>', 1, 1, 1, NULL, '2019-08-28 12:42:57', '2019-08-28 12:42:57'),
(13, 11, 1, 24, 25, 1, 'Introduction', 'introduction', 'Qui sed provident quia ea accusantium iste laudantium non laborum Sint sint mollit nostrum impedit voluptatibus id', '<h2><a href=\"#introduction\">Introduction</a></h2>\r\n<hr/>\r\n<p>Artisan is the name of the command-line interface included with Laravel. It provides a number of helpful commands for your use while developing your application. It is driven by the powerful Symfony Console component. To view a list of all available Artisan commands, you may use the <code class=\" language-php\">list</code> command:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">php artisan list</code></pre>\r\n<p>Every command also includes a \"help\" screen which displays and describes the command\'s available arguments and options. To view a help screen, simply precede the name of the command with <code class=\" language-php\">help</code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">php artisan help migrate</code></pre>\r\n<p><a name=\"writing-commands\"></a></p>\r\n<h2><a href=\"#writing-commands\">Writing Commands</a></h2>\r\n<hr/>\r\n<p>In addition to the commands provided with Artisan, you may also build your own custom commands for working with your application. You may store your custom commands in the <code class=\" language-php\">app<span class=\"token operator\">/</span>Console<span class=\"token operator\">/</span>Commands</code> directory; however, you are free to choose your own storage location as long as your commands can be autoloaded based on your <code class=\" language-php\">composer<span class=\"token punctuation\">.</span>json</code> settings.</p>\r\n<p>To create a new command, you may use the <code class=\" language-php\">make<span class=\"token punctuation\">:</span>console</code> Artisan command, which will generate a command stub to help you get started:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>console SendEmails</code></pre>\r\n<p>The command above would generate a class at <code class=\" language-php\">app<span class=\"token operator\">/</span>Console<span class=\"token operator\">/</span>Commands<span class=\"token operator\">/</span>SendEmails<span class=\"token punctuation\">.</span>php</code>. When creating the command, the <code class=\" language-php\"><span class=\"token operator\">--</span>command</code> option may be used to assign the terminal command name:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>console SendEmails <span class=\"token operator\">--</span>command<span class=\"token operator\">=</span>emails<span class=\"token punctuation\">:</span>send</code></pre>\r\n<p><a name=\"command-structure\"></a></p>\r\n<h3>Command Structure</h3>\r\n<p>Once your command is generated, you should fill out the <code class=\" language-php\">signature</code> and <code class=\" language-php\">description</code> properties of the class, which will be used when displaying your command on the <code class=\" language-php\">list</code> screen.</p>\r\n<p>The <code class=\" language-php\">handle</code> method will be called when your command is executed. You may place any command logic in this method. Let\'s take a look at an example command.</p>\r\n<p>Note that we are able to inject any dependencies we need into the command\'s constructor. The Laravel <a href=\"container.html\">service container</a> will automatically inject all dependencies type-hinted in the constructor. For greater code reusability, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks.</p>', 1, 1, 1, NULL, '2019-08-28 12:42:57', '2019-08-28 12:42:57'),
(14, NULL, 8, 27, 32, 0, 'Database', 'database', 'Iusto dolorem necessitatibus blanditiis voluptas sed non et laboris ut qui culpa', '<h2>Database</h2>\r\n<ul>\r\n<li><a href=\"database.html\">Getting Started</a></li>\r\n<li><a href=\"queries.html\">Query Builder</a></li>\r\n<li><a href=\"migrations.html\">Migrations</a></li>\r\n<li><a href=\"seeding.html\">Seeding</a></li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:57', '2019-08-28 12:42:57');
INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(15, 14, 0, 28, 29, 1, 'Getting Started', 'getting_started', 'Cupiditate a illo dolores obcaecati explicabo Non consequatur ea ipsum nesciunt autem corporis vitae sunt dignissimos sequi est quia placeat', '<h2><a href=\"#introduction\">Introduction</a></h2>\r\n<hr />\r\n<p>Laravel makes connecting with databases and running queries extremely simple across a variety of database back-ends using either raw SQL, the <a href=\"queries.html\">fluent query builder</a>, and the <a href=\"eloquent.html\">Eloquent ORM</a>. Currently, Laravel supports four database systems:</p>\r\n\r\n<ul>\r\n	<li>MySQL</li>\r\n	<li>Postgres</li>\r\n	<li>SQLite</li>\r\n	<li>SQL Server</li>\r\n</ul>\r\n<h3>Configuration</h3>\r\n<p>Laravel makes connecting with databases and running queries extremely simple. The database configuration for your application is located at <code class=\"language-php\">config/database.php</code>. In this file you may define all of your database connections, as well as specify which connection should be used by default. Examples for all of the supported database systems are provided in this file.</p>\r\n<p>By default, Laravel&#39;s sample <a href=\"installation.html#environment-configuration\">environment configuration</a> is ready to use with <a href=\"homestead.html\">Laravel Homestead</a>, which is a convenient virtual machine for doing Laravel development on your local machine. Of course, you are free to modify this configuration as needed for your local database.</p>\r\n<h4>Read / Write Connections</h4>\r\n<p>Sometimes you may wish to use one database connection for SELECT statements, and another for INSERT, UPDATE, and DELETE statements. Laravel makes this a breeze, and the proper connections will always be used whether you are using raw queries, the query builder, or the Eloquent ORM.</p>\r\n<p>To see how read / write connections should be configured, let&#39;s look at this example:</p>\r\n<pre>\r\n<code class=\"language-php\">\'mysql\' =&gt; [\r\n    \'read\' =&gt; [\r\n        \'host\' =&gt; \'192.168.1.1\',\r\n    ],\r\n    \'write\' =&gt; [\r\n        \'host\' =&gt; \'196.168.1.2\'\r\n    ],\r\n    \'driver\'    =&gt; \'mysql\',\r\n    \'database\'  =&gt; \'database\',\r\n    \'username\'  =&gt; \'root\',\r\n    \'password\'  =&gt; \'\',\r\n    \'charset\'   =&gt; \'utf8\',\r\n    \'collation\' =&gt; \'utf8_unicode_ci\',\r\n    \'prefix\'    =&gt; \'\',\r\n],</code></pre>\r\n<p>Note that two keys have been added to the configuration array: <code class=\"language-php\">read</code> and <code class=\"language-php\">write</code>. Both of these keys have array values containing a single key: <code class=\"language-php\">host</code>. The rest of the database options for the <code class=\"language-php\">read</code> and <code class=\"language-php\">write</code> connections will be merged from the main <code class=\"language-php\">mysql</code> array.</p>\r\n<p>So, we only need to place items in the <code class=\"language-php\">read</code> and <code class=\"language-php\">write</code> arrays if we wish to override the values in the main array. So, in this case, <code class=\"language-php\">192.168.1.1</code> will be used as the &quot;read&quot; connection, while <code class=\"language-php\">192.168.1.2</code> will be used as the &quot;write&quot; connection. The database credentials, prefix, character set, and all other options in the main <code class=\"language-php\">mysql</code> array will be shared across both connections.</p>\r\n<h2><a href=\"#running-queries\">Running Raw SQL Queries</a></h2>\r\n<hr />\r\n<p>Once you have configured your database connection, you may run queries using the <code class=\"language-php\">DB</code> facade. The <code class=\"language-php\">DB</code> facade provides methods for each type of query: <code class=\"language-php\">select</code>, <code class=\"language-php\">update</code>, <code class=\"language-php\">insert</code>, and <code class=\"language-php\">statement</code>.</p>\r\n\r\n<h4>Running A Select Query</h4>\r\n\r\n<p>To run a basic query, we can use the <code class=\"language-php\">select</code> method on the <code class=\"language-php\">DB</code> facade:</p>\r\n\r\n<pre>\r\n<code class=\"language-php\"><!--?php</span--> namespace App\\Http\\Controllers;\r\n\r\nuse DB;\r\nuse App\\Http\\Controllers\\Controller;\r\n\r\nclass UserController extends Controller\r\n{\r\n    /**\r\n     * Show a list of all of the application&#39;s users.\r\n     *\r\n     * @return Response\r\n     */\r\n    public function index()\r\n    {\r\n        $users = DB::select(&#39;select * from users where active = ?&#39;, [1]);\r\n\r\n        return view(&#39;user.index&#39;, [&#39;users&#39; =&gt; $users]);\r\n    }\r\n}</code></pre>\r\n\r\n<p>The first argument passed to the <code class=\"language-php\">select</code> method is the raw SQL query, while the second argument is any parameter bindings that need to be bound to the query. Typically, these are the values of the <code class=\"language-php\">where</code> clause constraints. Parameter binding provides protection against SQL injection.</p>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:57', '2019-08-28 12:42:57');
INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(16, 14, 1, 30, 31, 1, 'Query Builder', 'query_builder', 'Iste illo unde suscipit et reprehenderit facere labore sed voluptatem', '<p><a name=\"introduction\"></a></p>\r\n<h2><a href=\"#introduction\">Introduction</a></h2>\r\n<hr/>\r\n<p>The database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application, and works on all supported database systems.</p>\r\n<blockquote>\r\n<p><strong>Note:</strong> The Laravel query builder uses PDO parameter binding to protect your application against SQL injection attacks. There is no need to clean strings being passed as bindings.</p>\r\n</blockquote>\r\n<p><a name=\"retrieving-results\"></a></p>\r\n<h2><a href=\"#retrieving-results\">Retrieving Results</a></h2>\r\n<hr/>\r\n<h4>Retrieving All Rows From A Table</h4>\r\n<p>To begin a fluent query, use the <code class=\" language-php\">table</code> method on the <code class=\" language-php\"><span class=\"token constant\">DB</span></code> facade. The <code class=\" language-php\">table</code> method returns a fluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally get the results. In this example, let\'s just <code class=\" language-php\">get</code> all records from a table:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">DB</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Show a list of all of the application\'s users.\r\n     *\r\n     * @return Response\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'user.index\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'users\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$users</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Like <a href=\"database.html\">raw queries</a>, the <code class=\" language-php\">get</code> method returns an <code class=\" language-php\"><span class=\"token keyword\">array</span></code> of results where each result is an instance of the PHP <code class=\" language-php\">StdClass</code> object. You may access each column\'s value by accessing the column as a property of the object:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Retrieving A Single Row / Column From A Table</h4>\r\n<p>If you just need to retrieve a single row from the database table, you may use the <code class=\" language-php\">first</code> method. This method will return a single <code class=\" language-php\">StdClass</code> object:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'John\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>If you don\'t even need an entire row, you may extract a single value from a record using the <code class=\" language-php\">value</code> method. This method will return the value of the column directly:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'John\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">value<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'email\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Chunking Results From A Table</h4>\r\n<p>If you need to work with thousands of database records, consider using the <code class=\" language-php\">chunk</code> method. This method retrieves a small \"chunk\" of the results at a time, and feeds each chunk into a <code class=\" language-php\">Closure</code> for processing. This method is very useful for writing <a href=\"artisan.html\">Artisan commands</a> that process thousands of records. For example, let\'s work with the entire <code class=\" language-php\">users</code> table in chunks of 100 records at a time:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunk<span class=\"token punctuation\">(</span></span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n       <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span>    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>You may stop further chunks from being processed by returning <code class=\" language-php\"><span class=\"token boolean\">false</span></code> from the <code class=\" language-php\">Closure</code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunk<span class=\"token punctuation\">(</span></span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> // Process the records...\r\n</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Retrieving A List Of Column Values</h4>\r\n<p>If you would like to retrieve an array contains the values of a single column, you may use the <code class=\" language-php\">lists</code> method. In this example, we\'ll retrieve an array of role titles:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$titles</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'roles\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lists<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'title\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$titles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>You may also specify a custom key column for the returned array:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$roles</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'roles\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lists<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'title\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'name\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$roles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p><a name=\"aggregates\"></a></p>\r\n<h3>Aggregates</h3>\r\n<p>The query builder also provides a variety of aggregate methods, such as <code class=\" language-php\">count</code>, <code class=\" language-php\">max</code>, <code class=\" language-php\">min</code>, <code class=\" language-php\">avg</code>, and <code class=\" language-php\">sum</code>. You may call any of these methods after constructing your query:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">count<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$price</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'orders\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">max<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'price\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Of course, you may combine these methods with other clauses to build your query:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$price</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'orders\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'finalized\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">avg<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'price\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"selects\"></a></p>\r\n<h2><a href=\"#selects\">Selects</a></h2>\r\n<h4>Specifying A Select Clause</h4>\r\n<p>Of course, you may not always want to select all columns from a database table. Using the <code class=\" language-php\">select</code> method, you can specify a custom <code class=\" language-php\">select</code> clause for the query:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'email as user_email\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The <code class=\" language-php\">distinct</code> method allows you to force the query to return distinct results:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">distinct<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>If you already have a query builder instance and you wish to add a column to its existing select clause, you may use the <code class=\" language-php\">addSelect</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">addSelect<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'age\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Raw Expressions</h4>\r\n<p>Sometimes you may need to use a raw expression in a query. These expressions will be injected into the query as strings, so be careful not to create any SQL injection points! To create a raw expression, you may use the <code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span>raw</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select<span class=\"token punctuation\">(</span></span><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">raw<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'count(*) as user_count, status\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'status\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&lt;&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'status\'</span><span class=\"token punctuation\">)</span>\r\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"joins\"></a></p>\r\n<h2><a href=\"#joins\">Joins</a></h2>\r\n<h4>Inner Join Statement</h4>\r\n<p>The query builder may also be used to write join statements. To perform a basic SQL \"inner join\", you may use the <code class=\" language-php\">join</code> method on a query builder instance. The first argument passed to the <code class=\" language-php\">join</code> method is the name of the table you need to join to, while the remaining arguments specify the column constraints for the join. Of course, as you can see, you can join to multiple tables in a single query:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'contacts\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'users.id\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'=\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'contacts.user_id\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'orders\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'users.id\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'=\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'orders.user_id\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users.*\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'contacts.phone\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'orders.price\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Left Join Statement</h4>\r\n<p>If you would like to perform a \"left join\" instead of an \"inner join\", use the <code class=\" language-php\">leftJoin</code> method. The <code class=\" language-php\">leftJoin</code> method has the same signature as the <code class=\" language-php\">join</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">leftJoin<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'posts\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'users.id\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'=\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'posts.user_id\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Advanced Join Statements</h4>\r\n<p>You may also specify more advanced join clauses. To get started, pass a <code class=\" language-php\">Closure</code> as the second argument into the <code class=\" language-php\">join</code> method. The <code class=\" language-php\">Closure</code> will receive a <code class=\" language-php\">JoinClause</code> object which allows you to specify constraints on the <code class=\" language-php\">join</code> clause:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'contacts\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$join</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token variable\">$join</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">on<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users.id\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'=\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'contacts.user_id\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orOn<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>If you would like to use a \"where\" style clause on your joins, you may use the <code class=\" language-php\">where</code> and <code class=\" language-php\">orWhere</code> methods on a join. Instead of comparing two columns, these methods will compare the column against a value:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'contacts\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$join</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token variable\">$join</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">on<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users.id\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'=\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'contacts.user_id\'</span><span class=\"token punctuation\">)</span>\r\n                 <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'contacts.user_id\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"unions\"></a></p>\r\n<h2><a href=\"#unions\">Unions</a></h2>\r\n<p>The query builder also provides a quick way to \"union\" two queries together. For example, you may create an initial query, and then use the <code class=\" language-php\">union</code> method to union it with a second query:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$first</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNull<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'first_name\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNull<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'last_name\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">union<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$first</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The <code class=\" language-php\">unionAll</code> method is also available and has the same method signature as <code class=\" language-php\">union</code>.</p>\r\n<p><a name=\"where-clauses\"></a></p>\r\n<h2><a href=\"#where-clauses\">Where Clauses</a></h2>\r\n<h4>Simple Where Clauses</h4>\r\n<p>To add <code class=\" language-php\">where</code> clauses to the query, use the <code class=\" language-php\">where</code> method on a query builder instance. The most basic call to <code class=\" language-php\">where</code> requires three arguments. The first argument is the name of the column. The second argument is an operator, which can be any of the database\'s supported operators. The third argument is the value to evaluate against the column.</p>\r\n<p>For example, here is a query that verifies the value of the \"votes\" column is equal to 100:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'=\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>For convenience, if you simply want to verify that a column is equal to a given value, you may pass the value directly as the second argument to the <code class=\" language-php\">where</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Of course, you may use a variety of other operators when writing a <code class=\" language-php\">where</code> clause:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;=\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&lt;&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'like\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'T%\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Or Statements</h4>\r\n<p>You may chain where constraints together, as well as add <code class=\" language-php\"><span class=\"token keyword\">or</span></code> clauses to the query. The <code class=\" language-php\">orWhere</code> method accepts the same arguments as the <code class=\" language-php\">where</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orWhere<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'John\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Additional Where Clauses</h4>\r\n<p><strong>whereBetween</strong></p>\r\n<p>The <code class=\" language-php\">whereBetween</code> method verifies that a column\'s value is between two values:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereBetween<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><strong>whereNotBetween</strong></p>\r\n<p>The <code class=\" language-php\">whereNotBetween</code> method verifies that a column\'s value lies outside of two values:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNotBetween<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><strong>whereIn / whereNotIn</strong></p>\r\n<p>The <code class=\" language-php\">whereIn</code> method verifies that a given column\'s value is contained within the given array:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereIn<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'id\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The <code class=\" language-php\">whereNotIn</code> method verifies that the given column\'s value is <strong>not</strong> contained in the given array:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNotIn<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'id\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><strong>whereNull / whereNotNull</strong></p>\r\n<p>The <code class=\" language-php\">whereNull</code> method verifies that the value of the given column is <code class=\" language-php\"><span class=\"token keyword\">NULL</span></code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNull<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'updated_at\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The <code class=\" language-php\">whereNotNull</code> method verifies that the column\'s value is <strong>not</strong> <code class=\" language-php\"><span class=\"token keyword\">NULL</span></code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNotNull<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'updated_at\'</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"advanced-where-clauses\"></a></p>\r\n<h2><a href=\"#advanced-where-clauses\">Advanced Where Clauses</a></h2>\r\n<h4>Parameter Grouping</h4>\r\n<p>Sometimes you may need to create more advanced where clauses such as \"where exists\" or nested parameter groupings. The Laravel query builder can handle these as well. To get started, let\'s look at an example of grouping constraints within parenthesis:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'=\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'John\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orWhere<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n                      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'title\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&lt;&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'Admin\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>As you can see, passing <code class=\" language-php\">Closure</code> into the <code class=\" language-php\">orWhere</code> method instructs the query builder to begin a constraint group. The <code class=\" language-php\">Closure</code> will receive a query builder instance which you can use to set the constraints that should be contained within the parenthesis group. The example above will produce the following SQL:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">select <span class=\"token operator\">*</span> from users where name <span class=\"token operator\">=</span> <span class=\"token string\">\'John\'</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>votes <span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span> <span class=\"token keyword\">and</span> title <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'Admin\'</span><span class=\"token punctuation\">)</span></code></pre>\r\n<h4>Exists Statements</h4>\r\n<p>The <code class=\" language-php\">whereExists</code> method allows you to write <code class=\" language-php\">where exist</code> SQL clauses. The <code class=\" language-php\">whereExists</code> method accepts a <code class=\" language-php\">Closure</code> argument, which will receive a query builder instance allowing you to define the query that should be placed inside of the \"exists\" clause:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereExists<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select<span class=\"token punctuation\">(</span></span><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">raw<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">from<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'orders\'</span><span class=\"token punctuation\">)</span>\r\n                      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereRaw<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'orders.user_id = users.id\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The query above will produce the following SQL:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">select <span class=\"token operator\">*</span> from users\r\nwhere exists <span class=\"token punctuation\">(</span>\r\n    select <span class=\"token number\">1</span> from orders where orders<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span>id\r\n<span class=\"token punctuation\">)</span></code></pre>\r\n<p><a name=\"ordering-grouping-limit-and-offset\"></a></p>\r\n<h2><a href=\"#ordering-grouping-limit-and-offset\">Ordering, Grouping, Limit, &amp; Offset</a></h2>\r\n<h4>orderBy</h4>\r\n<p>The <code class=\" language-php\">orderBy</code> method allows you to sort the result of the query by a given column. The first argument to the <code class=\" language-php\">orderBy</code> method should be the column you wish to sort by, while the second argument controls the direction of the sort and may be either <code class=\" language-php\">asc</code> or <code class=\" language-php\">desc</code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'desc\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>groupBy / having / havingRaw</h4>\r\n<p>The <code class=\" language-php\">groupBy</code> and <code class=\" language-php\">having</code> methods may be used to group the query results. The <code class=\" language-php\">having</code> method\'s signature is similar to that of the <code class=\" language-php\">where</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'account_id\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">having<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'account_id\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The <code class=\" language-php\">havingRaw</code> method may be used to set a raw string as the value of the <code class=\" language-php\">having</code> clause. For example, we can find all of the departments with sales greater than $2,500:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'orders\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'department\'</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">raw<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'SUM(price) as total_sales\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'department\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">havingRaw<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'SUM(price) &gt; 2500\'</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>skip / take</h4>\r\n<p>To limit the number of results returned from the query, or to skip a given number of results in the query (<code class=\" language-php\"><span class=\"token constant\">OFFSET</span></code>), you may use the <code class=\" language-php\">skip</code> and <code class=\" language-php\">take</code> methods:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">skip<span class=\"token punctuation\">(</span></span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">take<span class=\"token punctuation\">(</span></span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"inserts\"></a></p>\r\n<h2><a href=\"#inserts\">Inserts</a></h2>\r\n<p>The query builder also provides an <code class=\" language-php\">insert</code> method for inserting records into the database table. The <code class=\" language-php\">insert</code> method accepts an array of column names and values to insert:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">insert<span class=\"token punctuation\">(</span></span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\'email\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'john@example.com\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'votes\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>You may even insert several records into the table with a single call to <code class=\" language-php\">insert</code> by passing an array of arrays. Each array represents a row to be inserted into the table:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">insert<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\'email\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'taylor@example.com\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'votes\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\'email\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'dayle@example.com\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'votes\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Auto-Incrementing IDs</h4>\r\n<p>If the table has an auto-incrementing id, use the <code class=\" language-php\">insertGetId</code> method to insert a record and then retrieve the ID:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$id</span> <span class=\"token operator\">=</span> <span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">insertGetId<span class=\"token punctuation\">(</span></span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\'email\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'john@example.com\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'votes\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<blockquote>\r\n<p><strong>Note:</strong> When using PostgreSQL the insertGetId method expects the auto-incrementing column to be named <code class=\" language-php\">id</code>. If you would like to retrieve the ID from a different \"sequence\", you may pass the sequence name as the second parameter to the <code class=\" language-php\">insertGetId</code> method.</p>\r\n</blockquote>\r\n<p><a name=\"updates\"></a></p>\r\n<h2><a href=\"#updates\">Updates</a></h2>\r\n<p>Of course, in addition to inserting records into the database, the query builder can also update existing records using the <code class=\" language-php\">update</code> method. The <code class=\" language-php\">update</code> method, like the <code class=\" language-php\">insert</code> method, accepts an array of column and value pairs containing the columns to be updated. You may constrain the <code class=\" language-php\">update</code> query using <code class=\" language-php\">where</code> clauses:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'id\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">\'votes\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Increment / Decrement</h4>\r\n<p>The query builder also provides convenient methods for incrementing or decrementing the value of a given column. This is simply a short-cut, providing a more expressive and terse interface compared to manually writing the <code class=\" language-php\">update</code> statement.</p>\r\n<p>Both of these methods accept at least one argument: the column to modify. An second argument may optionally be passed to control the amount by which the column should be incremented / decremented.</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">increment<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">increment<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">decrement<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">decrement<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>You may also specify additional columns to update during the operation:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">increment<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'name\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'John\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"deletes\"></a></p>\r\n<h2><a href=\"#deletes\">Deletes</a></h2>\r\n<p>Of course, the query builder may also be used to delete records from the table via the <code class=\" language-php\">delete</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delete<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>You may constrain <code class=\" language-php\">delete</code> statements by adding <code class=\" language-php\">where</code> clauses before calling the <code class=\" language-php\">delete</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> \'<span class=\"token markup\">&lt;\', 100)-&gt;</span><span class=\"token function\">delete<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>If you wish to truncate the entire table, which will remove all rows and reset the auto-incrementing ID to zero, you may use the <code class=\" language-php\">truncate</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">truncate<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"pessimistic-locking\"></a></p>\r\n<h2><a href=\"#pessimistic-locking\">Pessimistic Locking</a></h2>\r\n<p>The query builder also includes a few functions to help you do \"pessimistic locking\" on your <code class=\" language-php\">select</code> statements. To run the statement with a \"shared lock\", you may use the <code class=\" language-php\">sharedLock</code> method on a query. A shared lock prevents the selected rows from being modified until your transaction commits:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sharedLock<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Alternatively, you may use the <code class=\" language-php\">lockForUpdate</code> method. A \"for update\" lock prevents the rows from being modified or from being selected with another shared lock:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">DB<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'users\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lockForUpdate<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>', 1, 1, 1, NULL, '2019-08-28 12:42:57', '2019-08-28 12:42:57');
INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(17, NULL, 9, 33, 40, 0, 'Eloquent ORM', 'eloquent_orm', 'Molestiae molestiae atque sit quo enim eveniet magna voluptates', '<h2>Eloquent ORM</h2>\r\n<ul>\r\n<li><a href=\"eloquent.html\">Getting Started</a></li>\r\n<li><a href=\"eloquent-relationships.html\">Relationships</a></li>\r\n<li><a href=\"eloquent-collections.html\">Collections</a></li>\r\n<li><a href=\"eloquent-mutators.html\">Mutators</a></li>\r\n<li><a href=\"eloquent-serialization.html\">Serialization</a></li>\r\n</ul>', 1, 1, 1, NULL, '2019-08-28 12:42:57', '2019-08-28 12:42:57');
INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(18, 17, 0, 28, 29, 1, 'Getting Started', 'getting_started', 'Consectetur dolorem dolor fugiat placeat voluptatibus repudiandae ad', '<p><a name=\"introduction\"></a></p>\r\n<h2><a href=\"#introduction\">Introduction</a></h2>\r\n<hr/>\r\n<p>The Eloquent ORM included with Laravel provides a beautiful, simple ActiveRecord implementation for working with your database. Each database table has a corresponding \"Model\" which is used to interact with that table. Models allow you to query for data in your tables, as well as insert new records into the table.</p>\r\n<p>Before getting started, be sure to configure a database connection in <code class=\" language-php\">config<span class=\"token operator\">/</span>database<span class=\"token punctuation\">.</span>php</code>. For more information on configuring your database, check out <a href=\"database.html#configuration\">the documentation</a>.</p>\r\n<p><a name=\"defining-models\"></a></p>\r\n<h2><a href=\"#defining-models\">Defining Models</a></h2>\r\n<hr/>\r\n<p>To get started, let\'s create an Eloquent model. Models typically live in the <code class=\" language-php\">app</code> directory, but you are free to place them anywhere that can be auto-loaded according to your <code class=\" language-php\">composer<span class=\"token punctuation\">.</span>json</code> file. All Eloquent models extend <code class=\" language-php\">Illuminate\\<span class=\"token package\">Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span></code> class.</p>\r\n<p>The easiest way to create a model instance is using the <code class=\" language-php\">make<span class=\"token punctuation\">:</span>model</code> <a href=\"artisan.html\">Artisan command</a>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>model User</code></pre>\r\n<p>If you would like to generate a <a href=\"schema.html#database-migrations\">database migration</a> when you generate the model, you may use the <code class=\" language-php\"><span class=\"token operator\">--</span>migration</code> or <code class=\" language-php\"><span class=\"token operator\">-</span>m</code> option:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>model User <span class=\"token operator\">--</span>migration\r\n\r\nphp artisan make<span class=\"token punctuation\">:</span>model User <span class=\"token operator\">-</span>m</code></pre>\r\n<p><a name=\"eloquent-model-conventions\"></a></p>\r\n<h3>Eloquent Model Conventions</h3>\r\n<p>Now, let\'s look at an example <code class=\" language-php\">Flight</code> model class, which will use to retrieve and store information from our <code class=\" language-php\">flights</code> database table:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Table Names</h4>\r\n<p>Note that we did not tell Eloquent which table to use for our <code class=\" language-php\">Flight</code> model. The \"snake case\", plural name of the class will be used as the table name unless another name is explicitly specified. So, in this case, Eloquent will assume the <code class=\" language-php\">Flight</code> model stores records in the <code class=\" language-php\">flights</code> table. You may specify a custom table by defining a <code class=\" language-php\">table</code> property on your model:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * The table associated with the model.\r\n     *\r\n     * @var string\r\n     */</span>\r\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$table</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'my_flights\'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Primary Keys</h4>\r\n<p>Eloquent will also assume that each table has a primary key column named <code class=\" language-php\">id</code>. You may define a <code class=\" language-php\"><span class=\"token variable\">$primaryKey</span></code> property to override this convention.</p>\r\n<h4>Timestamps</h4>\r\n<p>By default, Eloquent expects <code class=\" language-php\">created_at</code> and <code class=\" language-php\">updated_at</code> columns to exist on your tables.  If you do not wish to have these columns automatically managed by Eloquent, set the <code class=\" language-php\"><span class=\"token variable\">$timestamps</span></code> property on your model to <code class=\" language-php\"><span class=\"token boolean\">false</span></code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Indicates if the model should be timestamped.\r\n     *\r\n     * @var bool\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$timestamps</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>If you need to customize the format of your timestamps, set the <code class=\" language-php\"><span class=\"token variable\">$dateFormat</span></code> property on your model. This property determines how date attributes are stored in the database, as well as their format when the model is serialized to an array or JSON:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * The storage format of the model\'s date columns.\r\n     *\r\n     * @var string\r\n     */</span>\r\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$dateFormat</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'U\'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p><a name=\"retrieving-multiple-models\"></a></p>\r\n<h2><a href=\"#retrieving-multiple-models\">Retrieving Multiple Models</a></h2>\r\n<p>Once you have created a model and <a href=\"schema.html\">its associated database table</a>, you are ready to start retrieving data from your database. Think of each Eloquent model as a powerful <a href=\"queries.html\">query builder</a> allowing you to fluently query the database table associated with the model. For example:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlightController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Show a list of all available flights.\r\n     *\r\n     * @return Response\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token variable\">$flights</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">all<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'flight.index\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'flights\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$flights</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Accessing Column Values</h4>\r\n<p>If you have an Eloquent model instance, you may access the column values of the model by accessing the corresponding property. For example, let\'s loop through each <code class=\" language-php\">Flight</code> instance returned by our query and echo the value of the <code class=\" language-php\">name</code> column:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flights</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$flight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Adding Additional Constraints</h4>\r\n<p>The Eloquent <code class=\" language-php\">all</code> method will return all of the results in the model\'s table. Since each Eloquent model serves as a <a href=\"queries.html\">query builder</a>, you may also add constraints to queries, and then use the <code class=\" language-php\">get</code> method to retrieve the results:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flights</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n               <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'desc\'</span><span class=\"token punctuation\">)</span>\r\n               <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">take<span class=\"token punctuation\">(</span></span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\r\n               <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<blockquote>\r\n<p><strong>Note:</strong> Since Eloquent models are query builders, you should review all of the methods available on the <a href=\"queries.html\">query builder</a>. You may use any of these methods in your Eloquent queries.</p>\r\n</blockquote>\r\n<h4>Collections</h4>\r\n<p>For Eloquent methods like <code class=\" language-php\">all</code> and <code class=\" language-php\">get</code> which retrieve multiple results, an instance of <code class=\" language-php\">Illuminate\\<span class=\"token package\">Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Collection</span></code> will be returned. The <code class=\" language-php\">Collection</code> class provides <a href=\"eloquent-collections.html\">a variety of helpful methods</a> for working with your Eloquent results. Of course, you may simply loop over this collection like an array:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flights</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$flight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Chunking Results</h4>\r\n<p>If you need to process thousands of Eloquent records, use the <code class=\" language-php\">chunk</code> command. The <code class=\" language-php\">chunk</code> method will retrieve a \"chunk\" of Eloquent models, feeding them to a given <code class=\" language-php\">Closure</code> for processing. Using the <code class=\" language-php\">chunk</code> method will conserve memory when working with large result sets:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">chunk<span class=\"token punctuation\">(</span></span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flights</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flights</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$flight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n       <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span>    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The first argument passed to the method is the number of records you wish to receive per \"chunk\". The Closure passed as the second argument will be called for each chunk that is retrieved from the database.</p>\r\n<p><a name=\"retrieving-single-models\"></a></p>\r\n<h2><a href=\"#retrieving-single-models\">Retrieving Single Models / Aggregates</a></h2>\r\n<p>Of course, in addition to retrieving all of the records for a given table, you may also retrieve single records using <code class=\" language-php\">find</code> and <code class=\" language-php\">first</code>. Instead of returning a collection of models, these methods return a single model instance:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">// Retrieve a model by its primary key...\r\n</span><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\" spellcheck=\"true\">\r\n// Retrieve the first model matching the query constraints...\r\n</span><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Not Found Exceptions</h4>\r\n<p>Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers. The <code class=\" language-php\">findOrFail</code> and <code class=\" language-php\">firstOrFail</code> methods will retrieve the first result of the query. However, if no result is found, a <code class=\" language-php\">Illuminate\\<span class=\"token package\">Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>ModelNotFoundException</span></code> will be thrown:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$model</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">findOrFail<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$model</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'legs\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">firstOrFail<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>If the exception is not caught, a <code class=\" language-php\"><span class=\"token number\">404</span></code> HTTP response is automatically sent back to the user, so it is not necessary to write explicit checks to return <code class=\" language-php\"><span class=\"token number\">404</span></code> responses when using these methods:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'/api/flights/{id}\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">findOrFail<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"retrieving-aggregates\"></a></p>\r\n<h3>Retrieving Aggregates</h3>\r\n<p>Of course, you may also use the query builder aggregate functions such as <code class=\" language-php\">count</code>, <code class=\" language-php\">sum</code>, <code class=\" language-php\">max</code>, and the other aggregate functions provided by the <a href=\"queries.html\">query builder</a>. These methods return the appropriate scalar value instead of a full model instance:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$count</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">count<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$max</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">max<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'price\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"inserting-and-updating-models\"></a></p>\r\n<h2><a href=\"#inserting-and-updating-models\">Inserting &amp; Updating Models</a></h2>\r\n<p><a name=\"basic-inserts\"></a></p>\r\n<h3>Basic Inserts</h3>\r\n<p>To create a new record in the database, simply create a new model instance, set attributes on the model, then call the <code class=\" language-php\">save</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlightController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Create a new flight instance.\r\n     *\r\n     * @param  Request  $request\r\n     * @return Response\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store<span class=\"token punctuation\">(</span></span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n       <span class=\"token comment\" spellcheck=\"true\"> // Validate the request...\r\n</span>\r\n        <span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Flight</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>In this example, we simply assign the <code class=\" language-php\">name</code> parameter from the incoming HTTP request to the <code class=\" language-php\">name</code> attribute of the <code class=\" language-php\">App\\<span class=\"token package\">Flight</span></code> model instance. When we call the <code class=\" language-php\">save</code> method, a record will be inserted into the database. The <code class=\" language-php\">created_at</code> and <code class=\" language-php\">updated_at</code> timestamps will automatically be set when the <code class=\" language-php\">save</code> method is called, so there is no need to set them manually.</p>\r\n<p><a name=\"basic-updates\"></a></p>\r\n<h3>Basic Updates</h3>\r\n<p>The <code class=\" language-php\">save</code> method may also be used to update models that already exist in the database. To update a model, you should retrieve it, set any attributes you wish to update, and then call the <code class=\" language-php\">save</code> method. Again, the <code class=\" language-php\">updated_at</code> timestamp will automatically be updated, so there is no need to manually set its value:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'New Flight Name\'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Updates can also be performed against any number of models that match a given query. In this example, all flights that are <code class=\" language-php\">active</code> and have a <code class=\" language-php\">destination</code> of <code class=\" language-php\">San Diego</code> will be marked as delayed:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n          <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'destination\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'San Diego\'</span><span class=\"token punctuation\">)</span>\r\n          <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">\'delayed\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The <code class=\" language-php\">update</code> method expects an array of column and value pairs representing the columns that should be updated.</p>\r\n<p><a name=\"mass-assignment\"></a></p>\r\n<h3>Mass Assignment</h3>\r\n<p>You may also use the <code class=\" language-php\">create</code> method to save a new model in a single line. The inserted model instance will be returned to you from the method. However, before doing so, you will need to specify either a <code class=\" language-php\">fillable</code> or <code class=\" language-php\">guarded</code> attribute on the model, as all Eloquent models protect against mass-assignment.</p>\r\n<p>A mass-assignment vulnerability occurs when user\'s pass unexpected HTTP parameters through a request, and then that parameter changes a column in your database you did not expect. For example, a malicious user might send an <code class=\" language-php\">is_admin</code> parameter through an HTTP request, which is then mapped onto your model\'s <code class=\" language-php\">create</code> method, allowing the user to escalate themselves to an administrator.</p>\r\n<p>So, to get started, you should define which model attributes you want to make mass assignable. You may do this using the <code class=\" language-php\"><span class=\"token variable\">$fillable</span></code> property on the model. For example, let\'s make the <code class=\" language-php\">name</code> attribute of our <code class=\" language-php\">Flight</code> model mass assignable:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * The attributes that are mass assignable.\r\n     *\r\n     * @var array\r\n     */</span>\r\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$fillable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Once we have made the attributes mass assignable, we can use the <code class=\" language-php\">create</code> method to insert a new record in the database. The <code class=\" language-php\">create</code> method returns the saved model instance:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">create<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">\'name\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'Flight 10\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>While <code class=\" language-php\"><span class=\"token variable\">$fillable</span></code> serves as a \"white list\" of attributes that should be mass assignable, you may also choose to use <code class=\" language-php\"><span class=\"token variable\">$guarded</span></code>. The <code class=\" language-php\"><span class=\"token variable\">$guarded</span></code> property should contain an array of attributes that you do not want to be mass assignable. All other attributes not in the array will be mass assignable. So, <code class=\" language-php\"><span class=\"token variable\">$guarded</span></code> functions like a \"black list\". Of course, you should use either <code class=\" language-php\"><span class=\"token variable\">$fillable</span></code> or <code class=\" language-php\"><span class=\"token variable\">$guarded</span></code> - not both:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * The attributes that aren\'t mass assignable.\r\n     *\r\n     * @var array\r\n     */</span>\r\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$guarded</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'price\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>In the example above, all attributes <strong>except for <code class=\" language-php\">price</code></strong> will be mass assignable.</p>\r\n<h4>Other Creation Methods</h4>\r\n<p>There are two other methods you may use to create models by mass assigning attributes: <code class=\" language-php\">firstOrCreate</code> and <code class=\" language-php\">firstOrNew</code>. The <code class=\" language-php\">firstOrCreate</code> method will attempt to locate a database record using the given column / value pairs. If the model can not be found in the database, a record will be inserted with the given attributes.</p>\r\n<p>The <code class=\" language-php\">firstOrNew</code> method, like <code class=\" language-php\">firstOrCreate</code> will attempt to locate a record in the database matching the given attributes. However, if a model is not found, a new model instance will be returned. Note that the model returned by <code class=\" language-php\">firstOrNew</code> has not yet been persisted to the database. You will need to call <code class=\" language-php\">save</code> manually to persist it:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">// Retrieve the flight by the attributes, or create it if it doesn\'t exist...\r\n</span><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">firstOrCreate<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">\'name\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'Flight 10\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\" spellcheck=\"true\">\r\n// Retrieve the flight by the attributes, or instantiate a new instance...\r\n</span><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">firstOrNew<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">\'name\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'Flight 10\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"deleting-models\"></a></p>\r\n<h2><a href=\"#deleting-models\">Deleting Models</a></h2>\r\n<p>To delete a model, call the <code class=\" language-php\">delete</code> method on a model instance:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delete<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Deleting An Existing Model By Key</h4>\r\n<p>In the example above, we are retrieving the model from the database before calling the <code class=\" language-php\">delete</code> method. However, if you know the primary key of the model, you may delete the model without retrieving it. To do so, call the <code class=\" language-php\">destroy</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">destroy<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">destroy<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">destroy<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Deleting Models By Query</h4>\r\n<p>Of course, you may also run a delete query on a set of models. In this example, we will delete all flights that are marked as inactive:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$deletedRows</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delete<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"soft-deleting\"></a></p>\r\n<h3>Soft Deleting</h3>\r\n<p>In addition to actually removing records from your database, Eloquent can also \"soft delete\" models. When models are soft deleted, they are not actually removed from your database. Instead, a <code class=\" language-php\">deleted_at</code> attribute is set on the model and inserted into the database. If a model has a non-null <code class=\" language-php\">deleted_at</code> value, the model has been soft deleted. To enable soft deletes for a model, use the <code class=\" language-php\">Illuminate\\<span class=\"token package\">Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>SoftDeletes</span></code> trait on the model and add the <code class=\" language-php\">deleted_at</code> column to your <code class=\" language-php\"><span class=\"token variable\">$dates</span></code> property:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>SoftDeletes</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">use</span> <span class=\"token package\">SoftDeletes</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * The attributes that should be mutated to dates.\r\n     *\r\n     * @var array\r\n     */</span>\r\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$dates</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'deleted_at\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Of course, you should add the <code class=\" language-php\">deleted_at</code> column to your database table. The Laravel <a href=\"schema.html\">schema builder</a> contains a helper method to create this column:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">Schema<span class=\"token punctuation\">::</span></span><span class=\"token function\">table<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'flights\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">softDeletes<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Now, when you call the <code class=\" language-php\">delete</code> method on the model, the <code class=\" language-php\">deleted_at</code> column will be set to the current date and time. And, when querying a model that uses soft deletes, the soft deleted models will automatically be excluded from all query results.</p>\r\n<p>To determine if a given model instance has been soft deleted, use the <code class=\" language-php\">trashed</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">trashed<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<p><a name=\"querying-soft-deleted-models\"></a></p>\r\n<h3>Querying Soft Deleted Models</h3>\r\n<h4>Including Soft Deleted Models</h4>\r\n<p>As noted above, soft deleted models will automatically be excluded from query results. However, you may force soft deleted models to appear in a result set using the <code class=\" language-php\">withTrashed</code> method on the query:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flights</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">withTrashed<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'account_id\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The <code class=\" language-php\">withTrashed</code> method may also be used on a <a href=\"eloquent-relationships.html\">relationship</a> query:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">history<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withTrashed<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Retrieving Only Soft Deleted Models</h4>\r\n<p>The <code class=\" language-php\">onlyTrashed</code> method will retrieve <strong>only</strong> soft deleted models:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flights</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">onlyTrashed<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'airline_id\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Restoring Soft Deleted Models</h4>\r\n<p>Sometimes you may wish to \"un-delete\" a soft deleted model. To restore a soft deleted model into an active state, use the <code class=\" language-php\">restore</code> method on a model instance:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">restore<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>You may also use the <code class=\" language-php\">restore</code> method in a query to quickly restore multiple models:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Flight<span class=\"token punctuation\">::</span></span><span class=\"token function\">withTrashed<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'airline_id\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">restore<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Like the <code class=\" language-php\">withTrashed</code> method, the <code class=\" language-php\">restore</code> method may also be used on <a href=\"eloquent-relationships.html\">relationships</a>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">history<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">restore<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Permanently Deleting Models</h4>\r\n<p>Sometimes you may need to truly remove a model from your database. To permanently remove a soft deleted model from the database, use the <code class=\" language-php\">forceDelete</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">// Force deleting a single model instance...\r\n</span><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">forceDelete<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\" spellcheck=\"true\">\r\n// Force deleting all related models...\r\n</span><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">history<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">forceDelete<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"query-scopes\"></a></p>\r\n<h2><a href=\"#query-scopes\">Query Scopes</a></h2>\r\n<p>Scopes allow you to define common sets of constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered \"popular\". To define a scope, simply prefix an Eloquent model method with <code class=\" language-php\">scope</code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Scope a query to only include popular users.\r\n     *\r\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scopePopular<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'votes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Scope a query to only include active users.\r\n     *\r\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scopeActive<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Utilizing A Query Scope</h4>\r\n<p>Once the scope has been defined, you may call the scope methods when querying the model. However, you do not need to include the <code class=\" language-php\">scope</code> prefix when calling the method. You can even chain calls to various scopes, for example:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">popular<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">women<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'created_at\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Dynamic Scopes</h4>\r\n<p>Sometimes you may wish to define a scope that accepts parameters. To get started, just add your additional parameters to your scope. Scope parameters should be defined after the <code class=\" language-php\"><span class=\"token variable\">$query</span></code> argument:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Scope a query to only include users of a given type.\r\n     *\r\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scopeOfType<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$query</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'type\'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Now, you may pass the parameters when calling the scope:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">ofType<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'admin\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"events\"></a></p>\r\n<h2><a href=\"#events\">Events</a></h2>\r\n<p>Eloquent models fire several events, allowing you to hook into various points in the model\'s lifecycle using the following methods: <code class=\" language-php\">creating</code>, <code class=\" language-php\">created</code>, <code class=\" language-php\">updating</code>, <code class=\" language-php\">updated</code>, <code class=\" language-php\">saving</code>, <code class=\" language-php\">saved</code>, <code class=\" language-php\">deleting</code>, <code class=\" language-php\">deleted</code>, <code class=\" language-php\">restoring</code>, <code class=\" language-php\">restored</code>. Events allow you to easily execute code each time a specific model class is saved or updated in the database.</p>\r\n<p><a name=\"basic-usage\"></a></p>\r\n<h3>Basic Usage</h3>\r\n<p>Whenever a new model is saved for the first time, the <code class=\" language-php\">creating</code> and <code class=\" language-php\">created</code> events will fire. If a model already existed in the database and the <code class=\" language-php\">save</code> method is called, the <code class=\" language-php\">updating</code> / <code class=\" language-php\">updated</code> events will fire. However, in both cases, the <code class=\" language-php\">saving</code> / <code class=\" language-php\">saved</code> events will fire.</p>\r\n<p>For example, let\'s define an Eloquent event listener in a <a href=\"providers.html\">service provider</a>. Within our event listener, we will call the <code class=\" language-php\">isValid</code> method on the given model, and return <code class=\" language-php\"><span class=\"token boolean\">false</span></code> if the model is not valid. Returning <code class=\" language-php\"><span class=\"token boolean\">false</span></code> from an Eloquent event listener will cancel the <code class=\" language-php\">save</code> / <code class=\" language-php\">update</code> operation:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Bootstrap any application services.\r\n     *\r\n     * @return void\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token scope\">User<span class=\"token punctuation\">::</span></span><span class=\"token function\">creating<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isValid<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Register the service provider.\r\n     *\r\n     * @return void\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n       <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span>    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', 1, 1, 1, NULL, '2019-08-28 12:42:57', '2019-08-28 12:42:57');
INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(19, 17, 1, 36, 37, 1, 'Relationships', 'relationships', 'Possimus cupidatat rerum cupiditate et fugiat voluptate nihil sed eveniet minima non eius similique repudiandae eligendi magni cumque in omnis', '<p><a name=\"introduction\"></a></p>\r\n<h2><a href=\"#introduction\">Introduction</a></h2>\r\n<hr/>\r\n<p>Database tables are often related to one another. For example, a blog post may have many comments, or an order could be related to the user who placed it. Eloquent makes managing and working with these relationships easy, and supports several different types of relationships:</p>\r\n<ul>\r\n<li><a href=\"eloquent-relationships.html#one-to-one\">One To One</a></li>\r\n<li><a href=\"eloquent-relationships.html#one-to-many\">One To Many</a></li>\r\n<li><a href=\"eloquent-relationships.html#many-to-many\">Many To Many</a></li>\r\n<li><a href=\"eloquent-relationships.html#has-many-through\">Has Many Through</a></li>\r\n<li><a href=\"eloquent-relationships.html#polymorphic-relations\">Polymorphic Relations</a></li>\r\n<li><a href=\"eloquent-relationships.html#many-to-many-polymorphic-relations\">Many To Many Polymorphic Relations</a></li>\r\n</ul>\r\n<p><a name=\"defining-relationships\"></a></p>\r\n<h2><a href=\"#defining-relationships\">Defining Relationships</a></h2>\r\n<hr/>\r\n<p>Eloquent relationships are defined as functions on your Eloquent model classes. Since, like Eloquent models themselves, relationships also serve as powerful <a href=\"queries.html\">query builders</a>, defining relationships as functions provides powerful method chaining and querying capabilities. For example:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">posts<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>But, before diving too deep into using relationships, let\'s learn how to define each type:</p>\r\n<p><a name=\"one-to-one\"></a></p>\r\n<h3>One To One</h3>\r\n<p>A one-to-one relationship is a very basic relation. For example, a <code class=\" language-php\">User</code> model might be associated with one <code class=\" language-php\">Phone</code>. To define this relationship, we place a <code class=\" language-php\">phone</code> method on the <code class=\" language-php\">User</code> model. The <code class=\" language-php\">phone</code> method should return the results of the <code class=\" language-php\">hasOne</code> method on the base Eloquent model class:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get the phone record associated with the user.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">phone<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Phone\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>The first argument passed to the <code class=\" language-php\">hasOne</code> method is the name of the related model. Once the relationship is defined, we may retrieve the related record using Eloquent\'s <a href=\"eloquent-relationships.html#dynamic-properties\">dynamic properties</a>. Dynamic properties allow you to access relationship functions as if they were properties defined on the model:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$phone</span> <span class=\"token operator\">=</span> <span class=\"token scope\">User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">phone</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Eloquent assumes the foreign key of the relationship based on the model name. In this case, the <code class=\" language-php\">Phone</code> model is automatically assumed to have a <code class=\" language-php\">user_id</code> foreign key. If you wish to override this convention, you may pass a second argument to the <code class=\" language-php\">hasOne</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Phone\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foreign_key\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Additionally, Eloquent assumes that the foreign key should have a value matching the <code class=\" language-php\">id</code> column of the parent. In other words, Eloquent will look for the value of the user\'s <code class=\" language-php\">id</code> column in the <code class=\" language-php\">user_id</code> column of the <code class=\" language-php\">Phone</code> record. If you would like the relationship to use a value other than <code class=\" language-php\">id</code>, you may pass a third argument to the <code class=\" language-php\">hasOne</code> method specifying your custom key:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Phone\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foreign_key\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'local_key\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Defining The Inverse Of The Relation</h4>\r\n<p>So, we can access the <code class=\" language-php\">Phone</code> model from our <code class=\" language-php\">User</code>. Now, let\'s define a relationship on the <code class=\" language-php\">Phone</code> model that will let us access the <code class=\" language-php\">User</code> the owns the phone. We can define the inverse of a <code class=\" language-php\">hasOne</code> relationship using the <code class=\" language-php\">belongsTo</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Phone</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get the user that owns the phone.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">user<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\User\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>In the example above, Eloquent will try to match the <code class=\" language-php\">user_id</code> from the <code class=\" language-php\">Phone</code> model to an <code class=\" language-php\">id</code> on the <code class=\" language-php\">User</code> model. Eloquent determines the default foreign key name by examining the name of the relationship method and suffixing the method name with <code class=\" language-php\">_id</code>. However, if the foreign key on the <code class=\" language-php\">Phone</code> model is not <code class=\" language-php\">user_id</code>, you may pass a custom key name as the second argument to the <code class=\" language-php\">belongsTo</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">/**\r\n * Get the user that owns the phone.\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">user<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\User\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foreign_key\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>If your parent model does not use <code class=\" language-php\">id</code> as its primary key, or you wish to join the child model to a different column, you may pass a third argument to the <code class=\" language-php\">belongsTo</code> method specifying your parent table\'s custom key:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">/**\r\n * Get the user that owns the phone.\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">user<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\User\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foreign_key\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'other_key\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p><a name=\"one-to-many\"></a></p>\r\n<h3>One To Many</h3>\r\n<p>A \"one-to-many\" relationship is used to define relationships where a single model owns any amount of other models. For example, a blog post may have an infinite number of comments. Like all other Eloquent relationships, one-to-many relationships are defined by placing a function on your Eloquent model:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get the comments for the blog post.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">comments<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Comment\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Remember, Eloquent will automatically determine the proper foreign key column on the <code class=\" language-php\">Comment</code> model. By convention, Eloquent will take the \"snake case\" name of the owning model and suffix it with <code class=\" language-php\">_id</code>. So, for this example, Eloquent will assume the foreign key on the <code class=\" language-php\">Comment</code> model is <code class=\" language-php\">post_id</code>.</p>\r\n<p>Once the relationship has been defined, we can access the collection of comments by accessing the <code class=\" language-php\">comments</code> property. Remember, since Eloquent provides \"dynamic properties\", we can access relationship functions as if they were defined as properties on the model:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$comments</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$comments</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$comment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<p>Of course, since all relationships also serve as query builders, you can add further constraints to which comments are retrieved by calling the <code class=\" language-php\">comments</code> method and continuing to chain conditions onto the query:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$comments</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'title\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foo\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Like the <code class=\" language-php\">hasOne</code> method, you may also override the foreign and local keys by passing additional arguments to the <code class=\" language-php\">hasMany</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Comment\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foreign_key\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Comment\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foreign_key\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'local_key\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Defining The Inverse Of The Relation</h4>\r\n<p>Now that we can access all of a post\'s comments, let\'s define a relationship to allow a comment to access its parent post. To define the inverse of a <code class=\" language-php\">hasMany</code> relationship, define a relationship function on the child model which calls the <code class=\" language-php\">belongsTo</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get the post that owns the comment.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Post\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Once the relationship has been defined, we can retrieve the <code class=\" language-php\">Post</code> model for a <code class=\" language-php\">Comment</code> by accessing the <code class=\" language-php\">post</code> \"dynamic property\":</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Comment<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$comment</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">title</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>In the example above, Eloquent will try to match the <code class=\" language-php\">post_id</code> from the <code class=\" language-php\">Comment</code> model to an <code class=\" language-php\">id</code> on the <code class=\" language-php\">Post</code> model. Eloquent determines the default foreign key name by examining the name of the relationship method and suffixing the method name with <code class=\" language-php\">_id</code>. However, if the foreign key on the <code class=\" language-php\">Comment</code> model is not <code class=\" language-php\">post_id</code>, you may pass a custom key name as the second argument to the <code class=\" language-php\">belongsTo</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">/**\r\n * Get the post that owns the comment.\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Post\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foreign_key\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>If your parent model does not use <code class=\" language-php\">id</code> as its primary key, or you wish to join the child model to a different column, you may pass a third argument to the <code class=\" language-php\">belongsTo</code> method specifying your parent table\'s custom key:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">/**\r\n * Get the post that owns the comment.\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Post\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foreign_key\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'other_key\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p><a name=\"many-to-many\"></a></p>\r\n<h3>Many To Many</h3>\r\n<p>Many-to-many relations are slightly more complicated than <code class=\" language-php\">hasOne</code> and <code class=\" language-php\">hasMany</code> relationships. An example of such a relationship is a user with many roles, where the roles are also shared by other users. For example, many users may have the role of \"Admin\". To define this relationship, three database tables are needed: <code class=\" language-php\">users</code>, <code class=\" language-php\">roles</code>, and <code class=\" language-php\">role_user</code>. The <code class=\" language-php\">role_user</code> table is derived from the alphabetical order of the related model names, and contains the <code class=\" language-php\">user_id</code> and <code class=\" language-php\">role_id</code> columns.</p>\r\n<p>Many-to-many relationships are defined by writing a method that calls the <code class=\" language-php\">belongsToMany</code> method on the base Eloquent class. For example, let\'s define the <code class=\" language-php\">roles</code> method on our <code class=\" language-php\">User</code> model:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * The roles that belong to the user.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Role\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Once the relationship is defined, you may access the user\'s roles using the <code class=\" language-php\">roles</code> dynamic property:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">roles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<p>Of course, like all other relationship types, you may call the <code class=\" language-php\">roles</code> method to continue chaining query constraints onto the relationship:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$roles</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>As mentioned previously, to determine the table name of the relationship\'s joining table, Eloquent will join the two related model names in alphabetical order. However, you are free to override this convention. You may do so by passing a second argument to the <code class=\" language-php\">belongsToMany</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Role\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'user_roles\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>In addition to customizing the name of the joining table, you may also customize the column names of the keys on the table by passing additional arguments to the <code class=\" language-php\">belongsToMany</code> method. The third argument is the foreign key name of the model on which you are defining the relationship, while the fourth argument is the foreign key name of the model that you are joining to:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Role\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'user_roles\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'user_id\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'role_id\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Defining The Inverse Of The Relationship</h4>\r\n<p>To define the inverse of a many-to-many relationship, you simply place another call to <code class=\" language-php\">belongsToMany</code> on your related model. To continue our user roles example, let\'s define the <code class=\" language-php\">users</code> method on the <code class=\" language-php\">Role</code> model:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Role</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * The users that belong to the role.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">users<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\User\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>As you can see, the relationship is defined exactly the same as its <code class=\" language-php\">User</code> counterpart, with the exception of simply referencing the <code class=\" language-php\">App\\<span class=\"token package\">User</span></code> model. Since we\'re reusing the <code class=\" language-php\">belongsToMany</code> method, all of the usual table and key customization options are available when defining the inverse of many-to-many relationships.</p>\r\n<h4>Retrieving Intermediate Table Columns</h4>\r\n<p>As you have already learned, working with many-to-many relations requires the presence of an intermediate table. Eloquent provides some very helpful ways of interacting with this table. For example, let\'s assume our <code class=\" language-php\">User</code> object has many <code class=\" language-php\">Role</code> objects that it is related to. After accessing this relationship, we may access the intermediate table using the <code class=\" language-php\">pivot</code> attribute on the models:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">roles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$role</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">pivot</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">created_at</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Notice that each <code class=\" language-php\">Role</code> model we retrieve is automatically assigned a <code class=\" language-php\">pivot</code> attribute. This attribute contains a model representing the intermediate table, and may be used like any other Eloquent model.</p>\r\n<p>By default, only the model keys will be present on the <code class=\" language-php\">pivot</code> object. If your pivot table contains extra attributes, you must specify them when defining the relationship:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Role\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withPivot<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'column1\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'column2\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>If you want your pivot table to have automatically maintained <code class=\" language-php\">created_at</code> and <code class=\" language-php\">updated_at</code> timestamps, use the <code class=\" language-php\">withTimestamps</code> method on the relationship definition:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Role\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withTimestamps<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"has-many-through\"></a></p>\r\n<h3>Has Many Through</h3>\r\n<p>The \"has-many-through\" relationship provides a convenient short-cut for accessing distant relations via an intermediate relation. For example, a <code class=\" language-php\">Country</code> model might have many <code class=\" language-php\">Post</code> models through an intermediate <code class=\" language-php\">User</code> model. In this example, you could easily gather all blog posts for a given country. Let\'s look at the tables required to define this relationship:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">countries\r\n    id <span class=\"token operator\">-</span> integer\r\n    name <span class=\"token operator\">-</span> string\r\n\r\nusers\r\n    id <span class=\"token operator\">-</span> integer\r\n    country_id <span class=\"token operator\">-</span> integer\r\n    name <span class=\"token operator\">-</span> string\r\n\r\nposts\r\n    id <span class=\"token operator\">-</span> integer\r\n    user_id <span class=\"token operator\">-</span> integer\r\n    title <span class=\"token operator\">-</span> string</code></pre>\r\n<p>Though <code class=\" language-php\">posts</code> does not contain a <code class=\" language-php\">country_id</code> column, the <code class=\" language-php\">hasManyThrough</code> relation provides access to a country\'s posts via <code class=\" language-php\"><span class=\"token variable\">$country</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">posts</span></code>. To perform this query, Eloquent inspects the <code class=\" language-php\">country_id</code> on the intermediate <code class=\" language-php\">users</code> table. After finding the matching user IDs, they are used to query the <code class=\" language-php\">posts</code> table.</p>\r\n<p>Now that we have examined the table structure for the relationship, let\'s define it on the <code class=\" language-php\">Country</code> model:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Country</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get all of the posts for the country.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">posts<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasManyThrough<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Post\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'App\\User\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>The first argument passed to the <code class=\" language-php\">hasManyThrough</code> method is the name of the final model we wish to access, while the second argument is the name of the intermediate model.</p>\r\n<p>Typical Eloquent foreign key conventions will be used when performing the relationship\'s queries. If you would like to customize the keys of the relationship, you may pass them as the third and fourth arguments to the <code class=\" language-php\">hasManyThrough</code> method. The third argument is the name of the foreign key on the intermediate model, while the fourth argument is the name of the foreign key on the final model.</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Country</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">posts<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasManyThrough<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Post\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'App\\User\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'country_id\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'user_id\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p><a name=\"polymorphic-relations\"></a></p>\r\n<h3>Polymorphic Relations</h3>\r\n<h4>Table Structure</h4>\r\n<p>Polymorphic relations allow a model to belong to more than one other model on a single association. For example, imagine you want to store photos for your staff members and for your products. Using polymorphic relationships, you can use a single <code class=\" language-php\">photos</code> table for both of these scenarios. First, let\'s examine the table structure required to build this relationship:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">staff\r\n    id <span class=\"token operator\">-</span> integer\r\n    name <span class=\"token operator\">-</span> string\r\n\r\nproducts\r\n    id <span class=\"token operator\">-</span> integer\r\n    price <span class=\"token operator\">-</span> integer\r\n\r\nphotos\r\n    id <span class=\"token operator\">-</span> integer\r\n    path <span class=\"token operator\">-</span> string\r\n    imageable_id <span class=\"token operator\">-</span> integer\r\n    imageable_type <span class=\"token operator\">-</span> string</code></pre>\r\n<p>Two important columns to note are the <code class=\" language-php\">imageable_id</code> and <code class=\" language-php\">imageable_type</code> columns on the <code class=\" language-php\">photos</code> table. The <code class=\" language-php\">imageable_id</code> column will contain the ID value of the owning staff or product, while the <code class=\" language-php\">imageable_type</code> column will contain the class name of the owning model. The <code class=\" language-php\">imageable_type</code> column is how the ORM determines which \"type\" of owning model to return when accessing the <code class=\" language-php\">imageable</code> relation.</p>\r\n<h4>Model Structure</h4>\r\n<p>Next, let\'s examine the model definitions needed to build this relationship:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Photo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get all of the owning imageable models.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">imageable<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphTo<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Staff</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get all of the staff member\'s photos.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">photos<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Photo\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'imageable\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get all of the product\'s photos.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">photos<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Photo\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'imageable\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Retrieving Polymorphic Relations</h4>\r\n<p>Once your database table and models are defined, you may access the relationships via your models. For example, to access all of the photos for a staff member, we can simply use the <code class=\" language-php\">photos</code> dynamic property:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$staff</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Staff<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$staff</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">photos</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$photo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<p>You may also retrieve the owner of a polymorphic relation from the polymorphic model by accessing the name of the method that performs the call to <code class=\" language-php\">morphTo</code>. In our case, that is the <code class=\" language-php\">imageable</code> method on the <code class=\" language-php\">Photo</code> model. So, we will access that method as a dynamic property:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$photo</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Photo<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$imageable</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$photo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">imageable</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The <code class=\" language-php\">imageable</code> relation on the <code class=\" language-php\">Photo</code> model will return either a <code class=\" language-php\">Staff</code> or <code class=\" language-php\">Product</code> instance, depending on which type of model owns the photo.</p>\r\n<p><a name=\"many-to-many-polymorphic-relations\"></a></p>\r\n<h3>Many To Many Polymorphic Relations</h3>\r\n<h4>Table Structure</h4>\r\n<p>In addition to traditional polymorphic relations, you may also define \"many-to-many\" polymorphic relations. For example, a blog <code class=\" language-php\">Post</code> and <code class=\" language-php\">Video</code> model could share a polymorphic relation to a <code class=\" language-php\">Tag</code> model. Using a many-to-many polymorphic relation allows you to have a single list of unique tags that are shared across blog posts and videos. First, let\'s examine the table structure:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">posts\r\n    id <span class=\"token operator\">-</span> integer\r\n    name <span class=\"token operator\">-</span> string\r\n\r\nvideos\r\n    id <span class=\"token operator\">-</span> integer\r\n    name <span class=\"token operator\">-</span> string\r\n\r\ntags\r\n    id <span class=\"token operator\">-</span> integer\r\n    name <span class=\"token operator\">-</span> string\r\n\r\ntaggables\r\n    tag_id <span class=\"token operator\">-</span> integer\r\n    taggable_id <span class=\"token operator\">-</span> integer\r\n    taggable_type <span class=\"token operator\">-</span> string</code></pre>\r\n<h4>Model Structure</h4>\r\n<p>Next, we\'re ready to define the relationships on the model. The <code class=\" language-php\">Post</code> and <code class=\" language-php\">Video</code> models will both have a <code class=\" language-php\">tags</code> method that calls the <code class=\" language-php\">morphToMany</code> method on the base Eloquent class:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get all of the tags for the post.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">tags<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphToMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Tag\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'taggable\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Defining The Inverse Of The Relationship</h4>\r\n<p>Next, on the <code class=\" language-php\">Tag</code> model, you should define a method for each of its related models. So, for this example, we will define a <code class=\" language-php\">posts</code> method and a <code class=\" language-php\">videos</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tag</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get all of the posts that are assigned this tag.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">posts<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphedByMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Post\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'taggable\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get all of the videos that are assigned this tag.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">videos<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphedByMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Video\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'taggable\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Retrieving The Relationship</h4>\r\n<p>Once your database table and models are defined, you may access the relationships via your models. For example, to access all of the tags for a post, you can simply use the <code class=\" language-php\">tags</code> dynamic property:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">tags</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$tag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<p>You may also retrieve the owner of a polymorphic relation from the polymorphic model by accessing the name of the method that performs the call to <code class=\" language-php\">morphedByMany</code>. In our case, that is the <code class=\" language-php\">posts</code> or <code class=\" language-php\">videos</code> methods on the <code class=\" language-php\">Tag</code> model. So, you will access those methods as dynamic properties:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$tag</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Tag<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$tag</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">videos</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$video</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<p><a name=\"querying-relations\"></a></p>\r\n<h2><a href=\"#querying-relations\">Querying Relations</a></h2>\r\n<p>Since all types of Eloquent relationships are defined via functions, you may call those functions to obtain an instance of the relationship without actually executing the relationship queries. In addition, all types of Eloquent relationships also serve as <a href=\"queries.html\">query builders</a>, allowing you to continue to chain constraints onto the relationship query before finally executing the SQL against your database.</p>\r\n<p>For example, imagine a blog system in which a <code class=\" language-php\">User</code> model has many associated <code class=\" language-php\">Post</code> models:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get all of the posts for the user.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">posts<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasMany<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Post\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>You may query the <code class=\" language-php\">posts</code> relationship and add additional constraints to the relationship like so:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">posts<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Note that you are able to use any of the <a href=\"queries.html\">query builder</a> on the relationship!</p>\r\n<h4>Relationship Methods Vs. Dynamic Properties</h4>\r\n<p>If you do not need to add additional constraints to an Eloquent relationship query, you may simply access the relationship as if it were a property. For example, continuing to use our <code class=\" language-php\">User</code> and <code class=\" language-php\">Post</code> example models, we may access all of a user\'s posts like so:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">posts</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<p>Dynamic properties are \"lazy loading\", meaning they will only load their relationship data when you actually access them. Because of this, developers often use <a href=\"eloquent-relationships.html#eager-loading\">eager loading</a> to pre-load relationships they know will be accessed after loading the model. Eager loading provides a significant reduction in SQL queries that must be executed to load a model\'s relations.</p>\r\n<h4>Querying Relationship Existence</h4>\r\n<p>When accessing the records for a model, you may wish to limit your results based on the existence of a relationship. For example, imagine you want to retrieve all blog posts that have at least one comment. To do so, you may pass the name of the relationship to the <code class=\" language-php\">has</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">// Retrieve all posts that have at least one comment...\r\n</span><span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">has<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'comments\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>You may also specify an operator and count to further customize the query:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">// Retrieve all posts that have three or more comments...\r\n</span><span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">has<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'comments\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'&gt;=\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Nested <code class=\" language-php\">has</code> statements may also be constructed using \"dot\" notation. For example, you may retrieve all posts that have at least one comment and vote:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">// Retrieve all posts that have at least one comment with votes...\r\n</span><span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">has<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'comments.votes\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>If you need even more power, you may use the <code class=\" language-php\">whereHas</code> and <code class=\" language-php\">orWhereHas</code> methods to put \"where\" conditions on your <code class=\" language-php\">has</code> queries. These methods allow you to add customized constraints to a relationship constraint, such as checking the content of a comment:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">// Retrieve all posts with at least one comment containing words like foo%\r\n</span><span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">whereHas<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'comments\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$q</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token variable\">$q</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'content\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'like\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'foo%\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"eager-loading\"></a></p>\r\n<h3>Eager Loading</h3>\r\n<p>When accessing Eloquent relationships as properties, the relationship data is \"lazy loaded\". This means the relationship data is not actually loaded until you first access the property. However, Eloquent can \"eager load\" relationships at the time you query the parent model. Eager loading alleviates the N + 1 query problem. To illustrate the N + 1 query problem, consider a <code class=\" language-php\">Book</code> model that is related to <code class=\" language-php\">Author</code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Get the author that wrote the book.\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">author<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'App\\Author\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Now, let\'s retrieve all books and their authors:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Book<span class=\"token punctuation\">::</span></span><span class=\"token function\">all<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$books</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$book</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">author</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>This loop will execute 1 query to retrieve all of the books on the table, then another query for each book to retrieve the author. So, if we have 25 books, this loop would run 26 queries: 1 for the original book, and 25 additional queries to retrieve the author of each book.</p>\r\n<p>Thankfully, we can use eager loading to reduce this operation to just 2 queries. When querying, you may specify which relationships should be eager loaded using the <code class=\" language-php\">with</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Book<span class=\"token punctuation\">::</span></span><span class=\"token function\">with<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'author\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$books</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$book</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">author</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>For this operation, only two queries will be executed:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">select <span class=\"token operator\">*</span> from books\r\n\r\nselect <span class=\"token operator\">*</span> from authors where id in <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></code></pre>\r\n<h4>Eager Loading Multiple Relationships</h4>\r\n<p>Sometimes you may need to eager load several different relationships in a single operation. To do so, just pass additional arguments to the <code class=\" language-php\">with</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Book<span class=\"token punctuation\">::</span></span><span class=\"token function\">with<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'author\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'publisher\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Nested Eager Loading</h4>\r\n<p>To eager load nested relationships, you may use \"dot\" syntax. For example, let\'s eager load all of the book\'s authors and all of the author\'s personal contacts in one Eloquent statement:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Book<span class=\"token punctuation\">::</span></span><span class=\"token function\">with<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'author.contacts\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"constraining-eager-loads\"></a></p>\r\n<h3>Constraining Eager Loads</h3>\r\n<p>Sometimes you may wish to eager load a relationship, but also specify additional query constraints for the eager loading query. Here\'s an example:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">with<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">\'posts\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'title\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'like\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'%first%\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>In this example, Eloquent will only eager load posts that if the post\'s <code class=\" language-php\">title</code> column contains the word <code class=\" language-php\">first</code>. Of course, you may call other <a href=\"queries.html\">query builder</a> to further customize the eager loading operation:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">with<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">\'posts\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'created_at\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'desc\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"lazy-eager-loading\"></a></p>\r\n<h3>Lazy Eager Loading</h3>\r\n<p>Sometimes you may need to eager load a relationship after the parent model has already been retrieved. For example, this may be useful if you need to dynamically decide whether to load related models:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Book<span class=\"token punctuation\">::</span></span><span class=\"token function\">all<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$someCondition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token variable\">$books</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">load<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'author\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'publisher\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>If you need set additional query constraints on the eager loading query, you may pass a <code class=\" language-php\">Closure</code> to the <code class=\" language-php\">load</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">load<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">\'author\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'published_date\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'asc\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"inserting-related-models\"></a></p>\r\n<h2><a href=\"#inserting-related-models\">Inserting Related Models</a></h2>\r\n<h4>The Save Method</h4>\r\n<p>Eloquent provides convenient methods for adding new models to relationships. For example, perhaps you need to insert a new <code class=\" language-php\">Comment</code> for a <code class=\" language-php\">Post</code> model. Instead of manually setting the <code class=\" language-php\">post_id</code> attribute on the <code class=\" language-php\">Comment</code>, you may insert the <code class=\" language-php\">Comment</code> directly from the relationship\'s <code class=\" language-php\">save</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">App<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\'message\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'A new comment.\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$comment</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Notice that we did not access the <code class=\" language-php\">comments</code> relationship as a dynamic property. Instead, we called the <code class=\" language-php\">comments</code> method to obtain an instance of the relationship. The <code class=\" language-php\">save</code> method will automatically add the appropriate <code class=\" language-php\">post_id</code> value to the new <code class=\" language-php\">Comment</code> model.</p>\r\n<p>If you need to save multiple related models, you may use the <code class=\" language-php\">saveMany</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">saveMany<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span>\r\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">App<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\'message\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'A new comment.\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">App<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\'message\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'Another comment.\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Save &amp; Many To Many Relationships</h4>\r\n<p>When working with a many-to-many relationship, the <code class=\" language-php\">save</code> method accepts an array of additional intermediate table attributes as its second argument:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$role</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'expires\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$expires</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>The Create Method</h4>\r\n<p>In addition to the <code class=\" language-php\">save</code> and <code class=\" language-php\">saveMany</code> methods, you may also use the <code class=\" language-php\">create</code> method, which accepts an array of attributes, creates a model, and inserts it into the database. Again, the difference between <code class=\" language-php\">save</code> and <code class=\" language-php\">create</code> is that <code class=\" language-php\">save</code> accepts a full Eloquent model instance while <code class=\" language-php\">create</code> accepts a plain PHP <code class=\" language-php\"><span class=\"token keyword\">array</span></code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>Post<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">create<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span>\r\n    <span class=\"token string\">\'message\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'A new comment.\'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Before using the <code class=\" language-php\">create</code> method, be sure to review the documentation on attribute <a href=\"eloquent-basics.html#mass-assignment\">mass assignment</a>.</p>\r\n<p><a name=\"inserting-many-to-many-relationships\"></a></p>\r\n<h3>Many To Many Relationships</h3>\r\n<h4>Attaching / Detaching</h4>\r\n<p>When working with many-to-many relationships, Eloquent provides a few additional helper methods to make working with related models more convenient. For example, let\'s imagine a user can have many roles and a role can have many users. To attach a role to a user by inserting a record in the intermediate table that joins the models, use the <code class=\" language-php\">attach</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">attach<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$roleId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>When attaching a relationship to a model, you may also pass an array of additional data to be inserted into the intermediate table:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">attach<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$roleId</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'expires\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$expires</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Of course, sometimes it may be necessary to remove a role from a user. To remove a many-to-many relationship record, use the <code class=\" language-php\">detach</code> method. The <code class=\" language-php\">detach</code> method will remove the appropriate record out of the intermediate table; however, both models will remain in the database:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">// Detach a single role from the user...\r\n</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">detach<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$roleId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\" spellcheck=\"true\">\r\n// Detach all roles from the user...\r\n</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">detach<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>For convenience, <code class=\" language-php\">attach</code> and <code class=\" language-php\">detach</code> also accept arrays of IDs as input:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">detach<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">attach<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'expires\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$expires</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>Syncing For Convenience</h4>\r\n<p>You may also use the <code class=\" language-php\">sync</code> method to construct many-to-many associations. The <code class=\" language-php\">sync</code> method accepts an array of IDs to place on the intermediate table. Any IDs that are not in the given array will be removed from the intermediate table. So, after this operation is complete, only the IDs in the array will exist in the intermediate table:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sync<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>You may also pass additional intermediate table values with the IDs:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sync<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'expires\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>', 1, 1, 1, NULL, '2019-08-28 12:42:57', '2019-08-28 12:42:57');
INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(20, 17, 2, 38, 39, 1, 'Collections', 'collections', 'Reiciendis omnis proident sit quas quod', '<p><a name=\"introduction\"></a></p>\r\n<h2><a href=\"#introduction\">Introduction</a></h2>\r\n<hr/>\r\n<p>All multi-result sets returned by Eloquent are an instance of the <code class=\" language-php\">Illuminate\\<span class=\"token package\">Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Collection</span></code> object, including results retrieved via the <code class=\" language-php\">get</code> method or accessed via a relationship. The Eloquent collection object extends the Laravel <a href=\"collections.html\">base collection</a>, so it naturally inherits dozens of methods used to fluently work with the underlying array of Eloquent models.</p>\r\n<p>Of course, all collections also serve as iterators, allowing you to loop over them as if they were simple PHP arrays:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>However, collections are much more powerful than arrays and expose a variety of map / reduce operations using an intuitive interface. For example, let\'s remove all inactive models and gather the first name for each remaining user:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token scope\">App<span class=\"token punctuation\">\\</span>User<span class=\"token punctuation\">::</span></span><span class=\"token function\">where<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'active\'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token variable\">$names</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reject<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">active</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">map<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"available-methods\"></a></p>\r\n<h2><a href=\"#available-methods\">Available Methods</a></h2>\r\n<h3>The Base Collection</h3>\r\n<p>All Eloquent collections extend the base <a href=\"collections.html\">Laravel collection</a> object; therefore, they inherit all of the powerful methods provided by the base collection class:</p>\r\n<style>\r\n    #collection-method-list > p {\r\n        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\r\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\r\n    }\r\n\r\n    #collection-method-list a {\r\n        display: block;\r\n    }\r\n</style>\r\n<div id=\"collection-method-list\">\r\n<p><a href=\"collections.html#method-all\">all</a>\r\n<a href=\"collections.html#method-chunk\">chunk</a>\r\n<a href=\"collections.html#method-collapse\">collapse</a>\r\n<a href=\"collections.html#method-contains\">contains</a>\r\n<a href=\"collections.html#method-count\">count</a>\r\n<a href=\"collections.html#method-diff\">diff</a>\r\n<a href=\"collections.html#method-each\">each</a>\r\n<a href=\"collections.html#method-filter\">filter</a>\r\n<a href=\"collections.html#method-first\">first</a>\r\n<a href=\"collections.html#method-flatten\">flatten</a>\r\n<a href=\"collections.html#method-flip\">flip</a>\r\n<a href=\"collections.html#method-forget\">forget</a>\r\n<a href=\"collections.html#method-forpage\">forPage</a>\r\n<a href=\"collections.html#method-get\">get</a>\r\n<a href=\"collections.html#method-groupby\">groupBy</a>\r\n<a href=\"collections.html#method-has\">has</a>\r\n<a href=\"collections.html#method-implode\">implode</a>\r\n<a href=\"collections.html#method-intersect\">intersect</a>\r\n<a href=\"collections.html#method-isempty\">isEmpty</a>\r\n<a href=\"collections.html#method-keyby\">keyBy</a>\r\n<a href=\"collections.html#method-keys\">keys</a>\r\n<a href=\"collections.html#method-last\">last</a>\r\n<a href=\"collections.html#method-map\">map</a>\r\n<a href=\"collections.html#method-merge\">merge</a>\r\n<a href=\"collections.html#method-pluck\">pluck</a>\r\n<a href=\"collections.html#method-pop\">pop</a>\r\n<a href=\"collections.html#method-prepend\">prepend</a>\r\n<a href=\"collections.html#method-pull\">pull</a>\r\n<a href=\"collections.html#method-push\">push</a>\r\n<a href=\"collections.html#method-put\">put</a>\r\n<a href=\"collections.html#method-random\">random</a>\r\n<a href=\"collections.html#method-reduce\">reduce</a>\r\n<a href=\"collections.html#method-reject\">reject</a>\r\n<a href=\"collections.html#method-reverse\">reverse</a>\r\n<a href=\"collections.html#method-search\">search</a>\r\n<a href=\"collections.html#method-shift\">shift</a>\r\n<a href=\"collections.html#method-shuffle\">shuffle</a>\r\n<a href=\"collections.html#method-slice\">slice</a>\r\n<a href=\"collections.html#method-sort\">sort</a>\r\n<a href=\"collections.html#method-sortby\">sortBy</a>\r\n<a href=\"collections.html#method-sortbydesc\">sortByDesc</a>\r\n<a href=\"collections.html#method-splice\">splice</a>\r\n<a href=\"collections.html#method-sum\">sum</a>\r\n<a href=\"collections.html#method-take\">take</a>\r\n<a href=\"collections.html#method-toarray\">toArray</a>\r\n<a href=\"collections.html#method-tojson\">toJson</a>\r\n<a href=\"collections.html#method-transform\">transform</a>\r\n<a href=\"collections.html#method-unique\">unique</a>\r\n<a href=\"collections.html#method-values\">values</a>\r\n<a href=\"collections.html#method-where\">where</a>\r\n<a href=\"collections.html#method-whereloose\">whereLoose</a>\r\n<a href=\"collections.html#method-zip\">zip</a></p>\r\n</div>\r\n<p><a name=\"custom-collections\"></a></p>\r\n<h2><a href=\"#custom-collections\">Custom Collections</a></h2>\r\n<p>If you need to use a custom <code class=\" language-php\">Collection</code> object with your own extension methods, you may override the <code class=\" language-php\">newCollection</code> method on your model:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>CustomCollection</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Create a new Eloquent Collection instance.\r\n     *\r\n     * @param  array  $models\r\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">newCollection<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">array</span> <span class=\"token variable\">$models</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomCollection</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$models</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Once you have defined a <code class=\" language-php\">newCollection</code> method, you will receive an instance of your custom collection anytime Eloquent returns a <code class=\" language-php\">Collection</code> instance of that model. If you would like to use a custom collection for every model in your application, you should override the <code class=\" language-php\">newCollection</code> method on a model base class that is extended by all of your models.</p>', 1, 1, 1, NULL, '2019-08-28 12:42:57', '2019-08-28 12:42:57');
INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(21, NULL, 10, 41, 42, 0, 'Release Notes', 'release_notes', 'Et a dolores voluptas cumque quasi et aperiam nulla suscipit tenetur amet odio rerum debitis ut et', '<p><a name=\"support-policy\"></a></p>\r\n<h2><a href=\"#support-policy\">Support Policy</a></h2>\r\n<hr/>\r\n<p>For LTS releases, such as Laravel 5.1, bug fixes are provided for 2 years and security fixes are provided for 3 years. These releases provide the longest window of support and maintenance.</p>\r\n<p>For general releases, bug fixes are provided for 6 months and security fixes are provided for 1 year.</p>\r\n<p><a name=\"laravel-5.1\"></a></p>\r\n<h2><a href=\"#laravel-5.1\">Laravel 5.1</a></h2>\r\n<hr/>\r\n<p>Laravel 5.1 continues the improvements made in Laravel 5.0 by adopting PSR-2 and adding event broadcasting, middleware parameters, Artisan improvements, and more.</p>\r\n<h3>PHP 5.5.9+</h3>\r\n<p>Since PHP 5.4 will enter \"end of life\" in September and will no longer receive security updates from the PHP development team, Laravel 5.1 requires PHP 5.5.9 or greater. PHP 5.5.9 allows compatibility with the latest versions of popular PHP libraries such as Guzzle and the AWS SDK.</p>\r\n<h3>LTS</h3>\r\n<p>Laravel 5.1 is the first release of Laravel to receive <strong>long term support</strong>. Laravel 5.1 will receive bug fixes for 2 years and security fixes for 3 years. This support window is the largest ever provided for Laravel and provides stability and peace of mind for larger, enterprise clients and customers.</p>\r\n<h3>PSR-2</h3>\r\n<p>The <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\">PSR-2 coding style guide</a> has been adopted as the default style guide for the Laravel framework. Additionally, all generators have been updated to generate PSR-2 compatible syntax.</p>\r\n<h3>Documentation</h3>\r\n<p>Every page of the Laravel documentation has been meticulously reviewed and dramatically improved. All code examples have also been reviewed and expanded to provide more relevance and context.</p>\r\n<h3>Event Broadcasting</h3>\r\n<p>In many modern web applications, web sockets are used to implement real-time, live-updating user interfaces. When some data is updated on the server, a message is typically sent over a websocket connection to be handled by the client.</p>\r\n<p>To assist you in building these types of applications, Laravel makes it easy to \"broadcast\" your events over a websocket connection. Broadcasting your Laravel events allows you to share the same event names between your server-side code and your client-side JavaScript framework.</p>\r\n<p>To learn more about event broadcasting, check out the <a href=\"events.html#broadcasting-events\">event documentation</a></p>\r\n<h3>Middleware Parameters</h3>\r\n<p>Middleware can now receive additional custom parameters. For example, if your application needs to verify that the authenticated user has a given \"role\" before performing a given action, you could create a <code class=\" language-php\">RoleMiddleware</code> that receives a role name as an additional argument:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RoleMiddleware</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Run the request filter.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Closure  $next\r\n     * @param  string  $role\r\n     * @return mixed\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasRole<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n           <span class=\"token comment\" spellcheck=\"true\"> // Redirect...\r\n</span>        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Middleware parameters may be specified when defining the route by separating the middleware name and parameters with a <code class=\" language-php\"><span class=\"token punctuation\">:</span></code>. Multiple parameters should be delimited by commas:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">put<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'post/{id}\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'middleware\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'role:editor\'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>For more information on middleware, check out the <a href=\"middleware.html\">middleware documentation</a>.</p>\r\n<h3>Testing Overhaul</h3>\r\n<p>The built-in testing capabilities of Laravel have been dramatically improved. A variety of new methods provide a fluent, expressive interface for interacting with your application and examining its responses. For example, check out the following test:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testNewUserRegistration<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">visit<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'/register\'</span><span class=\"token punctuation\">)</span>\r\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">type<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'Taylor\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'name\'</span><span class=\"token punctuation\">)</span>\r\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">check<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'terms\'</span><span class=\"token punctuation\">)</span>\r\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">press<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'Register\'</span><span class=\"token punctuation\">)</span>\r\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">seePageIs<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'/dashboard\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>For more information on testing, check out the <a href=\"testing.html\">testing documentation</a>.</p>\r\n<h3>Artisan Improvements</h3>\r\n<p>Artisan commands may now be defined using a simple, route-like \"signature\", which provides an extremely simple interface for defining command line arguments and options. For example, you may define a simple command and its options like so:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\" spellcheck=\"true\">/**\r\n * The name and signature of the console command.\r\n *\r\n * @var string\r\n */</span>\r\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$signature</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'email:send {user} {--force}\'</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>For more information on defining Artisan commands, consult the <a href=\"artisan.html\">Artisan documentation</a>.</p>\r\n<h3>Folder Structure</h3>\r\n<p>To better express intent, the <code class=\" language-php\">app<span class=\"token operator\">/</span>Commands</code> directory has been renamed to <code class=\" language-php\">app<span class=\"token operator\">/</span>Jobs</code>. Additionally, the <code class=\" language-php\">app<span class=\"token operator\">/</span>Handlers</code> directory has been consolidated into a single <code class=\" language-php\">app<span class=\"token operator\">/</span>Listeners</code> directory which simply contains event listeners. However, this is not a breaking change and you are not required to update to the new folder structure to use Laravel 5.1.</p>\r\n<h3>Encryption</h3>\r\n<p>In previous versions of Laravel, encryption was handled by the <code class=\" language-php\">mcrypt</code> PHP extension. However, beginning in Laravel 5.1, encryption is handled by the <code class=\" language-php\">openssl</code> extension, which is more actively maintained.</p>\r\n<p><a name=\"laravel-5.0\"></a></p>\r\n<h2><a href=\"#laravel-5.0\">Laravel 5.0</a></h2>\r\n<p>Laravel 5.0 introduces a fresh application structure to the default Laravel project. This new structure serves as a better foundation for building a robust application in Laravel, as well as embraces new auto-loading standards (PSR-4) throughout the application. First, let\'s examine some of the major changes:</p>\r\n<h3>New Folder Structure</h3>\r\n<p>The old <code class=\" language-php\">app<span class=\"token operator\">/</span>models</code> directory has been entirely removed. Instead, all of your code lives directly within the <code class=\" language-php\">app</code> folder, and, by default, is organized to the <code class=\" language-php\">App</code> namespace. This default namespace can be quickly changed using the new <code class=\" language-php\">app<span class=\"token punctuation\">:</span>name</code> Artisan command.</p>\r\n<p>Controllers, middleware, and requests (a new type of class in Laravel 5.0) are now grouped under the <code class=\" language-php\">app<span class=\"token operator\">/</span>Http</code> directory, as they are all classes related to the HTTP transport layer of your application. Instead of a single, flat file of route filters, all middleware are now broken into their own class files.</p>\r\n<p>A new <code class=\" language-php\">app<span class=\"token operator\">/</span>Providers</code> directory replaces the <code class=\" language-php\">app<span class=\"token operator\">/</span>start</code> files from previous versions of Laravel 4.x. These service providers provide various bootstrapping functions to your application, such as error handling, logging, route loading, and more. Of course, you are free to create additional service providers for your application.</p>\r\n<p>Application language files and views have been moved to the <code class=\" language-php\">resources</code> directory.</p>\r\n<h3>Contracts</h3>\r\n<p>All major Laravel components implement interfaces which are located in the <code class=\" language-php\">illuminate<span class=\"token operator\">/</span>contracts</code> repository. This repository has no external dependencies. Having a convenient, centrally located set of interfaces you may use for decoupling and dependency injection will serve as an easy alternative option to Laravel Facades.</p>\r\n<p>For more information on contracts, consult the <a href=\"contracts.html\">full documentation</a>.</p>\r\n<h3>Route Cache</h3>\r\n<p>If your application is made up entirely of controller routes, you may utilize the new <code class=\" language-php\">route<span class=\"token punctuation\">:</span>cache</code> Artisan command to drastically speed up the registration of your routes. This is primarily useful on applications with 100+ routes and will <strong>drastically</strong> speed up this portion of your application.</p>\r\n<h3>Route Middleware</h3>\r\n<p>In addition to Laravel 4 style route \"filters\", Laravel 5 now supports HTTP middleware, and the included authentication and CSRF \"filters\" have been converted to middleware. Middleware provides a single, consistent interface to replace all types of filters, allowing you to easily inspect, and even reject, requests before they enter your application.</p>\r\n<p>For more information on middleware, check out <a href=\"middleware.html\">the documentation</a>.</p>\r\n<h3>Controller Method Injection</h3>\r\n<p>In addition to the existing constructor injection, you may now type-hint dependencies on controller methods. The <a href=\"container.html\">service container</a> will automatically inject the dependencies, even if the route contains other parameters:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createPost<span class=\"token punctuation\">(</span></span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> PostRepository <span class=\"token variable\">$posts</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<h3>Authentication Scaffolding</h3>\r\n<p>User registration, authentication, and password reset controllers are now included out of the box, as well as simple corresponding views, which are located at <code class=\" language-php\">resources<span class=\"token operator\">/</span>views<span class=\"token operator\">/</span>auth</code>. In addition, a \"users\" table migration has been included with the framework. Including these simple resources allows rapid development of application ideas without bogging down on authentication boilerplate. The authentication views may be accessed on the <code class=\" language-php\">auth<span class=\"token operator\">/</span>login</code> and <code class=\" language-php\">auth<span class=\"token operator\">/</span>register</code> routes. The <code class=\" language-php\">App\\<span class=\"token package\">Services<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Registrar</span></code> service is responsible for user validation and creation.</p>\r\n<h3>Event Objects</h3>\r\n<p>You may now define events as objects instead of simply using strings. For example, check out the following event:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PodcastWasPurchased</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$podcast</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct<span class=\"token punctuation\">(</span></span>Podcast <span class=\"token variable\">$podcast</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">podcast</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$podcast</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>The event may be dispatched like normal:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">Event<span class=\"token punctuation\">::</span></span><span class=\"token function\">fire<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PodcastWasPurchased</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$podcast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Of course, your event handler will receive the event object instead of a list of data:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReportPodcastPurchase</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle<span class=\"token punctuation\">(</span></span>PodcastWasPurchased <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n       <span class=\"token comment\" spellcheck=\"true\"> //\r\n</span>    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>For more information on working with events, check out the <a href=\"events.html\">full documentation</a>.</p>\r\n<h3>Commands / Queueing</h3>\r\n<p>In addition to the queue job format supported in Laravel 4, Laravel 5 allows you to represent your queued jobs as simple command objects. These commands live in the <code class=\" language-php\">app<span class=\"token operator\">/</span>Commands</code> directory. Here\'s a sample command:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PurchasePodcast</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Command</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SelfHandling</span><span class=\"token punctuation\">,</span> ShouldBeQueued\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">use</span> <span class=\"token package\">SerializesModels</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$podcast</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Create a new command instance.\r\n     *\r\n     * @return void\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct<span class=\"token punctuation\">(</span></span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> Podcast <span class=\"token variable\">$podcast</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">user</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">podcast</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$podcast</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\" spellcheck=\"true\">/**\r\n     * Execute the command.\r\n     *\r\n     * @return void\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n       <span class=\"token comment\" spellcheck=\"true\"> // Handle the logic to purchase the podcast...\r\n</span>\r\n        <span class=\"token function\">event<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PodcastWasPurchased</span><span class=\"token punctuation\">(</span><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">user</span><span class=\"token punctuation\">,</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">podcast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>The base Laravel controller utilizes the new <code class=\" language-php\">DispatchesCommands</code> trait, allowing you to easily dispatch your commands for execution:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dispatch<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PurchasePodcastCommand</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$podcast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Of course, you may also use commands for tasks that are executed synchronously (are not queued). In fact, using commands is a great way to encapsulate complex tasks your application needs to perform. For more information, check out the <a href=\"bus.html\">command bus</a> documentation.</p>\r\n<h3>Database Queue</h3>\r\n<p>A <code class=\" language-php\">database</code> queue driver is now included in Laravel, providing a simple, local queue driver that requires no extra package installation beyond your database software.</p>\r\n<h3>Laravel Scheduler</h3>\r\n<p>In the past, developers have generated a Cron entry for each console command they wished to schedule. However, this is a headache. Your console schedule is no longer in source control, and you must SSH into your server to add the Cron entries. Let\'s make our lives easier. The Laravel command scheduler allows you to fluently and expressively define your command schedule within Laravel itself, and only a single Cron entry is needed on your server.</p>\r\n<p>It looks like this:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'artisan:command\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dailyAt<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'15:00\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>Of course, check out the <a href=\"scheduling.html\">full documentation</a> to learn all about the scheduler!</p>\r\n<h3>Tinker / Psysh</h3>\r\n<p>The <code class=\" language-php\">php artisan tinker</code> command now utilizes <a href=\"https://github.com/bobthecow/psysh\">Psysh</a> by Justin Hileman, a more robust REPL for PHP. If you liked Boris in Laravel 4, you\'re going to love Psysh. Even better, it works on Windows! To get started, just try:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">php artisan tinker</code></pre>\r\n<h3>DotEnv</h3>\r\n<p>Instead of a variety of confusing, nested environment configuration directories, Laravel 5 now utilizes <a href=\"https://github.com/vlucas/phpdotenv\">DotEnv</a> by Vance Lucas. This library provides a super simple way to manage your environment configuration, and makes environment detection in Laravel 5 a breeze. For more details, check out the full <a href=\"installation.html#environment-configuration\">configuration documentation</a>.</p>\r\n<h3>Laravel Elixir</h3>\r\n<p>Laravel Elixir, by Jeffrey Way, provides a fluent, expressive interface to compiling and concatenating your assets. If you\'ve ever been intimidated by learning Grunt or Gulp, fear no more. Elixir makes it a cinch to get started using Gulp to compile your Less, Sass, and CoffeeScript. It can even run your tests for you!</p>\r\n<p>For more information on Elixir, check out the <a href=\"elixir.html\">full documentation</a>.</p>\r\n<h3>Laravel Socialite</h3>\r\n<p>Laravel Socialite is an optional, Laravel 5.0+ compatible package that provides totally painless authentication with OAuth providers. Currently, Socialite supports Facebook, Twitter, Google, and GitHub. Here\'s what it looks like:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">redirectForAuth<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token scope\">Socialize<span class=\"token punctuation\">::</span></span><span class=\"token function\">with<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'twitter\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">redirect<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getUserFromProvider<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Socialize<span class=\"token punctuation\">::</span></span><span class=\"token function\">with<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'twitter\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>No more spending hours writing OAuth authentication flows. Get started in minutes! The <a href=\"authentication.html#social-authentication\">full documentation</a> has all the details.</p>\r\n<h3>Flysystem Integration</h3>\r\n<p>Laravel now includes the powerful <a href=\"https://github.com/thephpleague/flysystem\">Flysystem</a> filesystem abstraction library, providing pain free integration with local, Amazon S3, and Rackspace cloud storage - all with one, unified and elegant API! Storing a file in Amazon S3 is now as simple as:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token scope\">Storage<span class=\"token punctuation\">::</span></span><span class=\"token function\">put<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'file.txt\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'contents\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>For more information on the Laravel Flysystem integration, consult the <a href=\"filesystem.html\">full documentation</a>.</p>\r\n<h3>Form Requests</h3>\r\n<p>Laravel 5.0 introduces <strong>form requests</strong>, which extend the <code class=\" language-php\">Illuminate\\<span class=\"token package\">Foundation<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>FormRequest</span></code> class. These request objects can be combined with controller method injection to provide a boiler-plate free method of validating user input. Let\'s dig in and look at a sample <code class=\" language-php\">FormRequest</code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Requests</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RegisterRequest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FormRequest</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">rules<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\r\n            <span class=\"token string\">\'email\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'required|email|unique:users\'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">\'password\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'required|confirmed|min:8\'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">authorize<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Once the class has been defined, we can type-hint it on our controller action:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register<span class=\"token punctuation\">(</span></span>RegisterRequest <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">var_dump<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>When the Laravel service container identifies that the class it is injecting is a <code class=\" language-php\">FormRequest</code> instance, the request will <strong>automatically be validated</strong>. This means that if your controller action is called, you can safely assume the HTTP request input has been validated according to the rules you specified in your form request class. Even more, if the request is invalid, an HTTP redirect, which you may customize, will automatically be issued, and the error messages will be either flashed to the session or converted to JSON. <strong>Form validation has never been more simple.</strong> For more information on <code class=\" language-php\">FormRequest</code> validation, check out the <a href=\"validation.html#form-request-validation\">documentation</a>.</p>\r\n<h3>Simple Controller Request Validation</h3>\r\n<p>The Laravel 5 base controller now includes a <code class=\" language-php\">ValidatesRequests</code> trait. This trait provides a simple <code class=\" language-php\">validate</code> method to validate incoming requests. If <code class=\" language-php\">FormRequests</code> are a little too much for your application, check this out:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createPost<span class=\"token punctuation\">(</span></span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\r\n        <span class=\"token string\">\'title\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'required|max:255\'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token string\">\'body\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'required\'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>If the validation fails, an exception will be thrown and the proper HTTP response will automatically be sent back to the browser. The validation errors will even be flashed to the session! If the request was an AJAX request, Laravel even takes care of sending a JSON representation of the validation errors back to you.</p>\r\n<p>For more information on this new method, check out <a href=\"validation.html#controller-validation\">the documentation</a>.</p>\r\n<h3>New Generators</h3>\r\n<p>To complement the new default application structure, new Artisan generator commands have been added to the framework. See <code class=\" language-php\">php artisan list</code> for more details.</p>\r\n<h3>Configuration Cache</h3>\r\n<p>You may now cache all of your configuration in a single file using the <code class=\" language-php\">config<span class=\"token punctuation\">:</span>cache</code> command.</p>\r\n<h3>Symfony VarDumper</h3>\r\n<p>The popular <code class=\" language-php\">dd</code> helper function, which dumps variable debug information, has been upgraded to use the amazing Symfony VarDumper. This provides color-coded output and even collapsing of arrays. Just try the following in your project:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">dd<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"laravel-4.2\"></a></p>\r\n<h2><a href=\"#laravel-4.2\">Laravel 4.2</a></h2>\r\n<p>The full change list for this release by running the <code class=\" language-php\">php artisan changes</code> command from a 4.2 installation, or by <a href=\"https://github.com/laravel/framework/blob/4.2/src/Illuminate/Foundation/changes.json\">viewing the change file on Github</a>. These notes only cover the major enhancements and changes for the release.</p>\r\n<blockquote>\r\n<p><strong>Note:</strong> During the 4.2 release cycle, many small bug fixes and enhancements were incorporated into the various Laravel 4.1 point releases. So, be sure to check the change list for Laravel 4.1 as well!</p>\r\n</blockquote>\r\n<h3>PHP 5.4 Requirement</h3>\r\n<p>Laravel 4.2 requires PHP 5.4 or greater. This upgraded PHP requirement allows us to use new PHP features such as traits to provide more expressive interfaces for tools like <a href=\"../billing.html\">Laravel Cashier</a>. PHP 5.4 also brings significant speed and performance improvements over PHP 5.3.</p>\r\n<h3>Laravel Forge</h3>\r\n<p>Laravel Forge, a new web based application, provides a simple way to create and manage PHP servers on the cloud of your choice, including Linode, DigitalOcean, Rackspace, and Amazon EC2. Supporting automated Nginx configuration, SSH key access, Cron job automation, server monitoring via NewRelic &amp; Papertrail, \"Push To Deploy\", Laravel queue worker configuration, and more, Forge provides the simplest and most affordable way to launch all of your Laravel applications.</p>\r\n<p>The default Laravel 4.2 installation\'s <code class=\" language-php\">app<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>database<span class=\"token punctuation\">.</span>php</code> configuration file is now configured for Forge usage by default, allowing for more convenient deployment of fresh applications onto the platform.</p>\r\n<p>More information about Laravel Forge can be found on the <a href=\"https://forge.laravel.com\">official Forge website</a>.</p>\r\n<h3>Laravel Homestead</h3>\r\n<p>Laravel Homestead is an official Vagrant environment for developing robust Laravel and PHP applications. The vast majority of the boxes\' provisioning needs are handled before the box is packaged for distribution, allowing the box to boot extremely quickly. Homestead includes Nginx 1.6, PHP 5.6, MySQL, Postgres, Redis, Memcached, Beanstalk, Node, Gulp, Grunt, &amp; Bower. Homestead includes a simple <code class=\" language-php\">Homestead<span class=\"token punctuation\">.</span>yaml</code> configuration file for managing multiple Laravel applications on a single box.</p>\r\n<p>The default Laravel 4.2 installation now includes an <code class=\" language-php\">app<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>database<span class=\"token punctuation\">.</span>php</code> configuration file that is configured to use the Homestead database out of the box, making Laravel initial installation and configuration more convenient.</p>\r\n<p>The official documentation has also been updated to include <a href=\"../homestead.html\">Homestead documentation</a>.</p>\r\n<h3>Laravel Cashier</h3>\r\n<p>Laravel Cashier is a simple, expressive library for managing subscription billing with Stripe. With the introduction of Laravel 4.2, we are including Cashier documentation along with the main Laravel documentation, though installation of the component itself is still optional. This release of Cashier brings numerous bug fixes, multi-currency support, and compatibility with the latest Stripe API.</p>\r\n<h3>Daemon Queue Workers</h3>\r\n<p>The Artisan <code class=\" language-php\">queue<span class=\"token punctuation\">:</span>work</code> command now supports a <code class=\" language-php\"><span class=\"token operator\">--</span>daemon</code> option to start a worker in \"daemon mode\", meaning the worker will continue to process jobs without ever re-booting the framework. This results in a significant reduction in CPU usage at the cost of a slightly more complex application deployment process.</p>\r\n<p>More information about daemon queue workers can be found in the <a href=\"../queues.html#daemon-queue-worker\">queue documentation</a>.</p>\r\n<h3>Mail API Drivers</h3>\r\n<p>Laravel 4.2 introduces new Mailgun and Mandrill API drivers for the <code class=\" language-php\">Mail</code> functions. For many applications, this provides a faster and more reliable method of sending e-mails than the SMTP options. The new drivers utilize the Guzzle 4 HTTP library.</p>\r\n<h3>Soft Deleting Traits</h3>\r\n<p>A much cleaner architecture for \"soft deletes\" and other \"global scopes\" has been introduced via PHP 5.4 traits. This new architecture allows for the easier construction of similar global traits, and a cleaner separation of concerns within the framework itself.</p>\r\n<p>More information on the new <code class=\" language-php\">SoftDeletingTrait</code> may be found in the <a href=\"../eloquent.html#soft-deleting\">Eloquent documentation</a>.</p>\r\n<h3>Convenient Auth &amp; Remindable Traits</h3>\r\n<p>The default Laravel 4.2 installation now uses simple traits for including the needed properties for the authentication and password reminder user interfaces. This provides a much cleaner default <code class=\" language-php\">User</code> model file out of the box.</p>\r\n<h3>\"Simple Paginate\"</h3>\r\n<p>A new <code class=\" language-php\">simplePaginate</code> method was added to the query and Eloquent builder which allows for more efficient queries when using simple \"Next\" and \"Previous\" links in your pagination view.</p>\r\n<h3>Migration Confirmation</h3>\r\n<p>In production, destructive migration operations will now ask for confirmation. Commands may be forced to run without any prompts using the <code class=\" language-php\"><span class=\"token operator\">--</span>force</code> command.</p>\r\n<p><a name=\"laravel-4.1\"></a></p>\r\n<h2><a href=\"#laravel-4.1\">Laravel 4.1</a></h2>\r\n<h3>Full Change List</h3>\r\n<p>The full change list for this release by running the <code class=\" language-php\">php artisan changes</code> command from a 4.1 installation, or by <a href=\"https://github.com/laravel/framework/blob/4.1/src/Illuminate/Foundation/changes.json\">viewing the change file on Github</a>. These notes only cover the major enhancements and changes for the release.</p>\r\n<h3>New SSH Component</h3>\r\n<p>An entirely new <code class=\" language-php\"><span class=\"token constant\">SSH</span></code> component has been introduced with this release. This feature allows you to easily SSH into remote servers and run commands. To learn more, consult the <a href=\"../ssh.html\">SSH component documentation</a>.</p>\r\n<p>The new <code class=\" language-php\">php artisan tail</code> command utilizes the new SSH component. For more information, consult the <code class=\" language-php\">tail</code> <a href=\"../ssh.html#tailing-remote-logs\">command documentation</a>.</p>\r\n<h3>Boris In Tinker</h3>\r\n<p>The <code class=\" language-php\">php artisan tinker</code> command now utilizes the <a href=\"https://github.com/d11wtq/boris\">Boris REPL</a> if your system supports it. The <code class=\" language-php\">readline</code> and <code class=\" language-php\">pcntl</code> PHP extensions must be installed to use this feature. If you do not have these extensions, the shell from 4.0 will be used.</p>\r\n<h3>Eloquent Improvements</h3>\r\n<p>A new <code class=\" language-php\">hasManyThrough</code> relationship has been added to Eloquent. To learn how to use it, consult the <a href=\"../eloquent.html#has-many-through\">Eloquent documentation</a>.</p>\r\n<p>A new <code class=\" language-php\">whereHas</code> method has also been introduced to allow <a href=\"../eloquent.html#querying-relations\">retrieving models based on relationship constraints</a>.</p>\r\n<h3>Database Read / Write Connections</h3>\r\n<p>Automatic handling of separate read / write connections is now available throughout the database layer, including the query builder and Eloquent. For more information, consult <a href=\"../database.html#read-write-connections\">the documentation</a>.</p>\r\n<h3>Queue Priority</h3>\r\n<p>Queue priorities are now supported by passing a comma-delimited list to the <code class=\" language-php\">queue<span class=\"token punctuation\">:</span>listen</code> command.</p>\r\n<h3>Failed Queue Job Handling</h3>\r\n<p>The queue facilities now include automatic handling of failed jobs when using the new <code class=\" language-php\"><span class=\"token operator\">--</span>tries</code> switch on <code class=\" language-php\">queue<span class=\"token punctuation\">:</span>listen</code>. More information on handling failed jobs can be found in the <a href=\"../queues.html#failed-jobs\">queue documentation</a>.</p>\r\n<h3>Cache Tags</h3>\r\n<p>Cache \"sections\" have been superseded by \"tags\". Cache tags allow you to assign multiple \"tags\" to a cache item, and flush all items assigned to a single tag. More information on using cache tags may be found in the <a href=\"../cache.html#cache-tags\">cache documentation</a>.</p>\r\n<h3>Flexible Password Reminders</h3>\r\n<p>The password reminder engine has been changed to provide greater developer flexibility when validating passwords, flashing status messages to the session, etc. For more information on using the enhanced password reminder engine, <a href=\"../security.html#password-reminders-and-reset\">consult the documentation</a>.</p>\r\n<h3>Improved Routing Engine</h3>\r\n<p>Laravel 4.1 features a totally re-written routing layer. The API is the same; however, registering routes is a full 100% faster compared to 4.0. The entire engine has been greatly simplified, and the dependency on Symfony Routing has been minimized to the compiling of route expressions.</p>\r\n<h3>Improved Session Engine</h3>\r\n<p>With this release, we\'re also introducing an entirely new session engine. Similar to the routing improvements, the new session layer is leaner and faster. We are no longer using Symfony\'s (and therefore PHP\'s) session handling facilities, and are using a custom solution that is simpler and easier to maintain.</p>\r\n<h3>Doctrine DBAL</h3>\r\n<p>If you are using the <code class=\" language-php\">renameColumn</code> function in your migrations, you will need to add the <code class=\" language-php\">doctrine<span class=\"token operator\">/</span>dbal</code> dependency to your <code class=\" language-php\">composer<span class=\"token punctuation\">.</span>json</code> file. This package is no longer included in Laravel by default.</p>', 1, 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58');
INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(22, NULL, 11, 43, 44, 0, 'Upgrade Guide', 'upgrade_guide', 'In pariatur Aute non veniam iure quasi esse veritatis', '<p><a name=\"upgrade-5.1.0\"></a></p>\r\n<h2><a href=\"#upgrade-5.1.0\">Upgrading To 5.1.0</a></h2>\r\n<hr/>\r\n<h4>Estimated Upgrade Time: Less Than 1 Hour</h4>\r\n<h3>Update <code class=\" language-php\">bootstrap<span class=\"token operator\">/</span>autoload<span class=\"token punctuation\">.</span>php</code></h3>\r\n<p>Update the <code class=\" language-php\"><span class=\"token variable\">$compiledPath</span></code> variable in <code class=\" language-php\">bootstrap<span class=\"token operator\">/</span>autoload<span class=\"token punctuation\">.</span>php</code> to the following:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$compiledPath</span> <span class=\"token operator\">=</span> <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token string\">\'/cache/compiled.php\'</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h3>Create <code class=\" language-php\">bootstrap<span class=\"token operator\">/</span>cache</code> Directory</h3>\r\n<p>Within your <code class=\" language-php\">bootstrap</code> directory, create a <code class=\" language-php\">cache</code> directory (<code class=\" language-php\">bootstrap<span class=\"token operator\">/</span>cache</code>). Place a <code class=\" language-php\"><span class=\"token punctuation\">.</span>gitignore</code> file in this directory with the following contents:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">*</span>\r\n<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>gitignore</code></pre>\r\n<p>This directory should be writable, and will be used by the framework to store temporary optimization files like <code class=\" language-php\">compiled<span class=\"token punctuation\">.</span>php</code>, <code class=\" language-php\">routes<span class=\"token punctuation\">.</span>php</code>, <code class=\" language-php\">config<span class=\"token punctuation\">.</span>php</code>, and <code class=\" language-php\">services<span class=\"token punctuation\">.</span>json</code>.</p>\r\n<h3>Authentication</h3>\r\n<p>If you are using the provided <code class=\" language-php\">AuthController</code> which uses the <code class=\" language-php\">AuthenticatesAndRegistersUsers</code> trait, you will need to make a few changes to how new users are validated and created.</p>\r\n<p>First, you no longer need to pass the <code class=\" language-php\">Guard</code> and <code class=\" language-php\">Registrar</code> instances to the base constructor. You can remove these dependencies entirely from your controller\'s constructor.</p>\r\n<p>Secondly, the <code class=\" language-php\">App\\<span class=\"token package\">Services<span class=\"token punctuation\">\\</span>Registrar</span></code> class used in Laravel 5.0 is no longer needed. You can simply copy and paste your <code class=\" language-php\">validator</code> and <code class=\" language-php\">create</code> method from this class directly into your <code class=\" language-php\">AuthController</code>. No other changes should need to be made to these methods; however, you should be sure to import the <code class=\" language-php\">Validator</code> facade and your <code class=\" language-php\">User</code> model at the top of your <code class=\" language-php\">AuthController</code>.</p>\r\n<h3>Validation</h3>\r\n<p>If you are overriding the <code class=\" language-php\">formatValidationErrors</code> method on your base controller class, you should now type-hint the <code class=\" language-php\">Illuminate\\<span class=\"token package\">Contracts<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Validator</span></code> contract instead of the concrete <code class=\" language-php\">Illuminate\\<span class=\"token package\">Validation<span class=\"token punctuation\">\\</span>Validator</span></code> instance.</p>\r\n<p>Likewise, if you are overriding the <code class=\" language-php\">formatErrors</code> method on the base form request class, you should now type-hint <code class=\" language-php\">Illuminate\\<span class=\"token package\">Contracts<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Validator</span></code> contract instead of the concrete <code class=\" language-php\">Illuminate\\<span class=\"token package\">Validation<span class=\"token punctuation\">\\</span>Validator</span></code> instance.</p>\r\n<h3>Eloquent</h3>\r\n<h4>The <code class=\" language-php\">create</code> Method</h4>\r\n<p>Eloquent\'s <code class=\" language-php\">create</code> method can now be called without any parameters. If you are overriding the <code class=\" language-php\">create</code> method in your own models, set the default value of the <code class=\" language-php\"><span class=\"token variable\">$attributes</span></code> parameter to an array:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">array</span> <span class=\"token variable\">$attributes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n   <span class=\"token comment\" spellcheck=\"true\"> // Your custom implementation\r\n</span><span class=\"token punctuation\">}</span></code></pre>\r\n<h4>The <code class=\" language-php\">find</code> Method</h4>\r\n<p>If you are overriding the <code class=\" language-php\">find</code> method in your own models and calling <code class=\" language-php\"><span class=\"token scope\"><span class=\"token keyword\">parent</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> within your custom method, you should now change it to call the <code class=\" language-php\">find</code> method on the Eloquent query builder:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$columns</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'*\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token variable\">$model</span> <span class=\"token operator\">=</span> <span class=\"token scope\"><span class=\"token keyword\">static</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">query<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">find<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$columns</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n   <span class=\"token comment\" spellcheck=\"true\"> // ...\r\n</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$model</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<h4>Date Formatting</h4>\r\n<p>Previously, the storage format for Eloquent date fields could be modified by overriding the <code class=\" language-php\">getDateFormat</code> method on your model. This is still possible; however, for convenience you may simply specify a <code class=\" language-php\"><span class=\"token variable\">$dateFormat</span></code> property on the model instead of overriding the method.</p>\r\n<p>The date format is also now applied when serializing a model to an <code class=\" language-php\"><span class=\"token keyword\">array</span></code> or JSON. This may change the format of your JSON serialized date fields when migrating from Laravel 5.0 to 5.1. To set a specific date format for serialized models, you may override the <code class=\" language-php\"><span class=\"token function\">serializeDate<span class=\"token punctuation\">(</span></span>DateTime <span class=\"token variable\">$date</span><span class=\"token punctuation\">)</span></code> method on your model. This method allows you to have granular control over the formatting of serialized Eloquent date fields without changing their storage format.</p>\r\n<h3>The Collection Class</h3>\r\n<h4>The <code class=\" language-php\">sortBy</code> method:</h4>\r\n<p>The <code class=\" language-php\">sortBy</code> method now returns a fresh collection instance instead of modifying the existing collection:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sortBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>The <code class=\" language-php\">groupBy</code> Method</h4>\r\n<p>The <code class=\" language-php\">groupBy</code> method now returns <code class=\" language-php\">Collection</code> instances for each item in the parent <code class=\" language-php\">Collection</code>. If you would like to convert all of the items back to plain arrays, you may <code class=\" language-php\">map</code> over them:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'type\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">map<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h4>The <code class=\" language-php\">lists</code> Method</h4>\r\n<p>The <code class=\" language-php\">lists</code> method now returns a <code class=\" language-php\">Collection</code> instance. If you would like to convert the <code class=\" language-php\">Collection</code> into a plain array, use the <code class=\" language-php\">all</code> method:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lists<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'id\'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h3>Commands &amp; Handlers</h3>\r\n<p>The <code class=\" language-php\">app<span class=\"token operator\">/</span>Commands</code> directory has been renamed to <code class=\" language-php\">app<span class=\"token operator\">/</span>Jobs</code>. However, you are not required to move all of your commands to the new location, and you may continue using the <code class=\" language-php\">make<span class=\"token punctuation\">:</span>command</code> and <code class=\" language-php\">handler<span class=\"token punctuation\">:</span>command</code> Artisan commands to generate your classes.</p>\r\n<p>Likewise, the <code class=\" language-php\">app<span class=\"token operator\">/</span>Handlers</code> directory has been renamed to <code class=\" language-php\">app<span class=\"token operator\">/</span>Listeners</code> and now only contains event listeners. However, you are not required to move or rename your existing command and event handlers, and you may continue to use the <code class=\" language-php\">handler<span class=\"token punctuation\">:</span>event</code> command to generate event handlers.</p>\r\n<p>By providing backwards compatibility for the Laravel 5.0 folder structure, you may upgrade your applications to Laravel 5.1 and slowly upgrade your events and commands to their new locations when it is convenient for you or your team.</p>\r\n<h3>Amazon Web Services SDK</h3>\r\n<p>If you are using the AWS SQS queue driver or the AWS SES e-mail driver, you should update your installed AWS PHP SDK to version 3.0.</p>\r\n<h3>Deprecations</h3>\r\n<p>The following Laravel features have been deprecated and will be removed entirely with the release of Laravel 5.2 in December 2015:</p>\r\n<div class=\"content-list\">\r\n<ul>\r\n<li>Route filters have been deprecated in preference of <a href=\"middleware.html\">middleware</a>.</li>\r\n<li>The <code class=\" language-php\">Illuminate\\<span class=\"token package\">Contracts<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware</span></code> contract has been deprecated. No contract is required on your middleware. In addition, the <code class=\" language-php\">TerminableMiddleware</code> has been deprecated. Instead of implementing the interface, simply define a <code class=\" language-php\">terminate</code> method on your middleware.</li>\r\n<li>The <code class=\" language-php\">Illuminate\\<span class=\"token package\">Contracts<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>ShouldBeQueued</span></code> contract has been deprecated in favor of <code class=\" language-php\">Illuminate\\<span class=\"token package\">Contracts<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>ShouldQueue</span></code>.</li>\r\n<li>Iron.io \"push queues\" have been deprecated in favor of typical Iron.io queues and <a href=\"queues.html#running-the-queue-listener\">queue listeners</a>.</li>\r\n<li>The <code class=\" language-php\">Illuminate\\<span class=\"token package\">Foundation<span class=\"token punctuation\">\\</span>Bus<span class=\"token punctuation\">\\</span>DispatchesCommands</span></code> trait has been deprecated and renamed to <code class=\" language-php\">Illuminate\\<span class=\"token package\">Foundation<span class=\"token punctuation\">\\</span>Bus<span class=\"token punctuation\">\\</span>DispatchesJobs</span></code>.</li>\r\n<li><code class=\" language-php\">Illuminate\\<span class=\"token package\">Container<span class=\"token punctuation\">\\</span>BindingResolutionException</span></code> has been moved to <code class=\" language-php\">Illuminate\\<span class=\"token package\">Contracts<span class=\"token punctuation\">\\</span>Container<span class=\"token punctuation\">\\</span>BindingResolutionException</span></code>.</li>\r\n<li>The service container\'s <code class=\" language-php\">bindShared</code> method has been deprecated in favor of the <code class=\" language-php\">singleton</code> method.</li>\r\n<li>The Eloquent and query builder <code class=\" language-php\">pluck</code> method has been deprecated and renamed to <code class=\" language-php\">value</code>.</li>\r\n<li>The collection <code class=\" language-php\">fetch</code> method has been deprecated in favor of the <code class=\" language-php\">pluck</code> method.</li>\r\n<li>The <code class=\" language-php\">array_fetch</code> helper has been deprecated in favor of the <code class=\" language-php\">array_pluck</code> method.</li>\r\n</ul>\r\n</div>\r\n<p><a name=\"upgrade-5.0.16\"></a></p>\r\n<h2><a href=\"#upgrade-5.0.16\">Upgrading To 5.0.16</a></h2>\r\n<p>In your <code class=\" language-php\">bootstrap<span class=\"token operator\">/</span>autoload<span class=\"token punctuation\">.</span>php</code> file, update the <code class=\" language-php\"><span class=\"token variable\">$compiledPath</span></code> variable to:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$compiledPath</span> <span class=\"token operator\">=</span> <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token string\">\'/../vendor/compiled.php\'</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><a name=\"upgrade-5.0\"></a></p>\r\n<h2><a href=\"#upgrade-5.0\">Upgrading To 5.0 From 4.2</a></h2>\r\n<h3>Fresh Install, Then Migrate</h3>\r\n<p>The recommended method of upgrading is to create a new Laravel <code class=\" language-php\"><span class=\"token number\">5.0</span></code> install and then to copy your <code class=\" language-php\"><span class=\"token number\">4.2</span></code> site\'s unique application files into the new application. This would include controllers, routes, Eloquent models, Artisan commands, assets, and other code specific to your application.</p>\r\n<p>To start, <a href=\"installation.html\">install a new Laravel 5 application</a> into a fresh directory in your local environment. We\'ll discuss each piece of the migration process in further detail below.</p>\r\n<h3>Composer Dependencies &amp; Packages</h3>\r\n<p>Don\'t forget to copy any additional Composer dependencies into your 5.0 application. This includes third-party code such as SDKs.</p>\r\n<p>Some Laravel-specific packages may not be compatible with Laravel 5 on initial release. Check with your package\'s maintainer to determine the proper version of the package for Laravel 5. Once you have added any additional Composer dependencies your application needs, run <code class=\" language-php\">composer update</code>.</p>\r\n<h3>Namespacing</h3>\r\n<p>By default, Laravel 4 applications did not utilize namespacing within your application code. So, for example, all Eloquent models and controllers simply lived in the \"global\" namespace. For a quicker migration, you can simply leave these classes in the global namespace in Laravel 5 as well.</p>\r\n<h3>Configuration</h3>\r\n<h4>Migrating Environment Variables</h4>\r\n<p>Copy the new <code class=\" language-php\"><span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>example</code> file to <code class=\" language-php\"><span class=\"token punctuation\">.</span>env</code>, which is the <code class=\" language-php\"><span class=\"token number\">5.0</span></code> equivalent of the old <code class=\" language-php\"><span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>php</code> file. Set any appropriate values there, like your <code class=\" language-php\"><span class=\"token constant\">APP_ENV</span></code> and <code class=\" language-php\"><span class=\"token constant\">APP_KEY</span></code> (your encryption key), your database credentials, and your cache and session drivers.</p>\r\n<p>Additionally, copy any custom values you had in your old <code class=\" language-php\"><span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>php</code> file and place them in both <code class=\" language-php\"><span class=\"token punctuation\">.</span>env</code> (the real value for your local environment) and <code class=\" language-php\"><span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>example</code> (a sample instructional value for other team members).</p>\r\n<p>For more information on environment configuration, view the <a href=\"installation.html#environment-configuration\">full documentation</a>.</p>\r\n<blockquote>\r\n<p><strong>Note:</strong> You will need to place the appropriate <code class=\" language-php\"><span class=\"token punctuation\">.</span>env</code> file and values on your production server before deploying your Laravel 5 application.</p>\r\n</blockquote>\r\n<h4>Configuration Files</h4>\r\n<p>Laravel 5.0 no longer uses <code class=\" language-php\">app<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>environmentName<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span></code> directories to provide specific configuration files for a given environment. Instead, move any configuration values that vary by environment into <code class=\" language-php\"><span class=\"token punctuation\">.</span>env</code>, and then access them in your configuration files using <code class=\" language-php\"><span class=\"token function\">env<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'key\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'default value\'</span><span class=\"token punctuation\">)</span></code>. You will see examples of this in the <code class=\" language-php\">config<span class=\"token operator\">/</span>database<span class=\"token punctuation\">.</span>php</code> configuration file.</p>\r\n<p>Set the config files in the <code class=\" language-php\">config<span class=\"token operator\">/</span></code> directory to represent either the values that are consistent across all of your environments, or set them to use <code class=\" language-php\"><span class=\"token function\">env<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> to load values that vary by environment.</p>\r\n<p>Remember, if you add more keys to <code class=\" language-php\"><span class=\"token punctuation\">.</span>env</code> file, add sample values to the <code class=\" language-php\"><span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>example</code> file as well. This will help your other team members create their own <code class=\" language-php\"><span class=\"token punctuation\">.</span>env</code> files.</p>\r\n<h3>Routes</h3>\r\n<p>Copy and paste your old <code class=\" language-php\">routes<span class=\"token punctuation\">.</span>php</code> file into your new <code class=\" language-php\">app<span class=\"token operator\">/</span>Http<span class=\"token operator\">/</span>routes<span class=\"token punctuation\">.</span>php</code>.</p>\r\n<h3>Controllers</h3>\r\n<p>Next, move all of your controllers into the <code class=\" language-php\">app<span class=\"token operator\">/</span>Http<span class=\"token operator\">/</span>Controllers</code> directory. Since we are not going to migrate to full namespacing in this guide, add the <code class=\" language-php\">app<span class=\"token operator\">/</span>Http<span class=\"token operator\">/</span>Controllers</code> directory to the <code class=\" language-php\">classmap</code> directive of your <code class=\" language-php\">composer<span class=\"token punctuation\">.</span>json</code> file. Next, you can remove the namespace from the abstract <code class=\" language-php\">app<span class=\"token operator\">/</span>Http<span class=\"token operator\">/</span>Controllers<span class=\"token operator\">/</span>Controller<span class=\"token punctuation\">.</span>php</code> base class. Verify that your migrated controllers are extending this base class.</p>\r\n<p>In your <code class=\" language-php\">app<span class=\"token operator\">/</span>Providers<span class=\"token operator\">/</span>RouteServiceProvider<span class=\"token punctuation\">.</span>php</code> file, set the <code class=\" language-php\"><span class=\"token keyword\">namespace</span></code> property to <code class=\" language-php\"><span class=\"token keyword\">null</span></code>.</p>\r\n<h3>Route Filters</h3>\r\n<p>Copy your filter bindings from <code class=\" language-php\">app<span class=\"token operator\">/</span>filters<span class=\"token punctuation\">.</span>php</code> and place them into the <code class=\" language-php\"><span class=\"token function\">boot<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> method of <code class=\" language-php\">app<span class=\"token operator\">/</span>Providers<span class=\"token operator\">/</span>RouteServiceProvider<span class=\"token punctuation\">.</span>php</code>. Add <code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span></code> in the <code class=\" language-php\">app<span class=\"token operator\">/</span>Providers<span class=\"token operator\">/</span>RouteServiceProvider<span class=\"token punctuation\">.</span>php</code> in order to continue using the <code class=\" language-php\">Route</code> Facade.</p>\r\n<p>You do not need to move over any of the default Laravel 4.0 filters such as <code class=\" language-php\">auth</code> and <code class=\" language-php\">csrf</code>; they\'re all here, but as middleware. Edit any routes or controllers that reference the old default filters (e.g. <code class=\" language-php\"><span class=\"token punctuation\">[</span><span class=\"token string\">\'before\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'auth\'</span><span class=\"token punctuation\">]</span></code>) and change them to reference the new middleware (e.g. <code class=\" language-php\"><span class=\"token punctuation\">[</span><span class=\"token string\">\'middleware\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'auth\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span></code>)</p>\r\n<p>Filters are not removed in Laravel 5. You can still bind and use your own custom filters using <code class=\" language-php\">before</code> and <code class=\" language-php\">after</code>.</p>\r\n<h3>Global CSRF</h3>\r\n<p>By default, <a href=\"routing.html#csrf-protection\">CSRF protection</a> is enabled on all routes. If you\'d like to disable this, or only manually enable it on certain routes, remove this line from <code class=\" language-php\">App\\<span class=\"token package\">Http<span class=\"token punctuation\">\\</span>Kernel</span></code>\'s <code class=\" language-php\">middleware</code> array:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token string\">\'App\\Http\\Middleware\\VerifyCsrfToken\'</span><span class=\"token punctuation\">,</span></code></pre>\r\n<p>If you want to use it elsewhere, add this line to <code class=\" language-php\"><span class=\"token variable\">$routeMiddleware</span></code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token string\">\'csrf\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'App\\Http\\Middleware\\VerifyCsrfToken\'</span><span class=\"token punctuation\">,</span></code></pre>\r\n<p>Now you can add the middleware to individual routes / controllers using <code class=\" language-php\"><span class=\"token punctuation\">[</span><span class=\"token string\">\'middleware\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'csrf\'</span><span class=\"token punctuation\">]</span></code> on the route. For more information on middleware, consult the <a href=\"middleware.html\">full documentation</a>.</p>\r\n<h3>Eloquent Models</h3>\r\n<p>Feel free to create a new <code class=\" language-php\">app<span class=\"token operator\">/</span>Models</code> directory to house your Eloquent models. Again, add this directory to the <code class=\" language-php\">classmap</code> directive of your <code class=\" language-php\">composer<span class=\"token punctuation\">.</span>json</code> file.</p>\r\n<p>Update any models using <code class=\" language-php\">SoftDeletingTrait</code> to use <code class=\" language-php\">Illuminate\\<span class=\"token package\">Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>SoftDeletes</span></code>.</p>\r\n<h4>Eloquent Caching</h4>\r\n<p>Eloquent no longer provides the <code class=\" language-php\">remember</code> method for caching queries. You now are responsible for caching your queries manually using the <code class=\" language-php\"><span class=\"token scope\">Cache<span class=\"token punctuation\">::</span></span>remember</code> function. For more information on caching, consult the <a href=\"cache.html\">full documentation</a>.</p>\r\n<h3>User Authentication Model</h3>\r\n<p>To upgrade your <code class=\" language-php\">User</code> model for Laravel 5\'s authentication system, follow these instructions:</p>\r\n<p><strong>Delete the following from your <code class=\" language-php\"><span class=\"token keyword\">use</span></code> block:</strong></p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>UserInterface</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Reminders<span class=\"token punctuation\">\\</span>RemindableInterface</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p><strong>Add the following to your <code class=\" language-php\"><span class=\"token keyword\">use</span></code> block:</strong></p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Authenticatable</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Passwords<span class=\"token punctuation\">\\</span>CanResetPassword</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Authenticatable</span> <span class=\"token keyword\">as</span> AuthenticatableContract<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>CanResetPassword</span> <span class=\"token keyword\">as</span> CanResetPasswordContract<span class=\"token punctuation\">;</span></code></pre>\r\n<p><strong>Remove the UserInterface and RemindableInterface interfaces.</strong></p>\r\n<p><strong>Mark the class as implementing the following interfaces:</strong></p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticatableContract</span><span class=\"token punctuation\">,</span> CanResetPasswordContract</code></pre>\r\n<p><strong>Include the following traits within the class declaration:</strong></p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Authenticatable</span><span class=\"token punctuation\">,</span> CanResetPassword<span class=\"token punctuation\">;</span></code></pre>\r\n<p><strong>If you used them, remove <code class=\" language-php\">Illuminate\\<span class=\"token package\">Auth<span class=\"token punctuation\">\\</span>Reminders<span class=\"token punctuation\">\\</span>RemindableTrait</span></code>  and <code class=\" language-php\">Illuminate\\<span class=\"token package\">Auth<span class=\"token punctuation\">\\</span>UserTrait</span></code> from your use block and your class declaration.</strong></p>\r\n<h3>Cashier User Changes</h3>\r\n<p>The name of the trait and interface used by <a href=\"billing.html\">Laravel Cashier</a> has changed. Instead of using <code class=\" language-php\">BillableTrait</code>, use the <code class=\" language-php\">Laravel\\<span class=\"token package\">Cashier<span class=\"token punctuation\">\\</span>Billable</span></code> trait. And, instead of <code class=\" language-php\">Laravel\\<span class=\"token package\">Cashier<span class=\"token punctuation\">\\</span>BillableInterface</span></code> implement the <code class=\" language-php\">Laravel\\<span class=\"token package\">Cashier<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Billable</span></code> interface instead. No other method changes are required.</p>\r\n<h3>Artisan Commands</h3>\r\n<p>Move all of your command classes from your old <code class=\" language-php\">app<span class=\"token operator\">/</span>commands</code> directory to the new <code class=\" language-php\">app<span class=\"token operator\">/</span>Console<span class=\"token operator\">/</span>Commands</code> directory. Next, add the <code class=\" language-php\">app<span class=\"token operator\">/</span>Console<span class=\"token operator\">/</span>Commands</code> directory to the <code class=\" language-php\">classmap</code> directive of your <code class=\" language-php\">composer<span class=\"token punctuation\">.</span>json</code> file.</p>\r\n<p>Then, copy your list of Artisan commands from <code class=\" language-php\">start<span class=\"token operator\">/</span>artisan<span class=\"token punctuation\">.</span>php</code> into the <code class=\" language-php\">command</code> array of the <code class=\" language-php\">app<span class=\"token operator\">/</span>Console<span class=\"token operator\">/</span>Kernel<span class=\"token punctuation\">.</span>php</code> file.</p>\r\n<h3>Database Migrations &amp; Seeds</h3>\r\n<p>Delete the two migrations included with Laravel 5.0, since you should already have the users table in your database.</p>\r\n<p>Move all of your migration classes from the old <code class=\" language-php\">app<span class=\"token operator\">/</span>database<span class=\"token operator\">/</span>migrations</code> directory to the new <code class=\" language-php\">database<span class=\"token operator\">/</span>migrations</code>. All of your seeds should be moved from <code class=\" language-php\">app<span class=\"token operator\">/</span>database<span class=\"token operator\">/</span>seeds</code> to <code class=\" language-php\">database<span class=\"token operator\">/</span>seeds</code>.</p>\r\n<h3>Global IoC Bindings</h3>\r\n<p>If you have any <a href=\"container.html\">service container</a> bindings in <code class=\" language-php\">start<span class=\"token operator\">/</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">.</span>php</code>, move them all to the <code class=\" language-php\">register</code> method of the <code class=\" language-php\">app<span class=\"token operator\">/</span>Providers<span class=\"token operator\">/</span>AppServiceProvider<span class=\"token punctuation\">.</span>php</code> file. You may need to import the <code class=\" language-php\">App</code> facade.</p>\r\n<p>Optionally, you may break these bindings up into separate service providers by category.</p>\r\n<h3>Views</h3>\r\n<p>Move your views from <code class=\" language-php\">app<span class=\"token operator\">/</span>views</code> to the new <code class=\" language-php\">resources<span class=\"token operator\">/</span>views</code> directory.</p>\r\n<h3>Blade Tag Changes</h3>\r\n<p>For better security by default, Laravel 5.0 escapes all output from both the <code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code> and <code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code> Blade directives. A new <code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">}</span></code> directive has been introduced to display raw, unescaped output. The most secure option when upgrading your application is to only use the new <code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">}</span></code> directive when you are <strong>certain</strong> that it is safe to display raw output.</p>\r\n<p>However, if you <strong>must</strong> use the old Blade syntax, add the following lines at the bottom of <code class=\" language-php\">AppServiceProvider@register</code>:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\">\\<span class=\"token scope\">Blade<span class=\"token punctuation\">::</span></span><span class=\"token function\">setRawTags<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'{{\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'}}\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\\<span class=\"token scope\">Blade<span class=\"token punctuation\">::</span></span><span class=\"token function\">setContentTags<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'{{{\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'}}}\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\\<span class=\"token scope\">Blade<span class=\"token punctuation\">::</span></span><span class=\"token function\">setEscapedContentTags<span class=\"token punctuation\">(</span></span><span class=\"token string\">\'{{{\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'}}}\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>This should not be done lightly, and may make your application more vulnerable to XSS exploits. Also, comments with <code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">--</span></code> will no longer work.</p>\r\n<h3>Translation Files</h3>\r\n<p>Move your language files from <code class=\" language-php\">app<span class=\"token operator\">/</span>lang</code> to the new <code class=\" language-php\">resources<span class=\"token operator\">/</span>lang</code> directory.</p>\r\n<h3>Public Directory</h3>\r\n<p>Copy your application\'s public assets from your <code class=\" language-php\"><span class=\"token number\">4.2</span></code> application\'s <code class=\" language-php\"><span class=\"token keyword\">public</span></code> directory to your new application\'s <code class=\" language-php\"><span class=\"token keyword\">public</span></code> directory. Be sure to keep the <code class=\" language-php\"><span class=\"token number\">5.0</span></code> version of <code class=\" language-php\">index<span class=\"token punctuation\">.</span>php</code>.</p>\r\n<h3>Tests</h3>\r\n<p>Move your tests from <code class=\" language-php\">app<span class=\"token operator\">/</span>tests</code> to the new <code class=\" language-php\">tests</code> directory.</p>\r\n<h3>Misc. Files</h3>\r\n<p>Copy in any other files in your project. For example, <code class=\" language-php\"><span class=\"token punctuation\">.</span>scrutinizer<span class=\"token punctuation\">.</span>yml</code>, <code class=\" language-php\">bower<span class=\"token punctuation\">.</span>json</code> and other similar tooling configuration files.</p>\r\n<p>You may move your Sass, Less, or CoffeeScript to any location you wish. The <code class=\" language-php\">resources<span class=\"token operator\">/</span>assets</code> directory could be a good default location.</p>\r\n<h3>Form &amp; HTML Helpers</h3>\r\n<p>If you\'re using Form or HTML helpers, you will see an error stating <code class=\" language-php\"><span class=\"token keyword\">class</span> <span class=\"token string\">\'Form\'</span> not found</code> or <code class=\" language-php\"><span class=\"token keyword\">class</span> <span class=\"token string\">\'Html\'</span> not found</code>. The Form and HTML helpers have been deprecated in Laravel 5.0; however, there are community-driven replacements such as those maintained by the <a href=\"http://laravelcollective.com/docs/master/html\">Laravel Collective</a>.</p>\r\n<p>For example, you may add <code class=\" language-php\"><span class=\"token string\">\"laravelcollective/html\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"~5.0\"</span></code> to your <code class=\" language-php\">composer<span class=\"token punctuation\">.</span>json</code> file\'s <code class=\" language-php\"><span class=\"token keyword\">require</span></code> section.</p>\r\n<p>You\'ll also need to add the Form and HTML facades and service provider. Edit <code class=\" language-php\">config<span class=\"token operator\">/</span>app<span class=\"token punctuation\">.</span>php</code> and add this line to the \'providers\' array:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token string\">\'Collective\\Html\\HtmlServiceProvider\'</span><span class=\"token punctuation\">,</span></code></pre>\r\n<p>Next, add these lines to the \'aliases\' array:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token string\">\'Form\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'Collective\\Html\\FormFacade\'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token string\">\'Html\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'Collective\\Html\\HtmlFacade\'</span><span class=\"token punctuation\">,</span></code></pre>\r\n<h3>CacheManager</h3>\r\n<p>If your application code was injecting <code class=\" language-php\">Illuminate\\<span class=\"token package\">Cache<span class=\"token punctuation\">\\</span>CacheManager</span></code> to get a non-Facade version of Laravel\'s cache, inject <code class=\" language-php\">Illuminate\\<span class=\"token package\">Contracts<span class=\"token punctuation\">\\</span>Cache<span class=\"token punctuation\">\\</span>Repository</span></code> instead.</p>\r\n<h3>Pagination</h3>\r\n<p>Replace any calls to <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">links<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> with <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">render<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code>.</p>\r\n<p>Replace any calls to <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getFrom<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> and <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getTo<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> with <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">firstItem<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> and <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lastItem<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> respectively.</p>\r\n<p>Remove the \"get\" prefix from calls to <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getPerPage<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code>, <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getCurrentPage<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code>, <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getLastPage<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> and <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getTotal<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> (e.g. <code class=\" language-php\"><span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">perPage<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code>).</p>\r\n<h3>Beanstalk Queuing</h3>\r\n<p>Laravel 5.0 now requires <code class=\" language-php\"><span class=\"token string\">\"pda/pheanstalk\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"~3.0\"</span></code> instead of <code class=\" language-php\"><span class=\"token string\">\"pda/pheanstalk\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"~2.1\"</span></code>.</p>\r\n<h3>Remote</h3>\r\n<p>The Remote component has been deprecated.</p>\r\n<h3>Workbench</h3>\r\n<p>The Workbench component has been deprecated.</p>\r\n<p><a name=\"upgrade-4.2\"></a></p>\r\n<h2><a href=\"#upgrade-4.2\">Upgrading To 4.2 From 4.1</a></h2>\r\n<h3>PHP 5.4+</h3>\r\n<p>Laravel 4.2 requires PHP 5.4.0 or greater.</p>\r\n<h3>Encryption Defaults</h3>\r\n<p>Add a new <code class=\" language-php\">cipher</code> option in your <code class=\" language-php\">app<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>app<span class=\"token punctuation\">.</span>php</code> configuration file. The value of this option should be <code class=\" language-php\"><span class=\"token constant\">MCRYPT_RIJNDAEL_256</span></code>.</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token string\">\'cipher\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token constant\">MCRYPT_RIJNDAEL_256</span></code></pre>\r\n<p>This setting may be used to control the default cipher used by the Laravel encryption facilities.</p>\r\n<blockquote>\r\n<p><strong>Note:</strong> In Laravel 4.2, the default cipher is <code class=\" language-php\"><span class=\"token constant\">MCRYPT_RIJNDAEL_128</span></code> (AES), which is considered to be the most secure cipher. Changing the cipher back to <code class=\" language-php\"><span class=\"token constant\">MCRYPT_RIJNDAEL_256</span></code> is required to decrypt cookies/values that were encrypted in Laravel &lt;= 4.1</p>\r\n</blockquote>\r\n<h3>Soft Deleting Models Now Use Traits</h3>\r\n<p>If you are using soft deleting models, the <code class=\" language-php\">softDeletes</code> property has been removed. You must now use the <code class=\" language-php\">SoftDeletingTrait</code> like so:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>SoftDeletingTrait</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Eloquent</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">use</span> <span class=\"token package\">SoftDeletingTrait</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>You must also manually add the <code class=\" language-php\">deleted_at</code> column to your <code class=\" language-php\">dates</code> property:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Eloquent</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">use</span> <span class=\"token package\">SoftDeletingTrait</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$dates</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'deleted_at\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>The API for all soft delete operations remains the same.</p>\r\n<blockquote>\r\n<p><strong>Note:</strong> The <code class=\" language-php\">SoftDeletingTrait</code> can not be applied on a base model. It must be used on an actual model class.</p>\r\n</blockquote>\r\n<h3>View / Pagination Environment Renamed</h3>\r\n<p>If you are directly referencing the <code class=\" language-php\">Illuminate\\<span class=\"token package\">View<span class=\"token punctuation\">\\</span>Environment</span></code> class or <code class=\" language-php\">Illuminate\\<span class=\"token package\">Pagination<span class=\"token punctuation\">\\</span>Environment</span></code> class, update your code to reference <code class=\" language-php\">Illuminate\\<span class=\"token package\">View<span class=\"token punctuation\">\\</span>Factory</span></code> and <code class=\" language-php\">Illuminate\\<span class=\"token package\">Pagination<span class=\"token punctuation\">\\</span>Factory</span></code> instead. These two classes have been renamed to better reflect their function.</p>\r\n<h3>Additional Parameter On Pagination Presenter</h3>\r\n<p>If you are extending the <code class=\" language-php\">Illuminate\\<span class=\"token package\">Pagination<span class=\"token punctuation\">\\</span>Presenter</span></code> class, the abstract method <code class=\" language-php\">getPageLinkWrapper</code> signature has changed to add the <code class=\" language-php\">rel</code> argument:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPageLinkWrapper<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$url</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$rel</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<h3>Iron.Io Queue Encryption</h3>\r\n<p>If you are using the Iron.io queue driver, you will need to add a new <code class=\" language-php\">encrypt</code> option to your queue configuration file:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token string\">\'encrypt\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">true</span></code></pre>\r\n<p><a name=\"upgrade-4.1.29\"></a></p>\r\n<h2><a href=\"#upgrade-4.1.29\">Upgrading To 4.1.29 From &lt;= 4.1.x</a></h2>\r\n<p>Laravel 4.1.29 improves the column quoting for all database drivers. This protects your application from some mass assignment vulnerabilities when <strong>not</strong> using the <code class=\" language-php\">fillable</code> property on models. If you are using the <code class=\" language-php\">fillable</code> property on your models to protect against mass assignment, your application is not vulnerable. However, if you are using <code class=\" language-php\">guarded</code> and are passing a user controlled array into an \"update\" or \"save\" type function, you should upgrade to <code class=\" language-php\"><span class=\"token number\">4.1</span><span class=\"token punctuation\">.</span><span class=\"token number\">29</span></code> immediately as your application may be at risk of mass assignment.</p>\r\n<p>To upgrade to Laravel 4.1.29, simply <code class=\" language-php\">composer update</code>. No breaking changes are introduced in this release.</p>\r\n<p><a name=\"upgrade-4.1.26\"></a></p>\r\n<h2><a href=\"#upgrade-4.1.26\">Upgrading To 4.1.26 From &lt;= 4.1.25</a></h2>\r\n<p>Laravel 4.1.26 introduces security improvements for \"remember me\" cookies. Before this update, if a remember cookie was hijacked by another malicious user, the cookie would remain valid for a long period of time, even after the true owner of the account reset their password, logged out, etc.</p>\r\n<p>This change requires the addition of a new <code class=\" language-php\">remember_token</code> column to your <code class=\" language-php\">users</code> (or equivalent) database table. After this change, a fresh token will be assigned to the user each time they login to your application. The token will also be refreshed when the user logs out of the application. The implications of this change are: if a \"remember me\" cookie is hijacked, simply logging out of the application will invalidate the cookie.</p>\r\n<h3>Upgrade Path</h3>\r\n<p>First, add a new, nullable <code class=\" language-php\">remember_token</code> of VARCHAR(100), TEXT, or equivalent to your <code class=\" language-php\">users</code> table.</p>\r\n<p>Next, if you are using the Eloquent authentication driver, update your <code class=\" language-php\">User</code> class with the following three methods:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRememberToken<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">remember_token</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setRememberToken<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">remember_token</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRememberTokenName<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\'remember_token\'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<blockquote>\r\n<p><strong>Note:</strong> All existing \"remember me\" sessions will be invalidated by this change, so all users will be forced to re-authenticate with your application.</p>\r\n</blockquote>\r\n<h3>Package Maintainers</h3>\r\n<p>Two new methods were added to the <code class=\" language-php\">Illuminate\\<span class=\"token package\">Auth<span class=\"token punctuation\">\\</span>UserProviderInterface</span></code> interface. Sample implementations may be found in the default drivers:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">retrieveByToken<span class=\"token punctuation\">(</span></span><span class=\"token variable\">$identifier</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateRememberToken<span class=\"token punctuation\">(</span></span>UserInterface <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n<p>The <code class=\" language-php\">Illuminate\\<span class=\"token package\">Auth<span class=\"token punctuation\">\\</span>UserInterface</span></code> also received the three new methods described in the \"Upgrade Path\".</p>\r\n<p><a name=\"upgrade-4.1\"></a></p>\r\n<h2><a href=\"#upgrade-4.1\">Upgrading To 4.1 From 4.0</a></h2>\r\n<h3>Upgrading Your Composer Dependency</h3>\r\n<p>To upgrade your application to Laravel 4.1, change your <code class=\" language-php\">laravel<span class=\"token operator\">/</span>framework</code> version to <code class=\" language-php\"><span class=\"token number\">4.1</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span></code> in your <code class=\" language-php\">composer<span class=\"token punctuation\">.</span>json</code> file.</p>\r\n<h3>Replacing Files</h3>\r\n<p>Replace your <code class=\" language-php\"><span class=\"token keyword\">public</span><span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>php</code> file with <a href=\"https://github.com/laravel/laravel/blob/v4.1.0/public/index.php\">this fresh copy from the repository</a>.</p>\r\n<p>Replace your <code class=\" language-php\">artisan</code> file with <a href=\"https://github.com/laravel/laravel/blob/v4.1.0/artisan\">this fresh copy from the repository</a>.</p>\r\n<h3>Adding Configuration Files &amp; Options</h3>\r\n<p>Update your <code class=\" language-php\">aliases</code> and <code class=\" language-php\">providers</code> arrays in your <code class=\" language-php\">app<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>app<span class=\"token punctuation\">.</span>php</code> configuration file. The updated values for these arrays can be found <a href=\"https://github.com/laravel/laravel/blob/v4.1.0/app/config/app.php\">in this file</a>. Be sure to add your custom and package service providers / aliases back to the arrays.</p>\r\n<p>Add the new <code class=\" language-php\">app<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>remote<span class=\"token punctuation\">.</span>php</code> file <a href=\"https://github.com/laravel/laravel/blob/v4.1.0/app/config/remote.php\">from the repository</a>.</p>\r\n<p>Add the new <code class=\" language-php\">expire_on_close</code> configuration option to your <code class=\" language-php\">app<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>session<span class=\"token punctuation\">.</span>php</code> file. The default value should be <code class=\" language-php\"><span class=\"token boolean\">false</span></code>.</p>\r\n<p>Add the new <code class=\" language-php\">failed</code> configuration section to your <code class=\" language-php\">app<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>queue<span class=\"token punctuation\">.</span>php</code> file. Here are the default values for the section:</p>\r\n<pre class=\" language-php\"><code class=\" language-php\"><span class=\"token string\">\'failed\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token string\">\'database\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'mysql\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'table\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\'failed_jobs\'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\r\n<p><strong>(Optional)</strong> Update the <code class=\" language-php\">pagination</code> configuration option in your <code class=\" language-php\">app<span class=\"token operator\">/</span>config<span class=\"token operator\">/</span>view<span class=\"token punctuation\">.</span>php</code> file to <code class=\" language-php\"><span class=\"token scope\">pagination<span class=\"token punctuation\">::</span></span>slider<span class=\"token number\">-3</span></code>.</p>\r\n<h3>Controller Updates</h3>\r\n<p>If <code class=\" language-php\">app<span class=\"token operator\">/</span>controllers<span class=\"token operator\">/</span>BaseController<span class=\"token punctuation\">.</span>php</code> has a <code class=\" language-php\"><span class=\"token keyword\">use</span></code> statement at the top, change <code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span></code> to <code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span></code>.</p>\r\n<h3>Password Reminders Updates</h3>\r\n<p>Password reminders have been overhauled for greater flexibility. You may examine the new stub controller by running the <code class=\" language-php\">php artisan auth<span class=\"token punctuation\">:</span>reminders<span class=\"token operator\">-</span>controller</code> Artisan command. You may also browse the <a href=\"../security.html#password-reminders-and-reset\">updated documentation</a> and update your application accordingly.</p>\r\n<p>Update your <code class=\" language-php\">app<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span>en<span class=\"token operator\">/</span>reminders<span class=\"token punctuation\">.</span>php</code> language file to match <a href=\"https://github.com/laravel/laravel/blob/v4.1.0/app/lang/en/reminders.php\">this updated file</a>.</p>\r\n<h3>Environment Detection Updates</h3>\r\n<p>For security reasons, URL domains may no longer be used to detect your application environment. These values are easily spoofable and allow attackers to modify the environment for a request. You should convert your environment detection to use machine host names (<code class=\" language-php\">hostname</code> command on Mac, Linux, and Windows).</p>\r\n<h3>Simpler Log Files</h3>\r\n<p>Laravel now generates a single log file: <code class=\" language-php\">app<span class=\"token operator\">/</span>storage<span class=\"token operator\">/</span>logs<span class=\"token operator\">/</span>laravel<span class=\"token punctuation\">.</span>log</code>. However, you may still configure this behavior in your <code class=\" language-php\">app<span class=\"token operator\">/</span>start<span class=\"token operator\">/</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">.</span>php</code> file.</p>\r\n<h3>Removing Redirect Trailing Slash</h3>\r\n<p>In your <code class=\" language-php\">bootstrap<span class=\"token operator\">/</span>start<span class=\"token punctuation\">.</span>php</code> file, remove the call to <code class=\" language-php\"><span class=\"token variable\">$app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">redirectIfTrailingSlash<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code>. This method is no longer needed as this functionality is now handled by the <code class=\" language-php\"><span class=\"token punctuation\">.</span>htaccess</code> file included with the framework.</p>\r\n<p>Next, replace your Apache <code class=\" language-php\"><span class=\"token punctuation\">.</span>htaccess</code> file with <a href=\"https://github.com/laravel/laravel/blob/v4.1.0/public/.htaccess\">this new one</a> that handles trailing slashes.</p>\r\n<h3>Current Route Access</h3>\r\n<p>The current route is now accessed via <code class=\" language-php\"><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">current<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code> instead of <code class=\" language-php\"><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">getCurrentRoute<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code>.</p>\r\n<h3>Composer Update</h3>\r\n<p>Once you have completed the changes above, you can run the <code class=\" language-php\">composer update</code> function to update your core application files! If you receive class load errors, try running the <code class=\" language-php\">update</code> command with the <code class=\" language-php\"><span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>scripts</code> option enabled like so: <code class=\" language-php\">composer update <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>scripts</code>.</p>\r\n<h3>Wildcard Event Listeners</h3>\r\n<p>The wildcard event listeners no longer append the event to your handler functions parameters. If you require finding the event that was fired you should use <code class=\" language-php\"><span class=\"token scope\">Event<span class=\"token punctuation\">::</span></span><span class=\"token function\">firing<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span></code>.</p>', 1, 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58');
INSERT INTO `page` (`id`, `parent_id`, `position`, `lft`, `rgt`, `depth`, `name`, `slug`, `outline`, `description`, `user_id`, `wiki_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(23, NULL, 0, 45, 46, 0, 'How to add contacts to email list', 'how-to-add-contacts-to-email-list', 'How to add contacts to email list', '<p>You can Add contacts dasdsa</p>\r\n', 61, 7, 48, NULL, '2019-10-23 00:10:01', '2019-10-23 00:10:02');

-- --------------------------------------------------------

--
-- Table structure for table `page_tags`
--

CREATE TABLE `page_tags` (
  `id` int(10) UNSIGNED NOT NULL,
  `tag_id` int(11) NOT NULL,
  `subject_type` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `subject_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `page_tags`
--

INSERT INTO `page_tags` (`id`, `tag_id`, `subject_type`, `subject_id`, `created_at`, `updated_at`) VALUES
(1, 1, 'App\\Models\\Wiki', 2, '2019-08-28 12:46:37', '2019-08-28 12:46:37'),
(2, 2, 'App\\Models\\Wiki', 2, '2019-08-28 12:46:37', '2019-08-28 12:46:37'),
(3, 1, 'App\\Models\\Wiki', 3, '2019-08-28 12:47:01', '2019-08-28 12:47:01'),
(4, 3, 'App\\Models\\Wiki', 4, '2019-08-31 10:17:24', '2019-08-31 10:17:24'),
(5, 4, 'App\\Models\\Wiki', 6, '2019-10-22 23:44:12', '2019-10-22 23:44:12'),
(6, 5, 'App\\Models\\Wiki', 6, '2019-10-22 23:44:12', '2019-10-22 23:44:12'),
(7, 6, 'App\\Models\\Wiki', 7, '2019-10-23 00:06:51', '2019-10-23 00:06:51'),
(8, 7, 'App\\Models\\Wiki', 7, '2019-10-23 00:06:51', '2019-10-23 00:06:51'),
(9, 8, 'App\\Models\\Page', 23, '2019-10-23 00:10:02', '2019-10-23 00:10:02');

-- --------------------------------------------------------

--
-- Table structure for table `password_resets`
--

CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `team_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `permissions`
--

CREATE TABLE `permissions` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `permissions`
--

INSERT INTO `permissions` (`id`, `name`, `created_at`, `updated_at`) VALUES
(1, 'admin', '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(2, 'view_page', '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(3, 'add_page', '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(4, 'delete_page', '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(5, 'add_comment', '2019-08-28 12:43:00', '2019-08-28 12:43:00'),
(6, 'delete_comment', '2019-08-28 12:43:00', '2019-08-28 12:43:00');

-- --------------------------------------------------------

--
-- Table structure for table `read_list`
--

CREATE TABLE `read_list` (
  `id` int(10) UNSIGNED NOT NULL,
  `subject_type` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `subject_id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `roles`
--

CREATE TABLE `roles` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `team_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `roles`
--

INSERT INTO `roles` (`id`, `name`, `slug`, `user_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'Admins', 'admins', 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(2, 'Editor', 'editor', 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(3, 'Writer', 'writer', 1, 1, NULL, '2019-08-28 12:42:56', '2019-08-28 12:42:56'),
(4, 'Admins', 'admins', 3, 2, NULL, '2019-08-28 12:43:55', '2019-08-28 12:43:55'),
(5, 'Admins', 'admins', 4, 3, NULL, '2019-08-31 10:15:21', '2019-08-31 10:15:21');

-- --------------------------------------------------------

--
-- Table structure for table `role_permissions`
--

CREATE TABLE `role_permissions` (
  `id` int(10) UNSIGNED NOT NULL,
  `role_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `role_permissions`
--

INSERT INTO `role_permissions` (`id`, `role_id`, `permission_id`, `created_at`, `updated_at`) VALUES
(1, 1, 1, '2019-08-28 12:43:00', '2019-08-28 12:43:00'),
(2, 1, 2, '2019-08-28 12:43:00', '2019-08-28 12:43:00'),
(3, 1, 3, '2019-08-28 12:43:00', '2019-08-28 12:43:00'),
(4, 1, 4, '2019-08-28 12:43:00', '2019-08-28 12:43:00'),
(5, 1, 5, '2019-08-28 12:43:00', '2019-08-28 12:43:00'),
(6, 1, 6, '2019-08-28 12:43:00', '2019-08-28 12:43:00'),
(7, 2, 2, '2019-08-28 12:43:00', '2019-08-28 12:43:00'),
(8, 2, 3, '2019-08-28 12:43:00', '2019-08-28 12:43:00'),
(9, 2, 4, '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(10, 2, 5, '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(11, 2, 6, '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(12, 3, 2, '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(13, 3, 5, '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(14, 3, 6, '2019-08-28 12:43:01', '2019-08-28 12:43:01'),
(15, 4, 1, '2019-08-28 12:43:55', '2019-08-28 12:43:55'),
(16, 4, 2, '2019-08-28 12:43:56', '2019-08-28 12:43:56'),
(17, 4, 3, '2019-08-28 12:43:56', '2019-08-28 12:43:56'),
(18, 4, 4, '2019-08-28 12:43:56', '2019-08-28 12:43:56'),
(19, 4, 5, '2019-08-28 12:43:56', '2019-08-28 12:43:56'),
(20, 4, 6, '2019-08-28 12:43:56', '2019-08-28 12:43:56'),
(21, 5, 1, '2019-08-31 10:15:21', '2019-08-31 10:15:21'),
(22, 5, 2, '2019-08-31 10:15:22', '2019-08-31 10:15:22'),
(23, 5, 3, '2019-08-31 10:15:22', '2019-08-31 10:15:22'),
(24, 5, 4, '2019-08-31 10:15:22', '2019-08-31 10:15:22'),
(25, 5, 5, '2019-08-31 10:15:22', '2019-08-31 10:15:22'),
(26, 5, 6, '2019-08-31 10:15:22', '2019-08-31 10:15:22');

-- --------------------------------------------------------

--
-- Table structure for table `space`
--

CREATE TABLE `space` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `outline` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `team_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `space`
--

INSERT INTO `space` (`id`, `name`, `slug`, `outline`, `user_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'Backend', 'backend', 'Dolore nulla fuga. Ex doloribus atque sed adipisci natus fugit, accusamus voluptatem. Eveniet, temporibus aspernatur corporis maxime consectetur dolorem.', 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(2, 'Front end', 'front_end', 'Ea quae consequat. Similique eligendi ad qui blanditiis omnis voluptatem. Ut explicabo. Vel perferendis sequi aliquam quibusdam ea.', 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(3, 'Marketing', 'marketing', 'In incidunt, esse, ut et quisquam nobis exercitationem ab consectetur, et eius eius porro do tenetur pariatur? Accusamus.', 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(4, 'Human Resources', 'human_resources', 'Et excepturi aliqua. Architecto fuga. Veniam, excepturi quia ut eos elit.', 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(5, 'Sales', 'sales', 'Qui ad officia sit, ut nemo et dignissimos velit veniam, obcaecati expedita corrupti, voluptas excepteur animi.', 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(6, 'Product', 'product', 'Inventore et deleniti nulla sit, officiis rerum corrupti, eos, voluptatem, non consectetur, ratione doloribus fugiat laboris elit, est, exercitationem.', 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(7, 'hubb sales', 'hubb-sales', 'talking about hubb sales', 3, 2, NULL, '2019-08-28 12:45:35', '2019-08-28 12:45:35'),
(8, 'test marketing', 'test-marketing', 'space about marketing', 4, 3, NULL, '2019-08-31 10:16:27', '2019-08-31 10:16:27'),
(9, 'asdfsadf', 'asdfsadf', 'sadfdsf', 29, 24, NULL, '2019-10-13 22:22:24', '2019-10-13 22:22:24'),
(10, 'sales', 'sales-1', 'avc', 30, 25, NULL, '2019-10-13 23:23:24', '2019-10-13 23:23:24'),
(11, 'sales', 'sales-2', 'asdasd', 30, 25, NULL, '2019-10-13 23:28:34', '2019-10-13 23:28:34'),
(12, 'aaa', 'aaa', 'asdsad', 30, 25, NULL, '2019-10-13 23:30:27', '2019-10-13 23:30:27'),
(13, 'space1', 'space1', '', 59, 47, NULL, '2019-10-22 17:47:37', '2019-10-22 17:47:37'),
(14, 'space2', 'space2', '', 54, 44, NULL, '2019-10-22 18:27:23', '2019-10-22 18:27:23'),
(15, 'How it works?', 'how-it-works', '', 61, 48, NULL, '2019-10-22 23:39:46', '2019-10-22 23:39:46');

-- --------------------------------------------------------

--
-- Table structure for table `tags`
--

CREATE TABLE `tags` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `tags`
--

INSERT INTO `tags` (`id`, `name`, `slug`, `created_at`, `updated_at`) VALUES
(1, 'sales', 'sales', '2019-08-28 12:46:37', '2019-08-28 12:46:37'),
(2, 'hubb', 'hubb', '2019-08-28 12:46:37', '2019-08-28 12:46:37'),
(3, 'marketing', 'marketing', '2019-08-31 10:17:24', '2019-08-31 10:17:24'),
(4, 'email', 'email', '2019-10-22 23:44:12', '2019-10-22 23:44:12'),
(5, 'campaigns', 'campaigns', '2019-10-22 23:44:12', '2019-10-22 23:44:12'),
(6, 'crm', 'crm', '2019-10-23 00:06:51', '2019-10-23 00:06:51'),
(7, 'contacts', 'contacts', '2019-10-23 00:06:51', '2019-10-23 00:06:51'),
(8, 'email list', 'email-list', '2019-10-23 00:10:02', '2019-10-23 00:10:02');

-- --------------------------------------------------------

--
-- Table structure for table `teams`
--

CREATE TABLE `teams` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `team_logo` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `subdomain` text COLLATE utf8_unicode_ci NOT NULL,
  `slug` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `teams`
--

INSERT INTO `teams` (`id`, `name`, `team_logo`, `subdomain`, `slug`, `user_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'Opus', 'opus.png', '', 'opus', 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(2, 'HUBB', NULL, '', 'hubb', 3, NULL, '2019-08-28 12:43:55', '2019-08-28 12:43:55'),
(3, 'test', NULL, '', 'test', 4, NULL, '2019-08-31 10:15:21', '2019-08-31 10:15:21'),
(11, 'company1', NULL, 'company1', 'company1', 12, NULL, '2019-09-19 12:35:54', '2019-09-19 12:35:54'),
(12, 'aa', NULL, 'aa', 'aa', 13, NULL, '2019-09-19 12:45:24', '2019-09-19 12:45:24'),
(13, 'aaaa', NULL, 'aaaa', 'aaaa', 14, NULL, '2019-09-19 12:47:28', '2019-09-19 12:47:28'),
(14, 'aaaaa', NULL, 'aaaaa', 'aaaaa', 15, NULL, '2019-09-19 12:49:50', '2019-09-19 12:49:50'),
(15, 'aaaaaa', NULL, 'aaaaaa', 'aaaaaa', 16, NULL, '2019-09-19 12:51:12', '2019-09-19 12:51:12'),
(16, 'asd', NULL, 'asd', 'asd', 17, NULL, '2019-10-03 11:06:48', '2019-10-03 11:06:48'),
(18, 'asd3', NULL, 'asd3', 'asd', 21, NULL, '2019-10-03 11:38:54', '2019-10-03 11:38:54'),
(19, 'my company', NULL, 'testcompany1', 'my_company', 24, NULL, '2019-10-06 18:22:47', '2019-10-06 18:22:47'),
(20, 'my company222265', NULL, 'testcompany66694', 'my_company222265', 25, NULL, '2019-10-06 18:23:46', '2019-10-06 18:23:46'),
(21, 'test1', NULL, 'test1', 'test1', 26, NULL, '2019-10-13 21:37:23', '2019-10-13 21:37:23'),
(22, 'test11', NULL, 'test11', 'test11', 27, NULL, '2019-10-13 22:15:15', '2019-10-13 22:15:15'),
(23, 'test22', NULL, 'test22', 'test22', 28, NULL, '2019-10-13 22:17:30', '2019-10-13 22:17:30'),
(24, 'test33', NULL, 'test63', 'test33', 29, NULL, '2019-10-13 22:20:52', '2019-10-13 22:20:52'),
(25, 'test40', NULL, 'test40', 'test40', 30, NULL, '2019-10-13 23:03:48', '2019-10-13 23:03:48'),
(26, 'my company 1', NULL, 'mycompany1', 'my_company_1', 31, NULL, '2019-10-16 00:43:56', '2019-10-16 00:43:56'),
(27, 'my company 2', NULL, 'mycompany2', 'my_company_2', 32, NULL, '2019-10-16 00:46:27', '2019-10-16 00:46:27'),
(28, 'test50', NULL, 'test50', 'test50', 33, NULL, '2019-10-17 17:52:14', '2019-10-17 17:52:14'),
(29, 'test portal 6', 'img_2019-10-21-16-03.gif', 'te13', 'test_portal_6', 36, NULL, '2019-10-21 20:15:03', '2019-10-21 20:15:03'),
(30, 'test portal 7', 'img_2019-10-21-16-16.gif', 'te14', 'test_portal_7', 37, NULL, '2019-10-21 20:18:16', '2019-10-21 20:18:16'),
(31, 'test portal 8', 'img_2019-10-21-16-37.gif', 'te15', 'test_portal_8', 38, NULL, '2019-10-21 20:25:37', '2019-10-21 20:25:37'),
(32, 'portal 9', 'img_2019-10-21-16-45.gif', 'te16', 'portal_9', 39, NULL, '2019-10-21 20:29:45', '2019-10-21 20:29:45'),
(33, 'portal 10', 'img_2019-10-21-16-51.gif', 'te17', 'portal_10', 40, NULL, '2019-10-21 20:30:51', '2019-10-21 20:30:51'),
(34, 'test porta 12', 'img_2019-10-21-16-50.gif', 'te18', 'test_porta_12', 41, NULL, '2019-10-21 20:31:50', '2019-10-21 20:31:50'),
(35, 'test portal 13', 'img_2019-10-21-16-45.gif', 'te19', 'test_portal_13', 42, NULL, '2019-10-21 20:37:45', '2019-10-21 20:37:45'),
(36, 'portal 20', 'img_2019-10-21-16-30.gif', 'te20', 'portal_20', 43, NULL, '2019-10-21 20:45:30', '2019-10-21 20:45:30'),
(37, 'portal 30', 'img_2019-10-21-16-37.gif', 'te21', 'portal_30', 44, NULL, '2019-10-21 20:46:37', '2019-10-21 20:46:37'),
(38, 's dfdsf s', 'img_2019-10-21-17-03.gif', 'te8666', 's_dfdsf_s', 47, NULL, '2019-10-21 21:13:03', '2019-10-21 21:13:03'),
(39, 'sd fsdf', 'img_2019-10-21-17-58.gif', 'te7666', 'sd_fsdf', 48, NULL, '2019-10-21 21:13:58', '2019-10-21 21:13:58'),
(40, 'sdf sdf sd', 'img_2019-10-21-17-16.gif', 'te6jd', 'sdf_sdf_sd', 49, NULL, '2019-10-21 21:39:16', '2019-10-21 21:39:16'),
(41, 'sdfds2323', 'img_2019-10-21-18-10.gif', 'te12', 'sdfds2323', 50, NULL, '2019-10-21 22:49:10', '2019-10-21 22:49:10'),
(42, 'sfdsf', 'img_2019-10-21-19-15.gif', 'te9ddf', 'sfdsf', 51, NULL, '2019-10-21 23:03:15', '2019-10-21 23:03:15'),
(43, 'testportal10001', 'img_2019-10-21-19-22.gif', 'te166', 'testportal10001', 52, NULL, '2019-10-21 23:22:22', '2019-10-21 23:22:22'),
(44, 'portal final1', 'img_2019-10-21-19-28.gif', 'te17000', 'portal_final1', 54, NULL, '2019-10-21 23:31:28', '2019-10-21 23:31:28'),
(45, 'hfhhhfhfh 56555', 'img_2019-10-21-19-13.gif', 'te1866', 'hfhhhfhfh_56555', 56, NULL, '2019-10-21 23:34:13', '2019-10-21 23:34:13'),
(46, 'test60', NULL, 'test60', 'test60', 58, NULL, '2019-10-22 13:50:45', '2019-10-22 13:50:45'),
(47, 'Xtenant', 'img_2019-10-22-13-57.gif', 'Xtenant', 'xtenant', 59, NULL, '2019-10-22 17:33:57', '2019-10-22 17:33:57'),
(48, 'New Portal', 'img_2019-10-22-19-19.jpg', 'HU22', 'new_portal', 60, NULL, '2019-10-22 23:29:19', '2019-10-22 23:29:19');

-- --------------------------------------------------------

--
-- Table structure for table `team_integration_actions`
--

CREATE TABLE `team_integration_actions` (
  `id` int(10) UNSIGNED NOT NULL,
  `integration_id` int(11) NOT NULL,
  `integration_action_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `first_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `last_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `profile_image` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `timezone` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `remember_token` varchar(500) COLLATE utf8_unicode_ci DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `name`, `first_name`, `last_name`, `slug`, `email`, `password`, `profile_image`, `timezone`, `remember_token`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'Elliot Doe', 'Elliot', 'Doe', 'elliot_doe', 'admin@admin.com', '$2y$10$Ima71Zf7AeNR7VqqVQtYCuPQBC5fSV22ASneSOx/ZEzo0hY.c7rAG', 'elliot.jpg', 'Asia/Karachi', NULL, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(2, 'Tom Matt', 'Tom', 'Matt', 'tom_matt', 'tom_matt@yahoo.com', '$2y$10$Ima71Zf7AeNR7VqqVQtYCuPQBC5fSV22ASneSOx/ZEzo0hY.c7rAG', 'tom.jpg', 'Asia/Karachi', NULL, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(3, 'hossam ahmad', 'hossam', 'ahmad', 'hossam_ahmad', 'hosegy93@gmail.com', '$2y$10$wAVduZDWPjjfUAFPbTJxYOSk91hLYTC6mryAT7CEOZX3e/lsbp0bu', NULL, NULL, 'JSox2mZWsXqqIvakDJMNxSUZkoOhgFzphEpQU37tN3Tro8VwUZxIVTLEAZUw', NULL, '2019-08-28 12:43:55', '2019-08-28 12:43:55'),
(4, 'A B', 'A', 'B', 'a_b', 'email@gmail.com', '$2y$10$TcDTHbWZpMqsaC7wxEQ99uwSFFvMaFm920.H4Rdo/YN5h6v09JK0q', NULL, NULL, 'VNcW5KsNBob4NRGrMZqzTz6WcjZoKssm677xaT6nM9I1LMekjHNkgwv6as4C', NULL, '2019-08-31 10:15:21', '2019-08-31 10:15:21'),
(12, 'admin2name admin2last', 'admin2name', 'admin2last', 'admin2name_admin2last', 'adminemail_aaa@gmail.com', '$2y$10$UQjU8FNFk609MUPeI6XBWe1R3TnuIqsClAcKARNi60kWXfkBgt1FO', NULL, NULL, NULL, NULL, '2019-09-19 12:35:54', '2019-09-19 12:35:54'),
(13, 'admin2name admin2last', 'admin2name', 'admin2last', 'admin2name_admin2last', 'adminemail_aa@gmail.com', '$2y$10$Ms6Nz/LLG/iukq5973Hfdu2e8kZjsiY.mxWuXWcxFujPp1Og8CeTO', NULL, NULL, NULL, NULL, '2019-09-19 12:45:24', '2019-09-19 12:45:24'),
(14, 'admin2name admin2last', 'admin2name', 'admin2last', 'admin2name_admin2last', 'adminemail_aaaa@gmail.com', '$2y$10$MzYcO1lTi.LtWgTPOQx7D.PSLQF/DVGnjwN1igVadmT5jPtq2hAd6', NULL, NULL, NULL, NULL, '2019-09-19 12:47:28', '2019-09-19 12:47:28'),
(15, 'admin2name admin2last', 'admin2name', 'admin2last', 'admin2name_admin2last', 'adminemail_aaaaa@gmail.com', '$2y$10$PmiCc3tBwwjwbwNp.3o8Eev3Ne9dvc.sqJLSmpdQjQ95ssmr6SYje', NULL, NULL, NULL, NULL, '2019-09-19 12:49:50', '2019-09-19 12:49:50'),
(16, 'admin2name admin2last', 'admin2name', 'admin2last', 'admin2name_admin2last', 'adminemail_aaaaaa@gmail.com', '$2y$10$N3qYCxz6VhzfLnAao0gIbe4hGKwfQ/3Kx9nzsUNv6GmJkCU4wwL3.', NULL, NULL, NULL, NULL, '2019-09-19 12:51:12', '2019-09-19 12:51:12'),
(17, 'first last', 'first', 'last', 'first_last', 'admin@asd.com', '$2y$10$rhOttWNCRHQzlKl0VYa8AuRgdFuZ0YPYd9Cnao9xw5BNSepkwHAhe', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MTd9.birNFkVNhPht9dU165w2rbCTVPcFj0ROs_Twm6N9Mm', NULL, '2019-10-03 11:06:48', '2019-10-03 11:06:48'),
(18, 'first name last name', 'first name', 'last name', 'first_name_last_name', 'email14@gmail.com', '$2y$10$q4NwZ8MBGbNKoe5T6ojORuS.psNZEx5fURGxTD64lK70.ZOL93/pG', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MTh9.Xm0HNpXR4j9-u5Vlld5-jR0jh3WfCCYUUZ2ElFiaon', NULL, '2019-10-03 11:21:20', '2019-10-03 11:21:20'),
(19, 'first name last name', 'first name', 'last name', 'first_name_last_name', 'adminadmin@email.com', '$2y$10$PFsg5YoteRGgDVpH4uyMg.XIVkMFeAkhlp1tyQdOAurSL1OxsiD8u', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MTl9.DYbmWwU-EQdJQfumO3s4y4dvozFAO4EX3TqsE7-Nh-', NULL, '2019-10-03 11:22:11', '2019-10-03 11:22:11'),
(20, 'first last', 'first', 'last', 'first_last', 'admin2@asd.com', '$2y$10$iAztzA8rt1fi1uiCHip/1OLq3uZVK/HphHnb68ZyicUvX0vHilECK', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MjB9.CM26sIiRs0tqs0teFK_2IrovxH2eQ_YjONiseYR1KZ', NULL, '2019-10-03 11:22:58', '2019-10-03 11:22:58'),
(21, 'first last', 'first', 'last', 'first_last', 'admin3@asd.com', '$2y$10$ZigP6aRM/Bhby2jfjoMs6O4cBB9Xf3Bz8o/M50NtF01Hj99Yj6nR6', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MjF9.fdC6hHp3rpPLPrdsvTor8AgNfxSjiozHE3g3zMknV7', NULL, '2019-10-03 11:38:53', '2019-10-03 11:38:53'),
(22, 'qwe zxc', 'qwe', 'zxc', 'qwe_zxc', 'newemail@asd.com', '$2y$10$MzyCGbWvrkccRdaMG6GRteqSsLVznXHGteRyoUM8VCpSqnRlT3jdG', NULL, NULL, 'KfkUYC9K7xpfMXYKXdwUSO1JqgbJAg53MD6hXYOjhnsapkZVSOHtCODGfdMW', NULL, '2019-10-03 11:54:50', '2019-10-03 11:54:50'),
(23, 'ghj asd', 'ghj', 'asd', 'ghj_asd', 'admin48@asd.com', '$2y$10$vPrkc8YRpsfs9KLUWuF6duYU.CEhZFcx9DcsnRy6TRyO/.Klsumte', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MjN9.nM6v3hg5Nwh_KvzYg491FawAZXvrVFBTutGBaYmpYO', NULL, '2019-10-03 12:00:22', '2019-10-03 12:00:22'),
(24, 'myadmin mylasadmin', 'myadmin', 'mylasadmin', 'myadmin_mylasadmin', 'admin@fgfgdg.com', '$2y$10$.rPt4jcwUb2rIqzwuTAyfOG6hRIaAekfZAxsXz83aS.QR.Hs7Stsa', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MjR9.KfMAWyodZv7RRChzEqKYADBSP_447RkSuNkthmtShd', NULL, '2019-10-06 18:22:47', '2019-10-06 18:22:47'),
(25, 'myadminfdgfdg mylasadmindfgdfg', 'myadminfdgfdg', 'mylasadmindfgdfg', 'myadminfdgfdg_mylasadmindfgdfg', 'admin@fgfgeeeeeeeeedg.com', '$2y$10$MX70ay2IgD7yz7/fK4n/E.bLs1/AcFZ4WQDqzW9a1dukxy8MQ5/hu', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MjV9.QcaK0tvtkCd5qbkk9-E-DkieA-hQbYfimYE0QdgMZz', NULL, '2019-10-06 18:23:46', '2019-10-06 18:23:46'),
(26, 'hossam ahmad', 'hossam', 'ahmad', 'hossam_ahmad', 'hosegy933@gmail.com', '$2y$10$p8Hv0YM0/BO581BTww9NJ.vO8QPBWUrOmldsC7Fdn247F8lvWSm3C', NULL, NULL, 'SFOFoXnEQJoZM4AMAYR4WIOtaQCKvul7kHshvNSmr8IUocEMDqIGD9fub6zm', NULL, '2019-10-13 21:37:23', '2019-10-13 21:37:23'),
(27, 'hossam ahmad', 'hossam', 'ahmad', 'hossam_ahmad', 'hosegy9333@gmail.com', '$2y$10$FvFOhK1ccskK3ts7vrIxSuLeisWRbthbvdhcTW/ariX0cNsLiU1KK', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6Mjd9.MskZ_M8bkf-Piq0vhsQ-2Rs-jd4YMks-0gC0Xt9EVv', NULL, '2019-10-13 22:15:15', '2019-10-13 22:15:15'),
(28, 'hossam ahmad', 'hossam', 'ahmad', 'hossam_ahmad', 'hosegy93333@gmail.com', '$2y$10$Lnwp510MYjlPt9b8vFRD8.gJGmBKW.2HAYafDZ8sBnXgTa0hcw16C', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6Mjh9.RITHS3Ac2Nb1xm_LXElXYtK2oF4SNdLAnLuVeEYFWyU', NULL, '2019-10-13 22:17:30', '2019-10-13 22:17:30'),
(29, 'hossam ahmad', 'hossam', 'ahmad', 'hossam_ahmad', 'hosegy933333@gmail.com', '$2y$10$pjejXitK7Nt3cpsB3CF/IuT5Pmu/E.I3cfIIKq0JArXN1JHyWj9H.', NULL, NULL, 'Rjh6v81bDpTZ6DRbjDIJ4wX0Ywn9UyMgtMuxo2d0ssHMDZoM8UWAh9mwgMdd', NULL, '2019-10-13 22:20:52', '2019-10-13 22:20:52'),
(30, 'hossam ahmad', 'hossam', 'ahmad', 'hossam_ahmad', 'hosegy95@gmail.com', '$2y$10$a.VcAhNTi8HndIIVdEWsmOq.V4bWfSjGxOSMQ2TryHpAWNjQqkAe6', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MzB9.p_ZNFNGWDmBlQOmlXTcOBQUO_Hm1_f8mnAz5j5ePspA', NULL, '2019-10-13 23:03:48', '2019-10-13 23:03:48'),
(31, 'ahmed ab', 'ahmed', 'ab', 'ahmed_ab', 'ahmedhtml62@gmail.com', '$2y$10$TPl/X0eUH0zADLmeoPRd2uOy6ZFDdNiEkxlsy30aUntN7dLGAUgr6', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MzF9.0QEAxra_ekfKl6KhR9shxUCyw1vwIp762JgKrOmisMo', NULL, '2019-10-16 00:43:56', '2019-10-16 00:43:56'),
(32, 'ahmeda aba', 'ahmeda', 'aba', 'ahmeda_aba', 'ahmed_html@gmail.com', '$2y$10$hOrlfeL72MZI2gbcDloIXOu15VB9X.wl.EYBDKqphW98cK0LiqORm', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MzJ9.KaexsoT9frdceIOR7pjum3v1mfXKDFTc6rUhC23wTiQ', NULL, '2019-10-16 00:46:27', '2019-10-16 00:46:27'),
(33, 'hossam ahmad', 'hossam', 'ahmad', 'hossam_ahmad', 'hosegy96@gmail.com', '$2y$10$9BPWeCYss3LF4HsN3Uiuu.ChVI6ECU7.7dfn8Y6vI0MludHOvxNMy', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MzN9.xGhSTRGo-7lfDs8LZ6GNyRLH2tb0cibselsAA_U_78Q', NULL, '2019-10-17 17:52:14', '2019-10-17 17:52:14'),
(34, 'H A', 'H', 'A', 'h_a', 'hosegy96@gmail.com', '$2y$10$tS5xGSsyQlBJCb38tJdi8Oga53im158ti.oA8IqgRlfSE9e6/90au', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MzR9.B-aUIrzxrxkN7B8EckuYSrKLYxjgga0me4fxszY3JoA', NULL, '2019-10-17 17:56:16', '2019-10-17 17:56:16'),
(35, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$m1zMyDCiTxS7K.KQ6HuG7O5yP3vne7317j1CQ3njTQ82PGpH/bauG', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MzV9.e8z_Js_q8mchq8WRKekEb6nYGnwgFgTXpLoQ9IQG91Q', NULL, '2019-10-21 20:11:49', '2019-10-21 20:11:49'),
(36, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$3L83HZGpqlxWJIJAT1/oZeQDdZn7O/srQ4WHH5ORphIIIYDLJbLvi', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6MzZ9.Tcs_mNgWGPtCvvJz81JRWxEqvMudApJ_QIOfULb0rqI', NULL, '2019-10-21 20:15:03', '2019-10-21 20:15:03'),
(37, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$wxBRa3ZGlFK8MAZWRP1R6Oj5HKD9X2.QFYoBk.FEiEzgkMTnGotMq', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6Mzd9.U9Tc7zsEGxybsJBo5aUb4UR7lxiqRN06XYul8t5oRg4', NULL, '2019-10-21 20:18:16', '2019-10-21 20:18:16'),
(38, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$LPmTO.ORGsMNWnYoISAziOmC.LG0a1P6/18hRz4cPbuk4Cup6wQNS', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6Mzh9.g6dvLwi4051ur_35qPnDYR9e1uHvbN-BTnNMnfAtpWQ', NULL, '2019-10-21 20:25:37', '2019-10-21 20:25:37'),
(39, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$11/1GKkzk.ysHmz8.FyLWeM8UxHi1AlU6fx98JLYtLxzOia8EU0m.', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6Mzl9.ck63NExhDcFhChUmO_PzN2CrwFeXaAsg_Q1oZ_yVl8c', NULL, '2019-10-21 20:29:45', '2019-10-21 20:29:45'),
(40, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$833oyx0IFlhyV7N3hXAR/e1ZgROJc0BKBkY8T1IzlKaXVtpg7IiSG', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NDB9.s9Rs4aHPE4QkrkmagHGWqj-s_fKhbu6p5O322IsVtc4', NULL, '2019-10-21 20:30:51', '2019-10-21 20:30:51'),
(41, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$bttYb6Aoa/htVIuhIYsY/OVL9bwH8eh3SV9REM.gRLHjimND4Keqm', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NDF9.QwJLgrB1c0XjL7P943GvXCqq9SigS74NGHx1s9qKcYw', NULL, '2019-10-21 20:31:50', '2019-10-21 20:31:50'),
(42, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$iZHHA4f93gGikvgcBRWMO.0SYDa4NHdCJCUcwzI8DyhJU9vuuTa2G', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NDJ9.x2tZDrI7TLNaPYFnrA5Xpf3yjIDk5BDkAAQjKagw7u0', NULL, '2019-10-21 20:37:45', '2019-10-21 20:37:45'),
(43, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$Peh35lmtOs2aGZ4j3Z37oOKja.o4866f8QOa1riTEU4tKnnXeLKKy', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NDN9.dF2isFpoZ_FGvz6LwHX0XnsO6F8cCZ47_NE2uibjEGM', NULL, '2019-10-21 20:45:30', '2019-10-21 20:45:30'),
(44, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$Ol9YMBjbbYmTyz2symfrUO.FTRocyZYPOG5Nk2y4iW2WUe9oNxZy2', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NDR9.XOPp7cCCfcluu4Lu4-vbt90cBwlpXKzL1SDbhswPF7w', NULL, '2019-10-21 20:46:37', '2019-10-21 20:46:37'),
(45, 'ahmed ucs2', 'ahmed', 'ucs2', 'ahmed_ucs2', 'ahmed@hubbucs.com', '$2y$10$RH6DO0.wA.tBaxwHmwcH6O50q52mxmcsbRp152mr.CGW3RdCMJmgK', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NDV9.sl8CSHJA7qLqZiivF6mOY3Yc4J43ADL0zwSqMLpGs5Y', NULL, '2019-10-21 20:46:38', '2019-10-21 20:46:38'),
(46, 'HA .', 'HA', '.', 'ha_.', 'hosegy93@gmail.com', '$2y$10$.xwC20FIfZixQHdoNoGgg.aSq7Pg6NDsw6ZQ/Jc8uEGqIGm7LuYL2', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NDZ9.FCJ8RyFpcYBzKoSROZEJ_UjuhcU0CwYOBFRD_J0Txes', NULL, '2019-10-21 20:46:39', '2019-10-21 20:46:39'),
(47, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$lOGABSa5WefHyBEnxJCljew/WVBfzzmIKtuaEI7uxzWeoPhEY.0D.', NULL, NULL, 'j1XKL4xreNoQHCGJW2Ix2W7og1Zffz0lGrluCwqeaZGlGP5MJACMIrmv8ea4', NULL, '2019-10-21 21:13:03', '2019-10-21 21:13:03'),
(48, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$ElrK5hyQamhy7Uco51vF0OpWXXx1NunqBUGd25JkT9cp1kUHpHGfO', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NDh9.tbR684XC11Rq-my3hIMMZDwo2nkRV1Pzt0RvxyslC7Q', NULL, '2019-10-21 21:13:58', '2019-10-21 21:13:58'),
(49, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$cmzTGMh8.cYG8Mder.OQYeMYbPYMH1FVD/tZJujdpJDIGtB0quKgG', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NDl9.5FxCRAmFYtcgGyDRM3hncwParZqoZ6Q8SgReMXOCYRU', NULL, '2019-10-21 21:39:16', '2019-10-21 21:39:16'),
(50, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$qbklue5p2IhLj0QwDdX.EOC2td83SkUELolzYzWXFEtN8l8D694Yy', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NTB9.9nbmtAyXl7fIpFfyFkUXSeRmfzFNDExse2SaQX4Eymg', NULL, '2019-10-21 22:49:10', '2019-10-21 22:49:10'),
(51, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$amgc9F3kK6nYtsmYycff0OrEkhFZutum9cqYog/bDIy8sAhJ9hm0q', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NTF9.NlUVfLqSKhbizaGyYP5__MoBnyj8AZHD97yIlCL3GVU', NULL, '2019-10-21 23:03:15', '2019-10-21 23:03:15'),
(52, 'test101 .', 'test101', '.', 'test101', 'test10@hubbucs.com', '$2y$10$ocSrY9zv5RgFpT24StaHXuNAjB4KbZo6/ShcPgb3nzSLtC/f.AqZ.', NULL, NULL, 'v3wDeSsM8nz59z018bpHELVyvIFLVNq9YcjyFH5jyVS5hGfog7iEHcak3yNQ', NULL, '2019-10-21 23:22:22', '2019-10-21 23:22:22'),
(53, 'Ahmed .', 'Ahmed', '.', 'ahmed_.', 'ahmedhtml62@gmail.com', '$2y$10$QhegtFbr8lp2g3sxexIqIevvqFdazp0iiub2TTmmy2v2YXUn1.ice', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NTN9.e1QcT-UF2T5OUa-nYJjelHNKpdScbrOX8oPkVizmRd0', NULL, '2019-10-21 23:29:17', '2019-10-21 23:29:17'),
(54, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$7MTfH1nYqHPUAlnBPZxqRehhyw7NBxm/0ipJq956ZmLIRTiZM9JKC', NULL, NULL, '5S8q2XOGGuAvBxe0ZxFULMROqltOMggPCK43IXzPqrJzeps78bsNtY5jyg93', NULL, '2019-10-21 23:31:28', '2019-10-21 23:31:28'),
(55, 'Ahmed .', 'Ahmed', '.', 'ahmed', 'ahmedhtml62@gmail.com', '$2y$10$VNBHKKwzP5bqt7dB2Br1zOQRoiMlONOerQiFTAJcpMasiuUDBOkqy', NULL, NULL, 'BlmYsEqQEwI8zvFVAkTC5wQhzl2p1ienL7TAI3bm9sKlx4elLVODXB50trsQ', NULL, '2019-10-21 23:31:28', '2019-10-21 23:31:28'),
(56, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$FMBhjgb7HtIOVZ5MNcgjjeSCV2CS9EGi3dP4SKe0mnPkwPr2YGJey', NULL, NULL, 'Yxga01q4536XhesPAqAO7dh5VkZktsuAkpqcVlnSvjJZf4CBFryqwQ846BF6', NULL, '2019-10-21 23:34:13', '2019-10-21 23:34:13'),
(57, 'Ahmed .', 'Ahmed', '.', 'ahmed_.', 'ahmedhtml62@gmail.com', '$2y$10$EYFIq0mSm4eL77nsSl9Tb.ZDk38dSDKSdrZSWKCxyhnwXggU3qIea', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NTd9.CGCMfez40EE9xv8dgFGxHJ-LdqR7JZ80MC4jyegRgBE', NULL, '2019-10-21 23:34:14', '2019-10-21 23:34:14'),
(58, 'hossam ahmad', 'hossam', 'ahmad', 'hossam_ahmad', 'hosegy96@gmail.com', '$2y$10$AHqYETTsLhLO7qdNGQ4dqeLiumdC7gIe1dU8FtZkoZEe6tfBOhxyq', NULL, NULL, 'gW7a0i89eoKQZQ4FrlQsJL6I3CpVn6Q44KNh8n8CELqpGmOu67y8rEBeyGGT', NULL, '2019-10-22 13:50:45', '2019-10-22 13:50:45'),
(59, 'Hossam .', 'Hossam', '.', 'hossam', 'hossam.ahmad.programmer@gmail.com', '$2y$10$cZvB09loWMdB3SVgGFoI4.1VcLx.LzUNTlHLpZpzMQZY9Q0S68E/W', NULL, NULL, 'NlEEcUCkZ7v2Y5avPSmvDIDsC7jVpTflUY8t18ZcC6FYfIUt08DkJwmq2jii', NULL, '2019-10-22 17:33:57', '2019-10-22 17:33:57'),
(60, 'test101 .', 'test101', '.', 'test101_.', 'test10@hubbucs.com', '$2y$10$V61WVIjiku568Rwg7EcshOuGywYbES9PpOdviDPAC1xqTbUCScvmu', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NjB9.PMFmC9lmY7gZdBDGFknVfBQ8zv11WKI1SLjm-OCXinA', NULL, '2019-10-22 23:29:19', '2019-10-22 23:29:19'),
(61, 'HUBB UCS', 'HUBB', 'UCS', 'hubb_ucs', 'hello@hubbucs.com', '$2y$10$qzQ5N.NyJFTmFFU9qlsswuK5qcTKDRKEPV2fdBXmIYPZubDy4e7Xe', NULL, NULL, 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbl9pZCI6NjF9.FCIb5lo5QCSXv960bS1u32hHdCKT6PHbjmW7K87gxBo', NULL, '2019-10-22 23:38:42', '2019-10-22 23:38:42');

-- --------------------------------------------------------

--
-- Table structure for table `users_roles`
--

CREATE TABLE `users_roles` (
  `id` int(10) UNSIGNED NOT NULL,
  `role_id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `team_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `users_roles`
--

INSERT INTO `users_roles` (`id`, `role_id`, `user_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 1, 1, 1, NULL, '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(2, 1, 2, 1, NULL, '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(3, 4, 3, 2, NULL, '2019-08-28 12:43:56', '2019-08-28 12:43:56'),
(4, 5, 4, 3, NULL, '2019-08-31 10:15:22', '2019-08-31 10:15:22'),
(12, 1, 12, 11, NULL, '2019-09-19 12:35:54', '2019-09-19 12:35:54'),
(13, 1, 13, 12, NULL, '2019-09-19 12:45:24', '2019-09-19 12:45:24'),
(14, 1, 14, 13, NULL, '2019-09-19 12:47:28', '2019-09-19 12:47:28'),
(15, 1, 15, 14, NULL, '2019-09-19 12:49:50', '2019-09-19 12:49:50'),
(16, 1, 16, 15, NULL, '2019-09-19 12:51:12', '2019-09-19 12:51:12'),
(17, 1, 17, 16, NULL, '2019-10-03 11:06:48', '2019-10-03 11:06:48'),
(19, 1, 21, 18, NULL, '2019-10-03 11:38:54', '2019-10-03 11:38:54'),
(20, 1, 22, 18, NULL, '2019-10-03 11:48:40', '2019-10-03 11:48:40'),
(21, 1, 23, 18, NULL, '2019-10-03 12:00:22', '2019-10-03 12:00:22'),
(22, 1, 24, 19, NULL, '2019-10-06 18:22:47', '2019-10-06 18:22:47'),
(23, 1, 25, 20, NULL, '2019-10-06 18:23:46', '2019-10-06 18:23:46'),
(24, 1, 26, 21, NULL, '2019-10-13 21:37:23', '2019-10-13 21:37:23'),
(25, 1, 27, 22, NULL, '2019-10-13 22:15:15', '2019-10-13 22:15:15'),
(26, 1, 28, 23, NULL, '2019-10-13 22:17:30', '2019-10-13 22:17:30'),
(27, 1, 29, 24, NULL, '2019-10-13 22:20:52', '2019-10-13 22:20:52'),
(28, 1, 30, 25, NULL, '2019-10-13 23:03:48', '2019-10-13 23:03:48'),
(29, 1, 31, 26, NULL, '2019-10-16 00:43:56', '2019-10-16 00:43:56'),
(30, 1, 32, 27, NULL, '2019-10-16 00:46:27', '2019-10-16 00:46:27'),
(31, 1, 33, 28, NULL, '2019-10-17 17:52:14', '2019-10-17 17:52:14'),
(32, 1, 34, 27, NULL, '2019-10-17 17:56:16', '2019-10-17 17:56:16'),
(33, 1, 36, 29, NULL, '2019-10-21 20:15:03', '2019-10-21 20:15:03'),
(34, 1, 37, 30, NULL, '2019-10-21 20:18:16', '2019-10-21 20:18:16'),
(35, 1, 38, 31, NULL, '2019-10-21 20:25:37', '2019-10-21 20:25:37'),
(36, 1, 39, 32, NULL, '2019-10-21 20:29:45', '2019-10-21 20:29:45'),
(37, 1, 40, 33, NULL, '2019-10-21 20:30:51', '2019-10-21 20:30:51'),
(38, 1, 41, 34, NULL, '2019-10-21 20:31:50', '2019-10-21 20:31:50'),
(39, 1, 42, 35, NULL, '2019-10-21 20:37:45', '2019-10-21 20:37:45'),
(40, 1, 43, 36, NULL, '2019-10-21 20:45:30', '2019-10-21 20:45:30'),
(41, 1, 44, 37, NULL, '2019-10-21 20:46:37', '2019-10-21 20:46:37'),
(42, 1, 45, 37, NULL, '2019-10-21 20:46:38', '2019-10-21 20:46:38'),
(43, 1, 46, 37, NULL, '2019-10-21 20:46:39', '2019-10-21 20:46:39'),
(44, 1, 47, 38, NULL, '2019-10-21 21:13:03', '2019-10-21 21:13:03'),
(45, 1, 48, 39, NULL, '2019-10-21 21:13:58', '2019-10-21 21:13:58'),
(46, 1, 49, 40, NULL, '2019-10-21 21:39:16', '2019-10-21 21:39:16'),
(47, 1, 50, 41, NULL, '2019-10-21 22:49:10', '2019-10-21 22:49:10'),
(48, 1, 51, 42, NULL, '2019-10-21 23:03:15', '2019-10-21 23:03:15'),
(49, 1, 52, 43, NULL, '2019-10-21 23:22:22', '2019-10-21 23:22:22'),
(50, 1, 53, 43, NULL, '2019-10-21 23:29:17', '2019-10-21 23:29:17'),
(51, 1, 54, 44, NULL, '2019-10-21 23:31:28', '2019-10-21 23:31:28'),
(52, 1, 55, 44, NULL, '2019-10-21 23:31:28', '2019-10-21 23:31:28'),
(53, 1, 56, 45, NULL, '2019-10-21 23:34:13', '2019-10-21 23:34:13'),
(54, 1, 57, 45, NULL, '2019-10-21 23:34:14', '2019-10-21 23:34:14'),
(55, 1, 58, 46, NULL, '2019-10-22 13:50:45', '2019-10-22 13:50:45'),
(56, 1, 59, 47, NULL, '2019-10-22 17:33:57', '2019-10-22 17:33:57'),
(57, 1, 60, 48, NULL, '2019-10-22 23:29:19', '2019-10-22 23:29:19'),
(58, 1, 61, 48, NULL, '2019-10-22 23:38:42', '2019-10-22 23:38:42');

-- --------------------------------------------------------

--
-- Table structure for table `user_teams`
--

CREATE TABLE `user_teams` (
  `id` int(10) UNSIGNED NOT NULL,
  `user_id` int(10) UNSIGNED NOT NULL,
  `team_id` int(10) UNSIGNED NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `user_teams`
--

INSERT INTO `user_teams` (`id`, `user_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 1, 1, NULL, '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(2, 2, 1, NULL, '2019-08-28 12:42:59', '2019-08-28 12:42:59'),
(3, 3, 2, NULL, '2019-08-28 12:43:55', '2019-08-28 12:43:55'),
(4, 4, 3, NULL, '2019-08-31 10:15:21', '2019-08-31 10:15:21'),
(12, 12, 11, NULL, '2019-09-19 12:35:54', '2019-09-19 12:35:54'),
(13, 13, 12, NULL, '2019-09-19 12:45:24', '2019-09-19 12:45:24'),
(14, 14, 13, NULL, '2019-09-19 12:47:28', '2019-09-19 12:47:28'),
(15, 15, 14, NULL, '2019-09-19 12:49:50', '2019-09-19 12:49:50'),
(16, 16, 15, NULL, '2019-09-19 12:51:12', '2019-09-19 12:51:12'),
(17, 17, 16, NULL, '2019-10-03 11:06:48', '2019-10-03 11:06:48'),
(19, 21, 18, NULL, '2019-10-03 11:38:54', '2019-10-03 11:38:54'),
(20, 22, 18, NULL, '2019-10-03 11:48:40', '2019-10-03 11:48:40'),
(21, 23, 18, NULL, '2019-10-03 12:00:22', '2019-10-03 12:00:22'),
(22, 24, 19, NULL, '2019-10-06 18:22:47', '2019-10-06 18:22:47'),
(23, 25, 20, NULL, '2019-10-06 18:23:46', '2019-10-06 18:23:46'),
(24, 26, 21, NULL, '2019-10-13 21:37:23', '2019-10-13 21:37:23'),
(25, 27, 22, NULL, '2019-10-13 22:15:15', '2019-10-13 22:15:15'),
(26, 28, 23, NULL, '2019-10-13 22:17:30', '2019-10-13 22:17:30'),
(27, 29, 24, NULL, '2019-10-13 22:20:52', '2019-10-13 22:20:52'),
(28, 30, 25, NULL, '2019-10-13 23:03:48', '2019-10-13 23:03:48'),
(29, 31, 26, NULL, '2019-10-16 00:43:56', '2019-10-16 00:43:56'),
(30, 32, 27, NULL, '2019-10-16 00:46:27', '2019-10-16 00:46:27'),
(31, 33, 28, NULL, '2019-10-17 17:52:14', '2019-10-17 17:52:14'),
(32, 34, 27, NULL, '2019-10-17 17:56:16', '2019-10-17 17:56:16'),
(33, 36, 29, NULL, '2019-10-21 20:15:03', '2019-10-21 20:15:03'),
(34, 37, 30, NULL, '2019-10-21 20:18:16', '2019-10-21 20:18:16'),
(35, 38, 31, NULL, '2019-10-21 20:25:37', '2019-10-21 20:25:37'),
(36, 39, 32, NULL, '2019-10-21 20:29:45', '2019-10-21 20:29:45'),
(37, 40, 33, NULL, '2019-10-21 20:30:51', '2019-10-21 20:30:51'),
(38, 41, 34, NULL, '2019-10-21 20:31:50', '2019-10-21 20:31:50'),
(39, 42, 35, NULL, '2019-10-21 20:37:45', '2019-10-21 20:37:45'),
(40, 43, 36, NULL, '2019-10-21 20:45:30', '2019-10-21 20:45:30'),
(41, 44, 37, NULL, '2019-10-21 20:46:37', '2019-10-21 20:46:37'),
(42, 45, 37, NULL, '2019-10-21 20:46:38', '2019-10-21 20:46:38'),
(43, 46, 37, NULL, '2019-10-21 20:46:39', '2019-10-21 20:46:39'),
(44, 47, 38, NULL, '2019-10-21 21:13:03', '2019-10-21 21:13:03'),
(45, 48, 39, NULL, '2019-10-21 21:13:58', '2019-10-21 21:13:58'),
(46, 49, 40, NULL, '2019-10-21 21:39:16', '2019-10-21 21:39:16'),
(47, 50, 41, NULL, '2019-10-21 22:49:10', '2019-10-21 22:49:10'),
(48, 51, 42, NULL, '2019-10-21 23:03:15', '2019-10-21 23:03:15'),
(49, 52, 43, NULL, '2019-10-21 23:22:22', '2019-10-21 23:22:22'),
(50, 53, 43, NULL, '2019-10-21 23:29:17', '2019-10-21 23:29:17'),
(51, 54, 44, NULL, '2019-10-21 23:31:28', '2019-10-21 23:31:28'),
(52, 55, 44, NULL, '2019-10-21 23:31:28', '2019-10-21 23:31:28'),
(53, 56, 45, NULL, '2019-10-21 23:34:13', '2019-10-21 23:34:13'),
(54, 57, 45, NULL, '2019-10-21 23:34:14', '2019-10-21 23:34:14'),
(55, 58, 46, NULL, '2019-10-22 13:50:45', '2019-10-22 13:50:45'),
(56, 59, 47, NULL, '2019-10-22 17:33:57', '2019-10-22 17:33:57'),
(57, 60, 48, NULL, '2019-10-22 23:29:19', '2019-10-22 23:29:19'),
(58, 61, 48, NULL, '2019-10-22 23:38:42', '2019-10-22 23:38:42');

-- --------------------------------------------------------

--
-- Table structure for table `watch_wiki`
--

CREATE TABLE `watch_wiki` (
  `id` int(10) UNSIGNED NOT NULL,
  `wiki_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `watch_wiki`
--

INSERT INTO `watch_wiki` (`id`, `wiki_id`, `user_id`, `created_at`, `updated_at`) VALUES
(1, 3, 3, '2019-08-31 06:47:30', '2019-08-31 06:47:30');

-- --------------------------------------------------------

--
-- Table structure for table `wiki`
--

CREATE TABLE `wiki` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `slug` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `outline` varchar(1000) COLLATE utf8_unicode_ci NOT NULL,
  `description` longtext COLLATE utf8_unicode_ci,
  `user_id` int(10) UNSIGNED NOT NULL,
  `space_id` int(10) UNSIGNED NOT NULL,
  `team_id` int(10) UNSIGNED DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `wiki`
--

INSERT INTO `wiki` (`id`, `name`, `slug`, `outline`, `description`, `user_id`, `space_id`, `team_id`, `deleted_at`, `created_at`, `updated_at`) VALUES
(1, 'Laravel', 'laravel', 'Iusto omnis sed magni porro Nam earum', '<h1>Love beautiful code? We do too.</h1>\r\n\r\n<hr />\r\n<p>The PHP Framework For Web Artisans</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Idea extends Eloquent\r\n{\r\n\r\n	/**\r\n	 * Dreaming of something more?\r\n	 *\r\n	 * @with  Laravel\r\n	 */\r\n	 public function create()\r\n	 {\r\n	 	// Have a fresh start...\r\n	 }\r\n\r\n}</code></pre>\r\n\r\n<h2>Expressive, beautiful syntax</h2>\r\n\r\n<hr />\r\n<p>Value elegance, simplicity, and readability? You&rsquo;ll fit right in. Laravel is designed for people just like you. If you need help getting started, check out <a href=\"https://laracasts.com\">Laracasts</a> and our <a href=\"/docs\">great documentation</a>.</p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Purchase implements ShouldQueue\r\n{\r\n\r\n	/**\r\n	 * Purchase a new podcast.\r\n	 */\r\n	 public function handle(Repository $repo)\r\n	 {</code></pre>\r\n\r\n<h2>Tailored for your team:</h2>\r\n\r\n<hr />\r\n<p>Whether you&#39;re a solo developer or a 20 person team, Laravel is a breath of fresh air. Keep everyone in sync using Laravel&#39;s database agnostic <a href=\"/docs/migrations\">migrations</a> and <a href=\"/docs/migrations\">schema builder</a>.</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">~/Apps $ php artisan make:migration create_users_table\r\nMigration created successfully!\r\n\r\n~/Apps $ php artisan migrate --seed\r\nMigrated: 2015_01_12_000000_create_users_table\r\nMigrated: 2015_01_12_100000_create_password_resets_table\r\nMigrated: 2015_01_13_162500_create_projects_table\r\nMigrated: 2015_01_13_162508_create_servers_table</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', 1, 1, 1, NULL, '2019-08-28 12:42:58', '2019-08-28 12:42:58'),
(2, 'title the question needed ?', 'title-the-question-needed', '', '<p>the answer with full specifications&nbsp;</p>\r\n', 3, 7, 2, NULL, '2019-08-28 12:46:37', '2019-08-28 12:46:37'),
(3, 'title the question needed ?', 'title-the-question-needed-1', 'asdsad', '<p>the answer with full specifications&nbsp;</p>\r\n', 3, 7, 2, NULL, '2019-08-28 12:47:00', '2019-08-28 12:47:00'),
(4, 'how to start campaign ?', 'how-to-start-campaign', '', '<p>bla bla bla&nbsp;bla bla bla&nbsp;bla bla bla</p>\r\n\r\n<p>bla bla bla&nbsp;bla bla bla&nbsp;bla bla bla&nbsp;bla bla bla&nbsp;bla bla bla&nbsp;bla bla bla​​​​​​​</p>\r\n\r\n<p>bla bla bla&nbsp;bla bla bla&nbsp;bla bla bla​​​​​​​bla bla bla&nbsp;bla bla bla&nbsp;bla bla bla​​​​​​​bla bla bla&nbsp;bla bla bla&nbsp;bla bla bla​​​​​​​bla bla bla&nbsp;bla bla bla&nbsp;bla bla bla​​​​​​​</p>\r\n', 4, 8, 3, NULL, '2019-08-31 10:17:23', '2019-08-31 10:17:23'),
(5, 'Question 1', 'question-1', '', '<p>answer anwer ansqwer</p>\r\n', 29, 9, 24, NULL, '2019-10-13 22:23:39', '2019-10-13 22:23:39'),
(6, 'How to send emails?', 'how-to-send-emails', 'Email Campaigns', '<p>Step 1</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step 2</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step 3</p>\r\n', 61, 15, 48, NULL, '2019-10-22 23:44:12', '2019-10-22 23:44:12'),
(7, 'CRM Contacts', 'crm-contacts', 'CRM Contacts', '<p>Here you will find all details about CRM Contacts</p>\r\n', 61, 15, 48, NULL, '2019-10-23 00:06:51', '2019-10-23 00:06:51');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `activities`
--
ALTER TABLE `activities`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `integration`
--
ALTER TABLE `integration`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `integration_actions`
--
ALTER TABLE `integration_actions`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `invites`
--
ALTER TABLE `invites`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `likes`
--
ALTER TABLE `likes`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `notifications`
--
ALTER TABLE `notifications`
  ADD PRIMARY KEY (`id`),
  ADD KEY `notifications_from_id_index` (`from_id`),
  ADD KEY `notifications_from_type_index` (`from_type`),
  ADD KEY `notifications_to_id_index` (`to_id`),
  ADD KEY `notifications_to_type_index` (`to_type`),
  ADD KEY `notifications_category_id_index` (`category_id`);

--
-- Indexes for table `notification_categories`
--
ALTER TABLE `notification_categories`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `notification_categories_name_unique` (`name`),
  ADD KEY `notification_categories_name_index` (`name`);

--
-- Indexes for table `page`
--
ALTER TABLE `page`
  ADD PRIMARY KEY (`id`),
  ADD KEY `page_parent_id_index` (`parent_id`),
  ADD KEY `page_lft_index` (`lft`),
  ADD KEY `page_rgt_index` (`rgt`);

--
-- Indexes for table `page_tags`
--
ALTER TABLE `page_tags`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `permissions`
--
ALTER TABLE `permissions`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `read_list`
--
ALTER TABLE `read_list`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `roles`
--
ALTER TABLE `roles`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `role_permissions`
--
ALTER TABLE `role_permissions`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `space`
--
ALTER TABLE `space`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tags`
--
ALTER TABLE `tags`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `teams`
--
ALTER TABLE `teams`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `team_integration_actions`
--
ALTER TABLE `team_integration_actions`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users_roles`
--
ALTER TABLE `users_roles`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `user_teams`
--
ALTER TABLE `user_teams`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `watch_wiki`
--
ALTER TABLE `watch_wiki`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `wiki`
--
ALTER TABLE `wiki`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `activities`
--
ALTER TABLE `activities`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- AUTO_INCREMENT for table `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `integration`
--
ALTER TABLE `integration`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `integration_actions`
--
ALTER TABLE `integration_actions`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT for table `invites`
--
ALTER TABLE `invites`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT for table `likes`
--
ALTER TABLE `likes`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=34;

--
-- AUTO_INCREMENT for table `notifications`
--
ALTER TABLE `notifications`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `notification_categories`
--
ALTER TABLE `notification_categories`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT for table `page`
--
ALTER TABLE `page`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=24;

--
-- AUTO_INCREMENT for table `page_tags`
--
ALTER TABLE `page_tags`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT for table `permissions`
--
ALTER TABLE `permissions`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT for table `read_list`
--
ALTER TABLE `read_list`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `roles`
--
ALTER TABLE `roles`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT for table `role_permissions`
--
ALTER TABLE `role_permissions`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=27;

--
-- AUTO_INCREMENT for table `space`
--
ALTER TABLE `space`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;

--
-- AUTO_INCREMENT for table `tags`
--
ALTER TABLE `tags`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT for table `teams`
--
ALTER TABLE `teams`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=49;

--
-- AUTO_INCREMENT for table `team_integration_actions`
--
ALTER TABLE `team_integration_actions`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=62;

--
-- AUTO_INCREMENT for table `users_roles`
--
ALTER TABLE `users_roles`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=59;

--
-- AUTO_INCREMENT for table `user_teams`
--
ALTER TABLE `user_teams`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=59;

--
-- AUTO_INCREMENT for table `watch_wiki`
--
ALTER TABLE `watch_wiki`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `wiki`
--
ALTER TABLE `wiki`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `notifications`
--
ALTER TABLE `notifications`
  ADD CONSTRAINT `notifications_category_id_foreign` FOREIGN KEY (`category_id`) REFERENCES `notification_categories` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
